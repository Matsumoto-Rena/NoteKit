
NucleoF303K8-PlayMusic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006040  08006040  00007040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b8  080060b8  0000807c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060b8  080060b8  000070b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c0  080060c0  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060c4  080060c4  000070c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080060c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000807c  2**0
                  CONTENTS
 10 .bss          00000410  2000007c  2000007c  0000807c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  0000807c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db8c  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c96  00000000  00000000  00015c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  000178d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000976  00000000  00000000  000184d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b42d  00000000  00000000  00018e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1e3  00000000  00000000  0003427b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a48c5  00000000  00000000  0004345e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e7d23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003908  00000000  00000000  000e7d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000eb670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006024 	.word	0x08006024

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08006024 	.word	0x08006024

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b988 	b.w	8000e68 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	468e      	mov	lr, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	4688      	mov	r8, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d962      	bls.n	8000c4c <__udivmoddi4+0xdc>
 8000b86:	fab2 f682 	clz	r6, r2
 8000b8a:	b14e      	cbz	r6, 8000ba0 <__udivmoddi4+0x30>
 8000b8c:	f1c6 0320 	rsb	r3, r6, #32
 8000b90:	fa01 f806 	lsl.w	r8, r1, r6
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	40b7      	lsls	r7, r6
 8000b9a:	ea43 0808 	orr.w	r8, r3, r8
 8000b9e:	40b4      	lsls	r4, r6
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f fc87 	uxth.w	ip, r7
 8000ba8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bac:	0c23      	lsrs	r3, r4, #16
 8000bae:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc4:	f080 80ea 	bcs.w	8000d9c <__udivmoddi4+0x22c>
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f240 80e7 	bls.w	8000d9c <__udivmoddi4+0x22c>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	443b      	add	r3, r7
 8000bd2:	1a9a      	subs	r2, r3, r2
 8000bd4:	b2a3      	uxth	r3, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be6:	459c      	cmp	ip, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x8e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	f080 80d6 	bcs.w	8000da0 <__udivmoddi4+0x230>
 8000bf4:	459c      	cmp	ip, r3
 8000bf6:	f240 80d3 	bls.w	8000da0 <__udivmoddi4+0x230>
 8000bfa:	443b      	add	r3, r7
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c02:	eba3 030c 	sub.w	r3, r3, ip
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11d      	cbz	r5, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40f3      	lsrs	r3, r6
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d905      	bls.n	8000c26 <__udivmoddi4+0xb6>
 8000c1a:	b10d      	cbz	r5, 8000c20 <__udivmoddi4+0xb0>
 8000c1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4608      	mov	r0, r1
 8000c24:	e7f5      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c26:	fab3 f183 	clz	r1, r3
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d146      	bne.n	8000cbc <__udivmoddi4+0x14c>
 8000c2e:	4573      	cmp	r3, lr
 8000c30:	d302      	bcc.n	8000c38 <__udivmoddi4+0xc8>
 8000c32:	4282      	cmp	r2, r0
 8000c34:	f200 8105 	bhi.w	8000e42 <__udivmoddi4+0x2d2>
 8000c38:	1a84      	subs	r4, r0, r2
 8000c3a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	4690      	mov	r8, r2
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d0e5      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c46:	e9c5 4800 	strd	r4, r8, [r5]
 8000c4a:	e7e2      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f000 8090 	beq.w	8000d72 <__udivmoddi4+0x202>
 8000c52:	fab2 f682 	clz	r6, r2
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f040 80a4 	bne.w	8000da4 <__udivmoddi4+0x234>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	0c03      	lsrs	r3, r0, #16
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	b280      	uxth	r0, r0
 8000c66:	b2bc      	uxth	r4, r7
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c76:	fb04 f20c 	mul.w	r2, r4, ip
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x11e>
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0x11c>
 8000c86:	429a      	cmp	r2, r3
 8000c88:	f200 80e0 	bhi.w	8000e4c <__udivmoddi4+0x2dc>
 8000c8c:	46c4      	mov	ip, r8
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c94:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c98:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c9c:	fb02 f404 	mul.w	r4, r2, r4
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x144>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x142>
 8000cac:	429c      	cmp	r4, r3
 8000cae:	f200 80ca 	bhi.w	8000e46 <__udivmoddi4+0x2d6>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	1b1b      	subs	r3, r3, r4
 8000cb6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cba:	e7a5      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cbc:	f1c1 0620 	rsb	r6, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	fa0e f401 	lsl.w	r4, lr, r1
 8000ccc:	fa20 f306 	lsr.w	r3, r0, r6
 8000cd0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd8:	4323      	orrs	r3, r4
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	fa1f fc87 	uxth.w	ip, r7
 8000ce2:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce6:	0c1c      	lsrs	r4, r3, #16
 8000ce8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cf0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x1a0>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d02:	f080 809c 	bcs.w	8000e3e <__udivmoddi4+0x2ce>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f240 8099 	bls.w	8000e3e <__udivmoddi4+0x2ce>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	eba4 040e 	sub.w	r4, r4, lr
 8000d14:	fa1f fe83 	uxth.w	lr, r3
 8000d18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d20:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d24:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1ce>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d32:	f080 8082 	bcs.w	8000e3a <__udivmoddi4+0x2ca>
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d97f      	bls.n	8000e3a <__udivmoddi4+0x2ca>
 8000d3a:	3b02      	subs	r3, #2
 8000d3c:	443c      	add	r4, r7
 8000d3e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d42:	eba4 040c 	sub.w	r4, r4, ip
 8000d46:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d4a:	4564      	cmp	r4, ip
 8000d4c:	4673      	mov	r3, lr
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	d362      	bcc.n	8000e18 <__udivmoddi4+0x2a8>
 8000d52:	d05f      	beq.n	8000e14 <__udivmoddi4+0x2a4>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x1fe>
 8000d56:	ebb8 0203 	subs.w	r2, r8, r3
 8000d5a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d62:	fa22 f301 	lsr.w	r3, r2, r1
 8000d66:	431e      	orrs	r6, r3
 8000d68:	40cc      	lsrs	r4, r1
 8000d6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e74f      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000d72:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d76:	0c01      	lsrs	r1, r0, #16
 8000d78:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d82:	463b      	mov	r3, r7
 8000d84:	4638      	mov	r0, r7
 8000d86:	463c      	mov	r4, r7
 8000d88:	46b8      	mov	r8, r7
 8000d8a:	46be      	mov	lr, r7
 8000d8c:	2620      	movs	r6, #32
 8000d8e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d92:	eba2 0208 	sub.w	r2, r2, r8
 8000d96:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d9a:	e766      	b.n	8000c6a <__udivmoddi4+0xfa>
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	e718      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e72c      	b.n	8000bfe <__udivmoddi4+0x8e>
 8000da4:	f1c6 0220 	rsb	r2, r6, #32
 8000da8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	40b1      	lsls	r1, r6
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dca:	fb08 f904 	mul.w	r9, r8, r4
 8000dce:	40b0      	lsls	r0, r6
 8000dd0:	4589      	cmp	r9, r1
 8000dd2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd6:	b280      	uxth	r0, r0
 8000dd8:	d93e      	bls.n	8000e58 <__udivmoddi4+0x2e8>
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x276>
 8000de2:	4589      	cmp	r9, r1
 8000de4:	d81f      	bhi.n	8000e26 <__udivmoddi4+0x2b6>
 8000de6:	eba1 0109 	sub.w	r1, r1, r9
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fb09 f804 	mul.w	r8, r9, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	b292      	uxth	r2, r2
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	4542      	cmp	r2, r8
 8000dfe:	d229      	bcs.n	8000e54 <__udivmoddi4+0x2e4>
 8000e00:	18ba      	adds	r2, r7, r2
 8000e02:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e06:	d2c4      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e08:	4542      	cmp	r2, r8
 8000e0a:	d2c2      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e0c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e10:	443a      	add	r2, r7
 8000e12:	e7be      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e14:	45f0      	cmp	r8, lr
 8000e16:	d29d      	bcs.n	8000d54 <__udivmoddi4+0x1e4>
 8000e18:	ebbe 0302 	subs.w	r3, lr, r2
 8000e1c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e20:	3801      	subs	r0, #1
 8000e22:	46e1      	mov	r9, ip
 8000e24:	e796      	b.n	8000d54 <__udivmoddi4+0x1e4>
 8000e26:	eba7 0909 	sub.w	r9, r7, r9
 8000e2a:	4449      	add	r1, r9
 8000e2c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e30:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e34:	fb09 f804 	mul.w	r8, r9, r4
 8000e38:	e7db      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e3a:	4673      	mov	r3, lr
 8000e3c:	e77f      	b.n	8000d3e <__udivmoddi4+0x1ce>
 8000e3e:	4650      	mov	r0, sl
 8000e40:	e766      	b.n	8000d10 <__udivmoddi4+0x1a0>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e6fd      	b.n	8000c42 <__udivmoddi4+0xd2>
 8000e46:	443b      	add	r3, r7
 8000e48:	3a02      	subs	r2, #2
 8000e4a:	e733      	b.n	8000cb4 <__udivmoddi4+0x144>
 8000e4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	e71c      	b.n	8000c8e <__udivmoddi4+0x11e>
 8000e54:	4649      	mov	r1, r9
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e58:	eba1 0109 	sub.w	r1, r1, r9
 8000e5c:	46c4      	mov	ip, r8
 8000e5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e62:	fb09 f804 	mul.w	r8, r9, r4
 8000e66:	e7c4      	b.n	8000df2 <__udivmoddi4+0x282>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <NoteKit_TickHandler>:
//}

/*
 *
 */
void NoteKit_TickHandler(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000e72:	f000 ffab 	bl	8001dcc <HAL_GetTick>
 8000e76:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < NUM_BUZZERS; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	e0aa      	b.n	8000fd4 <NoteKit_TickHandler+0x168>
        // 演奏中で、かつ終了時刻を過ぎていたら
        if (buzzer[i].is_playing && ((int32_t)(current_time - buzzer[i].end_time_ms) >= 0)) {
 8000e7e:	495a      	ldr	r1, [pc, #360]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 809c 	beq.w	8000fce <NoteKit_TickHandler+0x162>
 8000e96:	4954      	ldr	r1, [pc, #336]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	330c      	adds	r3, #12
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f2c0 808e 	blt.w	8000fce <NoteKit_TickHandler+0x162>
            // 音を止める
            __HAL_TIM_SET_COMPARE(buzzer[i].tim_handle, buzzer[i].tim_channel, 0);
 8000eb2:	494d      	ldr	r1, [pc, #308]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10c      	bne.n	8000ee2 <NoteKit_TickHandler+0x76>
 8000ec8:	4947      	ldr	r1, [pc, #284]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ee0:	e06b      	b.n	8000fba <NoteKit_TickHandler+0x14e>
 8000ee2:	4941      	ldr	r1, [pc, #260]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	3308      	adds	r3, #8
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d10c      	bne.n	8000f12 <NoteKit_TickHandler+0xa6>
 8000ef8:	493b      	ldr	r1, [pc, #236]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	3304      	adds	r3, #4
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f10:	e053      	b.n	8000fba <NoteKit_TickHandler+0x14e>
 8000f12:	4935      	ldr	r1, [pc, #212]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3308      	adds	r3, #8
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d10c      	bne.n	8000f42 <NoteKit_TickHandler+0xd6>
 8000f28:	492f      	ldr	r1, [pc, #188]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f40:	e03b      	b.n	8000fba <NoteKit_TickHandler+0x14e>
 8000f42:	4929      	ldr	r1, [pc, #164]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3308      	adds	r3, #8
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b0c      	cmp	r3, #12
 8000f56:	d10c      	bne.n	8000f72 <NoteKit_TickHandler+0x106>
 8000f58:	4923      	ldr	r1, [pc, #140]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	e023      	b.n	8000fba <NoteKit_TickHandler+0x14e>
 8000f72:	491d      	ldr	r1, [pc, #116]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3308      	adds	r3, #8
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	d10c      	bne.n	8000fa2 <NoteKit_TickHandler+0x136>
 8000f88:	4917      	ldr	r1, [pc, #92]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa0:	e00b      	b.n	8000fba <NoteKit_TickHandler+0x14e>
 8000fa2:	4911      	ldr	r1, [pc, #68]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	65d3      	str	r3, [r2, #92]	@ 0x5c
            // 演奏中フラグを倒す
            buzzer[i].is_playing = false;
 8000fba:	490b      	ldr	r1, [pc, #44]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3310      	adds	r3, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_BUZZERS; i++) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	f77f af51 	ble.w	8000e7e <NoteKit_TickHandler+0x12>
        }
    }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001b8 	.word	0x200001b8

08000fec <to_midi_index>:

/*
 *  音名とオクターブからMIDIノート番号を計算する関数
 */
int to_midi_index(PitchClass pc, int real_octave) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
    // C-1がMIDIノート番号0になるマッピング
    return (real_octave + 1) * 12 + pc;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	461a      	mov	r2, r3
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4413      	add	r3, r2
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <Set_Frequences>:

/*
 *
 */
void Set_Frequences() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0
    // 基準音の定義
    const double A4_FREQUENCY = 440.0;
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <Set_Frequences+0xc0>)
 8001024:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    const int A4_MIDI_NOTE = to_midi_index(PITCH_A, 4); // 69になる
 8001028:	2104      	movs	r1, #4
 800102a:	2009      	movs	r0, #9
 800102c:	f7ff ffde 	bl	8000fec <to_midi_index>
 8001030:	6278      	str	r0, [r7, #36]	@ 0x24

    const double SEMITONE_RATIO = pow(2.0, 1.0 / 12.0);
 8001032:	a327      	add	r3, pc, #156	@ (adr r3, 80010d0 <Set_Frequences+0xb8>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (int i = 0; i < NUM_OCTAVES; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001040:	e03e      	b.n	80010c0 <Set_Frequences+0xa8>

        // `i` (0,1,2,3,4) を実際のオクターブ番号 (3,4,5,6,7) に変換
        int real_octave = i + 2;
 8001042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001044:	3302      	adds	r3, #2
 8001046:	617b      	str	r3, [r7, #20]

        for (int pitch = 0; pitch < PITCH_COUNT; pitch++) {
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
 800104c:	e032      	b.n	80010b4 <Set_Frequences+0x9c>

            // to_midi_indexには変換後の「実際のオクターブ番号」を渡す
            int current_midi_note = to_midi_index((PitchClass)pitch, real_octave);
 800104e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001050:	b2db      	uxtb	r3, r3
 8001052:	6979      	ldr	r1, [r7, #20]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffc9 	bl	8000fec <to_midi_index>
 800105a:	6138      	str	r0, [r7, #16]

            int distance_from_a4 = current_midi_note - A4_MIDI_NOTE;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	60fb      	str	r3, [r7, #12]

            double frequency = A4_FREQUENCY * pow(SEMITONE_RATIO, distance_from_a4);
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fa01 	bl	800046c <__aeabi_i2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	ec43 2b11 	vmov	d1, r2, r3
 8001072:	ed97 0b06 	vldr	d0, [r7, #24]
 8001076:	f004 f875 	bl	8005164 <pow>
 800107a:	ec53 2b10 	vmov	r2, r3, d0
 800107e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001082:	f7ff fa5d 	bl	8000540 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9c7 2300 	strd	r2, r3, [r7]

            // 重要：配列のインデックスには、ループ変数 `i` (0..4) を使う
            frequences[pitch][i] = (float)frequency;
 800108e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001092:	f7ff fd05 	bl	8000aa0 <__aeabi_d2f>
 8001096:	4601      	mov	r1, r0
 8001098:	4810      	ldr	r0, [pc, #64]	@ (80010dc <Set_Frequences+0xc4>)
 800109a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4403      	add	r3, r0
 80010ac:	6019      	str	r1, [r3, #0]
        for (int pitch = 0; pitch < PITCH_COUNT; pitch++) {
 80010ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b0:	3301      	adds	r3, #1
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80010b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b6:	2b0b      	cmp	r3, #11
 80010b8:	ddc9      	ble.n	800104e <Set_Frequences+0x36>
    for (int i = 0; i < NUM_OCTAVES; i++) {
 80010ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010bc:	3301      	adds	r3, #1
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
 80010c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	ddbd      	ble.n	8001042 <Set_Frequences+0x2a>
        }
    }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	@ 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	92d97963 	.word	0x92d97963
 80010d4:	3ff0f38f 	.word	0x3ff0f38f
 80010d8:	407b8000 	.word	0x407b8000
 80010dc:	20000098 	.word	0x20000098

080010e0 <Set_Tempo>:

/*
 *
 */
void Set_Tempo(uint8_t bpm) {
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	BPM = bpm;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <Set_Tempo+0xa4>)
 80010f0:	801a      	strh	r2, [r3, #0]
	float quarter_duration = 60000.0f / BPM;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <Set_Tempo+0xa4>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fe:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001188 <Set_Tempo+0xa8>
 8001102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001106:	edc7 7a03 	vstr	s15, [r7, #12]
	duration_type.whole = quarter_duration * 4;
 800110a:	edd7 7a03 	vldr	s15, [r7, #12]
 800110e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <Set_Tempo+0xac>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
	duration_type.half = quarter_duration * 2;
 800111c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001120:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <Set_Tempo+0xac>)
 8001126:	edc3 7a01 	vstr	s15, [r3, #4]
	duration_type.quarter = quarter_duration;
 800112a:	4a18      	ldr	r2, [pc, #96]	@ (800118c <Set_Tempo+0xac>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6093      	str	r3, [r2, #8]
	duration_type.eighth = quarter_duration / 2;
 8001130:	ed97 7a03 	vldr	s14, [r7, #12]
 8001134:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <Set_Tempo+0xac>)
 800113e:	edc3 7a03 	vstr	s15, [r3, #12]
	duration_type.eighth_triplet = quarter_duration / 3;
 8001142:	ed97 7a03 	vldr	s14, [r7, #12]
 8001146:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800114a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <Set_Tempo+0xac>)
 8001150:	edc3 7a04 	vstr	s15, [r3, #16]
	duration_type.sixteenth = quarter_duration / 4;
 8001154:	ed97 7a03 	vldr	s14, [r7, #12]
 8001158:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <Set_Tempo+0xac>)
 8001162:	edc3 7a05 	vstr	s15, [r3, #20]
	duration_type.thirty_second = quarter_duration / 8;
 8001166:	ed97 7a03 	vldr	s14, [r7, #12]
 800116a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800116e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <Set_Tempo+0xac>)
 8001174:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	20000000 	.word	0x20000000
 8001188:	476a6000 	.word	0x476a6000
 800118c:	20000004 	.word	0x20000004

08001190 <Set_Buzzer>:

/*
 *
 */
void Set_Buzzer(uint8_t buzzer_id, uint8_t tim_clock_MHz, TIM_HandleTypeDef* htim, uint32_t tim_channel) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	460b      	mov	r3, r1
 80011a0:	73bb      	strb	r3, [r7, #14]

	HAL_TIM_PWM_Start(htim, tim_channel);
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f002 fc71 	bl	8003a8c <HAL_TIM_PWM_Start>
	buzzer[buzzer_id].tim_clock_MHz = tim_clock_MHz;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	490f      	ldr	r1, [pc, #60]	@ (80011ec <Set_Buzzer+0x5c>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	7bba      	ldrb	r2, [r7, #14]
 80011ba:	701a      	strb	r2, [r3, #0]
	buzzer[buzzer_id].tim_handle = htim;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	490b      	ldr	r1, [pc, #44]	@ (80011ec <Set_Buzzer+0x5c>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3304      	adds	r3, #4
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	601a      	str	r2, [r3, #0]
	buzzer[buzzer_id].tim_channel = tim_channel;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	4906      	ldr	r1, [pc, #24]	@ (80011ec <Set_Buzzer+0x5c>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3308      	adds	r3, #8
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200001b8 	.word	0x200001b8

080011f0 <PlayNote>:

/*
 *
 */
void PlayNote(uint8_t buzzer_id, uint32_t frequency_hz, float duration)
{
 80011f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f4:	b096      	sub	sp, #88	@ 0x58
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	6339      	str	r1, [r7, #48]	@ 0x30
 80011fc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8001200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    // 周波数が0の場合は、無音（デューティー比0）にしてすぐに関数を抜ける
    if (frequency_hz == 0) {
 8001204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8090 	bne.w	800132c <PlayNote+0x13c>
        __HAL_TIM_SET_COMPARE(buzzer[buzzer_id].tim_handle, buzzer[buzzer_id].tim_channel, 0);
 800120c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001210:	49be      	ldr	r1, [pc, #760]	@ (800150c <PlayNote+0x31c>)
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	3308      	adds	r3, #8
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10d      	bne.n	8001240 <PlayNote+0x50>
 8001224:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001228:	49b8      	ldr	r1, [pc, #736]	@ (800150c <PlayNote+0x31c>)
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 800123e:	e1cb      	b.n	80015d8 <PlayNote+0x3e8>
        __HAL_TIM_SET_COMPARE(buzzer[buzzer_id].tim_handle, buzzer[buzzer_id].tim_channel, 0);
 8001240:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001244:	49b1      	ldr	r1, [pc, #708]	@ (800150c <PlayNote+0x31c>)
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3308      	adds	r3, #8
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b04      	cmp	r3, #4
 8001256:	d10d      	bne.n	8001274 <PlayNote+0x84>
 8001258:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800125c:	49ab      	ldr	r1, [pc, #684]	@ (800150c <PlayNote+0x31c>)
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	3304      	adds	r3, #4
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	6393      	str	r3, [r2, #56]	@ 0x38
        return;
 8001272:	e1b1      	b.n	80015d8 <PlayNote+0x3e8>
        __HAL_TIM_SET_COMPARE(buzzer[buzzer_id].tim_handle, buzzer[buzzer_id].tim_channel, 0);
 8001274:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001278:	49a4      	ldr	r1, [pc, #656]	@ (800150c <PlayNote+0x31c>)
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	3308      	adds	r3, #8
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d10d      	bne.n	80012a8 <PlayNote+0xb8>
 800128c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001290:	499e      	ldr	r1, [pc, #632]	@ (800150c <PlayNote+0x31c>)
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3304      	adds	r3, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
        return;
 80012a6:	e197      	b.n	80015d8 <PlayNote+0x3e8>
        __HAL_TIM_SET_COMPARE(buzzer[buzzer_id].tim_handle, buzzer[buzzer_id].tim_channel, 0);
 80012a8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012ac:	4997      	ldr	r1, [pc, #604]	@ (800150c <PlayNote+0x31c>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	3308      	adds	r3, #8
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d10d      	bne.n	80012dc <PlayNote+0xec>
 80012c0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012c4:	4991      	ldr	r1, [pc, #580]	@ (800150c <PlayNote+0x31c>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3304      	adds	r3, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
        return;
 80012da:	e17d      	b.n	80015d8 <PlayNote+0x3e8>
        __HAL_TIM_SET_COMPARE(buzzer[buzzer_id].tim_handle, buzzer[buzzer_id].tim_channel, 0);
 80012dc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012e0:	498a      	ldr	r1, [pc, #552]	@ (800150c <PlayNote+0x31c>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	3308      	adds	r3, #8
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d10d      	bne.n	8001310 <PlayNote+0x120>
 80012f4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012f8:	4984      	ldr	r1, [pc, #528]	@ (800150c <PlayNote+0x31c>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3304      	adds	r3, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	6593      	str	r3, [r2, #88]	@ 0x58
        return;
 800130e:	e163      	b.n	80015d8 <PlayNote+0x3e8>
        __HAL_TIM_SET_COMPARE(buzzer[buzzer_id].tim_handle, buzzer[buzzer_id].tim_channel, 0);
 8001310:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001314:	497d      	ldr	r1, [pc, #500]	@ (800150c <PlayNote+0x31c>)
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	3304      	adds	r3, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	65d3      	str	r3, [r2, #92]	@ 0x5c
        return;
 800132a:	e155      	b.n	80015d8 <PlayNote+0x3e8>
    }

    // タイマのクロック周波数 (Hz) を計算
    uint64_t timer_freq_hz = (uint64_t)buzzer[buzzer_id].tim_clock_MHz * 1000000;
 800132c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001330:	4976      	ldr	r1, [pc, #472]	@ (800150c <PlayNote+0x31c>)
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2200      	movs	r2, #0
 8001342:	469a      	mov	sl, r3
 8001344:	4693      	mov	fp, r2
 8001346:	4652      	mov	r2, sl
 8001348:	465b      	mov	r3, fp
 800134a:	f04f 0000 	mov.w	r0, #0
 800134e:	f04f 0100 	mov.w	r1, #0
 8001352:	0159      	lsls	r1, r3, #5
 8001354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001358:	0150      	lsls	r0, r2, #5
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ebb2 040a 	subs.w	r4, r2, sl
 8001362:	eb63 050b 	sbc.w	r5, r3, fp
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	026b      	lsls	r3, r5, #9
 8001370:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001374:	0262      	lsls	r2, r4, #9
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	eb14 080a 	adds.w	r8, r4, sl
 800137e:	eb45 090b 	adc.w	r9, r5, fp
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800138e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001392:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001396:	ebb2 0108 	subs.w	r1, r2, r8
 800139a:	6139      	str	r1, [r7, #16]
 800139c:	eb63 0309 	sbc.w	r3, r3, r9
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80013a6:	460b      	mov	r3, r1
 80013a8:	eb13 030a 	adds.w	r3, r3, sl
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4613      	mov	r3, r2
 80013b0:	eb43 030b 	adc.w	r3, r3, fp
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013ba:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48

    uint32_t prescaler = (buzzer[buzzer_id].tim_handle)->Init.Prescaler;
 80013be:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80013c2:	4952      	ldr	r1, [pc, #328]	@ (800150c <PlayNote+0x31c>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3304      	adds	r3, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	647b      	str	r3, [r7, #68]	@ 0x44

    // Counter Period (ARR)の値を計算 (すべて整数演算)
    uint64_t arr_calc = (timer_freq_hz / (prescaler + 1) / frequency_hz) - 1;
 80013d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013d8:	3301      	adds	r3, #1
 80013da:	2200      	movs	r2, #0
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	627a      	str	r2, [r7, #36]	@ 0x24
 80013e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80013e8:	f7ff fbaa 	bl	8000b40 <__aeabi_uldivmod>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f6:	2200      	movs	r2, #0
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	61fa      	str	r2, [r7, #28]
 80013fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001400:	f7ff fb9e 	bl	8000b40 <__aeabi_uldivmod>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	1e51      	subs	r1, r2, #1
 800140a:	6039      	str	r1, [r7, #0]
 800140c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001416:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

    // タイマのARRは16ビット(65535)が上限であることが多いので、チェックする
    if (arr_calc > 65535) {
 800141a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800141e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8001422:	f173 0300 	sbcs.w	r3, r3, #0
 8001426:	d305      	bcc.n	8001434 <PlayNote+0x244>
        arr_calc = 65535; // 上限値に丸める
 8001428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    }
    uint32_t arr_value = (uint32_t)arr_calc;
 8001434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001436:	643b      	str	r3, [r7, #64]	@ 0x40
    __HAL_TIM_SET_AUTORELOAD(buzzer[buzzer_id].tim_handle, arr_value);
 8001438:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800143c:	4933      	ldr	r1, [pc, #204]	@ (800150c <PlayNote+0x31c>)
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	3304      	adds	r3, #4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001452:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001456:	492d      	ldr	r1, [pc, #180]	@ (800150c <PlayNote+0x31c>)
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001468:	60da      	str	r2, [r3, #12]

    // Pulse (CCR)の値を計算 (デューティー比50%)
    uint32_t pulse_value = arr_value / 2;
 800146a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(buzzer[buzzer_id].tim_handle, buzzer[buzzer_id].tim_channel, pulse_value);
 8001470:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001474:	4925      	ldr	r1, [pc, #148]	@ (800150c <PlayNote+0x31c>)
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3308      	adds	r3, #8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10d      	bne.n	80014a4 <PlayNote+0x2b4>
 8001488:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800148c:	491f      	ldr	r1, [pc, #124]	@ (800150c <PlayNote+0x31c>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	3304      	adds	r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a2:	e076      	b.n	8001592 <PlayNote+0x3a2>
 80014a4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014a8:	4918      	ldr	r1, [pc, #96]	@ (800150c <PlayNote+0x31c>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3308      	adds	r3, #8
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d10d      	bne.n	80014d8 <PlayNote+0x2e8>
 80014bc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014c0:	4912      	ldr	r1, [pc, #72]	@ (800150c <PlayNote+0x31c>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3304      	adds	r3, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80014d6:	e05c      	b.n	8001592 <PlayNote+0x3a2>
 80014d8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014dc:	490b      	ldr	r1, [pc, #44]	@ (800150c <PlayNote+0x31c>)
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3308      	adds	r3, #8
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d10f      	bne.n	8001510 <PlayNote+0x320>
 80014f0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014f4:	4905      	ldr	r1, [pc, #20]	@ (800150c <PlayNote+0x31c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3304      	adds	r3, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001508:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800150a:	e042      	b.n	8001592 <PlayNote+0x3a2>
 800150c:	200001b8 	.word	0x200001b8
 8001510:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001514:	4932      	ldr	r1, [pc, #200]	@ (80015e0 <PlayNote+0x3f0>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d10d      	bne.n	8001544 <PlayNote+0x354>
 8001528:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800152c:	492c      	ldr	r1, [pc, #176]	@ (80015e0 <PlayNote+0x3f0>)
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3304      	adds	r3, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	e026      	b.n	8001592 <PlayNote+0x3a2>
 8001544:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001548:	4925      	ldr	r1, [pc, #148]	@ (80015e0 <PlayNote+0x3f0>)
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3308      	adds	r3, #8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b10      	cmp	r3, #16
 800155a:	d10d      	bne.n	8001578 <PlayNote+0x388>
 800155c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001560:	491f      	ldr	r1, [pc, #124]	@ (80015e0 <PlayNote+0x3f0>)
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001574:	6593      	str	r3, [r2, #88]	@ 0x58
 8001576:	e00c      	b.n	8001592 <PlayNote+0x3a2>
 8001578:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800157c:	4918      	ldr	r1, [pc, #96]	@ (80015e0 <PlayNote+0x3f0>)
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3304      	adds	r3, #4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001590:	65d3      	str	r3, [r2, #92]	@ 0x5c

    buzzer[buzzer_id].is_playing = true;
 8001592:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001596:	4912      	ldr	r1, [pc, #72]	@ (80015e0 <PlayNote+0x3f0>)
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3310      	adds	r3, #16
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
    // 「現在の時刻 + 音の長さ」で終了時刻を計算して保存
    buzzer[buzzer_id].end_time_ms = HAL_GetTick() + duration;
 80015a8:	f000 fc10 	bl	8001dcc <HAL_GetTick>
 80015ac:	ee07 0a90 	vmov	s15, r0
 80015b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80015c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c4:	ee17 0a90 	vmov	r0, s15
 80015c8:	4905      	ldr	r1, [pc, #20]	@ (80015e0 <PlayNote+0x3f0>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	330c      	adds	r3, #12
 80015d6:	6018      	str	r0, [r3, #0]
}
 80015d8:	3758      	adds	r7, #88	@ 0x58
 80015da:	46bd      	mov	sp, r7
 80015dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015e0:	200001b8 	.word	0x200001b8

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fb96 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f83a 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f000 fa02 	bl	80019f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015f4:	f000 f9d0 	bl	8001998 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015f8:	f000 f888 	bl	800170c <MX_TIM1_Init>
  MX_TIM3_Init();
 80015fc:	f000 f94a 	bl	8001894 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Set_Frequences();
 8001600:	f7ff fd0a 	bl	8001018 <Set_Frequences>
  Set_Tempo(150);
 8001604:	2096      	movs	r0, #150	@ 0x96
 8001606:	f7ff fd6b 	bl	80010e0 <Set_Tempo>
  Set_Buzzer(0, 8, &htim1, TIM_CHANNEL_1);
 800160a:	2300      	movs	r3, #0
 800160c:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <main+0x74>)
 800160e:	2108      	movs	r1, #8
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fdbd 	bl	8001190 <Set_Buzzer>
  Set_Buzzer(1, 8, &htim1, TIM_CHANNEL_2);
 8001616:	2304      	movs	r3, #4
 8001618:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <main+0x74>)
 800161a:	2108      	movs	r1, #8
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fdb7 	bl	8001190 <Set_Buzzer>
  Set_Buzzer(2, 8, &htim3, TIM_CHANNEL_1);
 8001622:	2300      	movs	r3, #0
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <main+0x78>)
 8001626:	2108      	movs	r1, #8
 8001628:	2002      	movs	r0, #2
 800162a:	f7ff fdb1 	bl	8001190 <Set_Buzzer>
  Set_Buzzer(3, 8, &htim3, TIM_CHANNEL_2);
 800162e:	2304      	movs	r3, #4
 8001630:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <main+0x78>)
 8001632:	2108      	movs	r1, #8
 8001634:	2003      	movs	r0, #3
 8001636:	f7ff fdab 	bl	8001190 <Set_Buzzer>
  Set_Buzzer(4, 8, &htim1, TIM_CHANNEL_3);
 800163a:	2308      	movs	r3, #8
 800163c:	4a06      	ldr	r2, [pc, #24]	@ (8001658 <main+0x74>)
 800163e:	2108      	movs	r1, #8
 8001640:	2004      	movs	r0, #4
 8001642:	f7ff fda5 	bl	8001190 <Set_Buzzer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PlayNote(0, 440, 1000); // 440Hzを1秒間鳴らすテスト
 8001646:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001660 <main+0x7c>
 800164a:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fdce 	bl	80011f0 <PlayNote>
 8001654:	e7f7      	b.n	8001646 <main+0x62>
 8001656:	bf00      	nop
 8001658:	20000230 	.word	0x20000230
 800165c:	2000027c 	.word	0x2000027c
 8001660:	447a0000 	.word	0x447a0000

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b096      	sub	sp, #88	@ 0x58
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800166e:	2228      	movs	r2, #40	@ 0x28
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fd43 	bl	80050fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001698:	2302      	movs	r3, #2
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169c:	2301      	movs	r3, #1
 800169e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a0:	2310      	movs	r3, #16
 80016a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fdf1 	bl	8002294 <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016b8:	f000 f9c2 	bl	8001a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fdea 	bl	80032b0 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016e2:	f000 f9ad 	bl	8001a40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80016e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 ffee 	bl	80036d4 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016fe:	f000 f99f 	bl	8001a40 <Error_Handler>
  }
}
 8001702:	bf00      	nop
 8001704:	3758      	adds	r7, #88	@ 0x58
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b09a      	sub	sp, #104	@ 0x68
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	222c      	movs	r2, #44	@ 0x2c
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fcd9 	bl	80050fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800174c:	4b4f      	ldr	r3, [pc, #316]	@ (800188c <MX_TIM1_Init+0x180>)
 800174e:	4a50      	ldr	r2, [pc, #320]	@ (8001890 <MX_TIM1_Init+0x184>)
 8001750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001752:	4b4e      	ldr	r3, [pc, #312]	@ (800188c <MX_TIM1_Init+0x180>)
 8001754:	2207      	movs	r2, #7
 8001756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <MX_TIM1_Init+0x180>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800175e:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <MX_TIM1_Init+0x180>)
 8001760:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b49      	ldr	r3, [pc, #292]	@ (800188c <MX_TIM1_Init+0x180>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800176c:	4b47      	ldr	r3, [pc, #284]	@ (800188c <MX_TIM1_Init+0x180>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b46      	ldr	r3, [pc, #280]	@ (800188c <MX_TIM1_Init+0x180>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001778:	4844      	ldr	r0, [pc, #272]	@ (800188c <MX_TIM1_Init+0x180>)
 800177a:	f002 f8cf 	bl	800391c <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 f95c 	bl	8001a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001792:	4619      	mov	r1, r3
 8001794:	483d      	ldr	r0, [pc, #244]	@ (800188c <MX_TIM1_Init+0x180>)
 8001796:	f002 fb79 	bl	8003e8c <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017a0:	f000 f94e 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017a4:	4839      	ldr	r0, [pc, #228]	@ (800188c <MX_TIM1_Init+0x180>)
 80017a6:	f002 f910 	bl	80039ca <HAL_TIM_PWM_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017b0:	f000 f946 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017c4:	4619      	mov	r1, r3
 80017c6:	4831      	ldr	r0, [pc, #196]	@ (800188c <MX_TIM1_Init+0x180>)
 80017c8:	f003 f814 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017d2:	f000 f935 	bl	8001a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d6:	2360      	movs	r3, #96	@ 0x60
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	4824      	ldr	r0, [pc, #144]	@ (800188c <MX_TIM1_Init+0x180>)
 80017fc:	f002 fa32 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001806:	f000 f91b 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800180e:	2204      	movs	r2, #4
 8001810:	4619      	mov	r1, r3
 8001812:	481e      	ldr	r0, [pc, #120]	@ (800188c <MX_TIM1_Init+0x180>)
 8001814:	f002 fa26 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800181e:	f000 f90f 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001822:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001826:	2208      	movs	r2, #8
 8001828:	4619      	mov	r1, r3
 800182a:	4818      	ldr	r0, [pc, #96]	@ (800188c <MX_TIM1_Init+0x180>)
 800182c:	f002 fa1a 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001836:	f000 f903 	bl	8001a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800184e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001852:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800185c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	@ (800188c <MX_TIM1_Init+0x180>)
 8001870:	f003 f82e 	bl	80048d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800187a:	f000 f8e1 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800187e:	4803      	ldr	r0, [pc, #12]	@ (800188c <MX_TIM1_Init+0x180>)
 8001880:	f000 f93c 	bl	8001afc <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3768      	adds	r7, #104	@ 0x68
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000230 	.word	0x20000230
 8001890:	40012c00 	.word	0x40012c00

08001894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	@ 0x38
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018c6:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <MX_TIM3_Init+0xfc>)
 80018c8:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <MX_TIM3_Init+0x100>)
 80018ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80018cc:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <MX_TIM3_Init+0xfc>)
 80018ce:	2207      	movs	r2, #7
 80018d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <MX_TIM3_Init+0xfc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <MX_TIM3_Init+0xfc>)
 80018da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <MX_TIM3_Init+0xfc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <MX_TIM3_Init+0xfc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ec:	4828      	ldr	r0, [pc, #160]	@ (8001990 <MX_TIM3_Init+0xfc>)
 80018ee:	f002 f815 	bl	800391c <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018f8:	f000 f8a2 	bl	8001a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001906:	4619      	mov	r1, r3
 8001908:	4821      	ldr	r0, [pc, #132]	@ (8001990 <MX_TIM3_Init+0xfc>)
 800190a:	f002 fabf 	bl	8003e8c <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001914:	f000 f894 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001918:	481d      	ldr	r0, [pc, #116]	@ (8001990 <MX_TIM3_Init+0xfc>)
 800191a:	f002 f856 	bl	80039ca <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001924:	f000 f88c 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4816      	ldr	r0, [pc, #88]	@ (8001990 <MX_TIM3_Init+0xfc>)
 8001938:	f002 ff5c 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001942:	f000 f87d 	bl	8001a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001946:	2360      	movs	r3, #96	@ 0x60
 8001948:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001956:	463b      	mov	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <MX_TIM3_Init+0xfc>)
 800195e:	f002 f981 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001968:	f000 f86a 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	2204      	movs	r2, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	@ (8001990 <MX_TIM3_Init+0xfc>)
 8001974:	f002 f976 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800197e:	f000 f85f 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001982:	4803      	ldr	r0, [pc, #12]	@ (8001990 <MX_TIM3_Init+0xfc>)
 8001984:	f000 f8ba 	bl	8001afc <HAL_TIM_MspPostInit>

}
 8001988:	bf00      	nop
 800198a:	3738      	adds	r7, #56	@ 0x38
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000027c 	.word	0x2000027c
 8001994:	40000400 	.word	0x40000400

08001998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 800199e:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <MX_USART2_UART_Init+0x5c>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019a4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80019a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019dc:	f002 fff0 	bl	80049c0 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019e6:	f000 f82b 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200002c8 	.word	0x200002c8
 80019f4:	40004400 	.word	0x40004400

080019f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_GPIO_Init+0x44>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <MX_GPIO_Init+0x44>)
 8001a04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a08:	6153      	str	r3, [r2, #20]
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_GPIO_Init+0x44>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_GPIO_Init+0x44>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <MX_GPIO_Init+0x44>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	6153      	str	r3, [r2, #20]
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_GPIO_Init+0x44>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <Error_Handler+0x8>

08001a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_MspInit+0x44>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <HAL_MspInit+0x44>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6193      	str	r3, [r2, #24]
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_MspInit+0x44>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_MspInit+0x44>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a08      	ldr	r2, [pc, #32]	@ (8001a90 <HAL_MspInit+0x44>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_MspInit+0x44>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a13      	ldr	r2, [pc, #76]	@ (8001af0 <HAL_TIM_Base_MspInit+0x5c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_TIM_Base_MspInit+0x60>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <HAL_TIM_Base_MspInit+0x60>)
 8001aac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ab0:	6193      	str	r3, [r2, #24]
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <HAL_TIM_Base_MspInit+0x60>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001abe:	e010      	b.n	8001ae2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8001af8 <HAL_TIM_Base_MspInit+0x64>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_TIM_Base_MspInit+0x60>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a09      	ldr	r2, [pc, #36]	@ (8001af4 <HAL_TIM_Base_MspInit+0x60>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <HAL_TIM_Base_MspInit+0x60>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40000400 	.word	0x40000400

08001afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a23      	ldr	r2, [pc, #140]	@ (8001ba8 <HAL_TIM_MspPostInit+0xac>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d11e      	bne.n	8001b5c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_TIM_MspPostInit+0xb0>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <HAL_TIM_MspPostInit+0xb0>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <HAL_TIM_MspPostInit+0xb0>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b36:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b48:	2306      	movs	r3, #6
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b56:	f000 fa2b 	bl	8001fb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b5a:	e021      	b.n	8001ba0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <HAL_TIM_MspPostInit+0xb4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d11c      	bne.n	8001ba0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_TIM_MspPostInit+0xb0>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <HAL_TIM_MspPostInit+0xb0>)
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b70:	6153      	str	r3, [r2, #20]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_TIM_MspPostInit+0xb0>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001b7e:	2350      	movs	r3, #80	@ 0x50
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9c:	f000 fa08 	bl	8001fb0 <HAL_GPIO_Init>
}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40000400 	.word	0x40000400

08001bb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <HAL_UART_MspInit+0x80>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d129      	bne.n	8001c2a <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_UART_MspInit+0x84>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_UART_MspInit+0x84>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_UART_MspInit+0x84>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_UART_MspInit+0x84>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <HAL_UART_MspInit+0x84>)
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf8:	6153      	str	r3, [r2, #20]
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_UART_MspInit+0x84>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001c06:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c26:	f000 f9c3 	bl	8001fb0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	@ 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40004400 	.word	0x40004400
 8001c38:	40021000 	.word	0x40021000

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <NMI_Handler+0x4>

08001c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <MemManage_Handler+0x4>

08001c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c92:	f000 f887 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  NoteKit_TickHandler();
 8001c96:	f7ff f8e9 	bl	8000e6c <NoteKit_TickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cfc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc8:	f7ff ffea 	bl	8001ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	@ (8001d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	@ (8001d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <LoopForever+0xe>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d10 <LoopForever+0x16>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f003 fa13 	bl	800511c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cf6:	f7ff fc75 	bl	80015e4 <main>

08001cfa <LoopForever>:

LoopForever:
    b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cfc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001d08:	080060c8 	.word	0x080060c8
  ldr r2, =_sbss
 8001d0c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001d10:	2000048c 	.word	0x2000048c

08001d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_2_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_Init+0x28>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_Init+0x28>)
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 f90d 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f808 	bl	8001d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fe8a 	bl	8001a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000

08001d44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_InitTick+0x54>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0x58>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f917 	bl	8001f96 <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00e      	b.n	8001d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d80a      	bhi.n	8001d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f000 f8ed 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d84:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_InitTick+0x5c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000020 	.word	0x20000020
 8001d9c:	20000028 	.word	0x20000028
 8001da0:	20000024 	.word	0x20000024

08001da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000028 	.word	0x20000028
 8001dc8:	20000350 	.word	0x20000350

08001dcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;  
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000350 	.word	0x20000350

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff47 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff5c 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffb0 	bl	8001f04 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e14e      	b.n	800225e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8140 	beq.w	8002258 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 809a 	beq.w	8002258 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b55      	ldr	r3, [pc, #340]	@ (800227c <HAL_GPIO_Init+0x2cc>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a54      	ldr	r2, [pc, #336]	@ (800227c <HAL_GPIO_Init+0x2cc>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b52      	ldr	r3, [pc, #328]	@ (800227c <HAL_GPIO_Init+0x2cc>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a50      	ldr	r2, [pc, #320]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002166:	d013      	beq.n	8002190 <HAL_GPIO_Init+0x1e0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a46      	ldr	r2, [pc, #280]	@ (8002284 <HAL_GPIO_Init+0x2d4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_GPIO_Init+0x1dc>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a45      	ldr	r2, [pc, #276]	@ (8002288 <HAL_GPIO_Init+0x2d8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x1d8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a44      	ldr	r2, [pc, #272]	@ (800228c <HAL_GPIO_Init+0x2dc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_GPIO_Init+0x1d4>
 8002180:	2303      	movs	r3, #3
 8002182:	e006      	b.n	8002192 <HAL_GPIO_Init+0x1e2>
 8002184:	2305      	movs	r3, #5
 8002186:	e004      	b.n	8002192 <HAL_GPIO_Init+0x1e2>
 8002188:	2302      	movs	r3, #2
 800218a:	e002      	b.n	8002192 <HAL_GPIO_Init+0x1e2>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_GPIO_Init+0x1e2>
 8002190:	2300      	movs	r3, #0
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	f002 0203 	and.w	r2, r2, #3
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	4093      	lsls	r3, r2
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021a2:	4937      	ldr	r1, [pc, #220]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b0:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021da:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021fe:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002204:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002228:	4a19      	ldr	r2, [pc, #100]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222e:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002252:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <HAL_GPIO_Init+0x2e0>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f47f aea9 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000
 8002284:	48000400 	.word	0x48000400
 8002288:	48000800 	.word	0x48000800
 800228c:	48000c00 	.word	0x48000c00
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800229a:	af00      	add	r7, sp, #0
 800229c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f000 bff4 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 816d 	beq.w	80025aa <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022d0:	4bb4      	ldr	r3, [pc, #720]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d00c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022dc:	4bb1      	ldr	r3, [pc, #708]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x104>
 80022e8:	4bae      	ldr	r3, [pc, #696]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f4:	d150      	bne.n	8002398 <HAL_RCC_OscConfig+0x104>
 80022f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022fa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800230a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b3f      	cmp	r3, #63	@ 0x3f
 8002316:	d802      	bhi.n	800231e <HAL_RCC_OscConfig+0x8a>
 8002318:	4ba2      	ldr	r3, [pc, #648]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0xb6>
 800231e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002322:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002332:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002336:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800233a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002346:	4b97      	ldr	r3, [pc, #604]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800234e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002352:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002356:	fa92 f2a2 	rbit	r2, r2
 800235a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800235e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8114 	beq.w	80025a8 <HAL_RCC_OscConfig+0x314>
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 810b 	bne.w	80025a8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	f000 bf85 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x124>
 80023aa:	4b7e      	ldr	r3, [pc, #504]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e036      	b.n	8002426 <HAL_RCC_OscConfig+0x192>
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x14e>
 80023c8:	4b76      	ldr	r3, [pc, #472]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b73      	ldr	r3, [pc, #460]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a72      	ldr	r2, [pc, #456]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e021      	b.n	8002426 <HAL_RCC_OscConfig+0x192>
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x17a>
 80023f4:	4b6b      	ldr	r3, [pc, #428]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6a      	ldr	r2, [pc, #424]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80023fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b68      	ldr	r3, [pc, #416]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a67      	ldr	r2, [pc, #412]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x192>
 800240e:	4b65      	ldr	r3, [pc, #404]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a64      	ldr	r2, [pc, #400]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b62      	ldr	r3, [pc, #392]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a61      	ldr	r2, [pc, #388]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002420:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002424:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002426:	4b5f      	ldr	r3, [pc, #380]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	f023 020f 	bic.w	r2, r3, #15
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	495a      	ldr	r1, [pc, #360]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 800243c:	4313      	orrs	r3, r2
 800243e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d054      	beq.n	80024fa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fcbc 	bl	8001dcc <HAL_GetTick>
 8002454:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245a:	f7ff fcb7 	bl	8001dcc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	@ 0x64
 8002468:	d902      	bls.n	8002470 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	f000 bf19 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002474:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002484:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002490:	d802      	bhi.n	8002498 <HAL_RCC_OscConfig+0x204>
 8002492:	4b44      	ldr	r3, [pc, #272]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	e015      	b.n	80024c4 <HAL_RCC_OscConfig+0x230>
 8002498:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800249c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80024ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024b0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80024b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80024c0:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024c8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80024cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80024d0:	fa92 f2a2 	rbit	r2, r2
 80024d4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80024d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0b0      	beq.n	800245a <HAL_RCC_OscConfig+0x1c6>
 80024f8:	e057      	b.n	80025aa <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fc67 	bl	8001dcc <HAL_GetTick>
 80024fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff fc62 	bl	8001dcc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	@ 0x64
 8002512:	d902      	bls.n	800251a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	f000 bec4 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
 800251a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800251e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800252e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b3f      	cmp	r3, #63	@ 0x3f
 800253a:	d802      	bhi.n	8002542 <HAL_RCC_OscConfig+0x2ae>
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x2da>
 8002542:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002546:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002556:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800255e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <HAL_RCC_OscConfig+0x310>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002572:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002576:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002582:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1b0      	bne.n	8002504 <HAL_RCC_OscConfig+0x270>
 80025a2:	e002      	b.n	80025aa <HAL_RCC_OscConfig+0x316>
 80025a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 816c 	beq.w	8002898 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025c0:	4bcc      	ldr	r3, [pc, #816]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025cc:	4bc9      	ldr	r3, [pc, #804]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d16d      	bne.n	80026b4 <HAL_RCC_OscConfig+0x420>
 80025d8:	4bc6      	ldr	r3, [pc, #792]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d167      	bne.n	80026b4 <HAL_RCC_OscConfig+0x420>
 80025e4:	2302      	movs	r3, #2
 80025e6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80025f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b3f      	cmp	r3, #63	@ 0x3f
 8002602:	d802      	bhi.n	800260a <HAL_RCC_OscConfig+0x376>
 8002604:	4bbb      	ldr	r3, [pc, #748]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	e013      	b.n	8002632 <HAL_RCC_OscConfig+0x39e>
 800260a:	2302      	movs	r3, #2
 800260c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002622:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800262e:	4bb1      	ldr	r3, [pc, #708]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	2202      	movs	r2, #2
 8002634:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002638:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800263c:	fa92 f2a2 	rbit	r2, r2
 8002640:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002644:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0220 	orr.w	r2, r2, #32
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCC_OscConfig+0x3e6>
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d002      	beq.n	800267a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f000 be14 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b9e      	ldr	r3, [pc, #632]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002686:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	21f8      	movs	r1, #248	@ 0xf8
 8002690:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002698:	fa91 f1a1 	rbit	r1, r1
 800269c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80026a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80026a4:	fab1 f181 	clz	r1, r1
 80026a8:	b2c9      	uxtb	r1, r1
 80026aa:	408b      	lsls	r3, r1
 80026ac:	4991      	ldr	r1, [pc, #580]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e0f1      	b.n	8002898 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8083 	beq.w	80027cc <HAL_RCC_OscConfig+0x538>
 80026c6:	2301      	movs	r3, #1
 80026c8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80026d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	461a      	mov	r2, r3
 80026ee:	2301      	movs	r3, #1
 80026f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7ff fb6b 	bl	8001dcc <HAL_GetTick>
 80026f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff fb66 	bl	8001dcc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d902      	bls.n	8002712 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	f000 bdc8 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002724:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002730:	d802      	bhi.n	8002738 <HAL_RCC_OscConfig+0x4a4>
 8002732:	4b70      	ldr	r3, [pc, #448]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e013      	b.n	8002760 <HAL_RCC_OscConfig+0x4cc>
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800274a:	2302      	movs	r3, #2
 800274c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002750:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800275c:	4b65      	ldr	r3, [pc, #404]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	2202      	movs	r2, #2
 8002762:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002766:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002772:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f002 021f 	and.w	r2, r2, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0b4      	beq.n	80026fc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	21f8      	movs	r1, #248	@ 0xf8
 80027a8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80027b0:	fa91 f1a1 	rbit	r1, r1
 80027b4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80027b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80027bc:	fab1 f181 	clz	r1, r1
 80027c0:	b2c9      	uxtb	r1, r1
 80027c2:	408b      	lsls	r3, r1
 80027c4:	494b      	ldr	r1, [pc, #300]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
 80027ca:	e065      	b.n	8002898 <HAL_RCC_OscConfig+0x604>
 80027cc:	2301      	movs	r3, #1
 80027ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80027de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fae8 	bl	8001dcc <HAL_GetTick>
 80027fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7ff fae3 	bl	8001dcc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	f000 bd45 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800282a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b3f      	cmp	r3, #63	@ 0x3f
 8002836:	d802      	bhi.n	800283e <HAL_RCC_OscConfig+0x5aa>
 8002838:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	e013      	b.n	8002866 <HAL_RCC_OscConfig+0x5d2>
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002856:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <HAL_RCC_OscConfig+0x660>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	2202      	movs	r2, #2
 8002868:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800286c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002870:	fa92 f2a2 	rbit	r2, r2
 8002874:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002878:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800287c:	fab2 f282 	clz	r2, r2
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f042 0220 	orr.w	r2, r2, #32
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f002 021f 	and.w	r2, r2, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1b4      	bne.n	8002802 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8115 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d07e      	beq.n	80029bc <HAL_RCC_OscConfig+0x728>
 80028be:	2301      	movs	r3, #1
 80028c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80028d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x664>)
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	461a      	mov	r2, r3
 80028e4:	2301      	movs	r3, #1
 80028e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7ff fa70 	bl	8001dcc <HAL_GetTick>
 80028ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f0:	e00f      	b.n	8002912 <HAL_RCC_OscConfig+0x67e>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fc:	f7ff fa66 	bl	8001dcc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d902      	bls.n	8002912 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	f000 bcc8 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002912:	2302      	movs	r3, #2
 8002914:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800292c:	2202      	movs	r2, #2
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002934:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002950:	2202      	movs	r2, #2
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800296a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296c:	4bb0      	ldr	r3, [pc, #704]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 800296e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002978:	2102      	movs	r1, #2
 800297a:	6019      	str	r1, [r3, #0]
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f1a3 	rbit	r1, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002992:	6019      	str	r1, [r3, #0]
  return result;
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0a0      	beq.n	80028fc <HAL_RCC_OscConfig+0x668>
 80029ba:	e08d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x844>
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	fa93 f2a3 	rbit	r2, r3
 80029d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029de:	601a      	str	r2, [r3, #0]
  return result;
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b90      	ldr	r3, [pc, #576]	@ (8002c34 <HAL_RCC_OscConfig+0x9a0>)
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	461a      	mov	r2, r3
 80029fa:	2300      	movs	r3, #0
 80029fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7ff f9e5 	bl	8001dcc <HAL_GetTick>
 8002a02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7ff f9e0 	bl	8001dcc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d902      	bls.n	8002a1e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	f000 bc42 	b.w	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a26:	2202      	movs	r2, #2
 8002a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fa93 f2a3 	rbit	r2, r3
 8002a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a46:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fa93 f2a3 	rbit	r2, r3
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a6e:	2202      	movs	r2, #2
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	fa93 f2a3 	rbit	r2, r3
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8a:	4b69      	ldr	r3, [pc, #420]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a96:	2102      	movs	r1, #2
 8002a98:	6019      	str	r1, [r3, #0]
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f1a3 	rbit	r1, r3
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ab0:	6019      	str	r1, [r3, #0]
  return result;
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d197      	bne.n	8002a08 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002adc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 819e 	beq.w	8002e2a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af4:	4b4e      	ldr	r3, [pc, #312]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d116      	bne.n	8002b2e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b4b      	ldr	r3, [pc, #300]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a4a      	ldr	r2, [pc, #296]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	61d3      	str	r3, [r2, #28]
 8002b0c:	4b48      	ldr	r3, [pc, #288]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b22:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b42      	ldr	r3, [pc, #264]	@ (8002c38 <HAL_RCC_OscConfig+0x9a4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11a      	bne.n	8002b70 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c38 <HAL_RCC_OscConfig+0x9a4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c38 <HAL_RCC_OscConfig+0x9a4>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7ff f941 	bl	8001dcc <HAL_GetTick>
 8002b4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	e009      	b.n	8002b64 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7ff f93c 	bl	8001dcc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b64      	cmp	r3, #100	@ 0x64
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e39e      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <HAL_RCC_OscConfig+0x9a4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ef      	beq.n	8002b50 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x8fa>
 8002b80:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a2a      	ldr	r2, [pc, #168]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	e035      	b.n	8002bfa <HAL_RCC_OscConfig+0x966>
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x924>
 8002b9e:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a20      	ldr	r2, [pc, #128]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	e020      	b.n	8002bfa <HAL_RCC_OscConfig+0x966>
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d10c      	bne.n	8002be2 <HAL_RCC_OscConfig+0x94e>
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6213      	str	r3, [r2, #32]
 8002be0:	e00b      	b.n	8002bfa <HAL_RCC_OscConfig+0x966>
 8002be2:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8002c30 <HAL_RCC_OscConfig+0x99c>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8087 	beq.w	8002d1a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7ff f8de 	bl	8001dcc <HAL_GetTick>
 8002c10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	e012      	b.n	8002c3c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7ff f8d9 	bl	8001dcc <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d908      	bls.n	8002c3c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e339      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	10908120 	.word	0x10908120
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c40:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c44:	2202      	movs	r2, #2
 8002c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	fa93 f2a3 	rbit	r2, r3
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c82:	601a      	str	r2, [r3, #0]
  return result;
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xa10>
 8002c9e:	4b98      	ldr	r3, [pc, #608]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0xa38>
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cac:	2202      	movs	r2, #2
 8002cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	6011      	str	r1, [r2, #0]
 8002cd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cdc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	fa92 f1a2 	rbit	r1, r2
 8002ce6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cea:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cee:	6011      	str	r1, [r2, #0]
  return result;
 8002cf0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	fab2 f282 	clz	r2, r2
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f002 021f 	and.w	r2, r2, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f43f af7f 	beq.w	8002c16 <HAL_RCC_OscConfig+0x982>
 8002d18:	e07d      	b.n	8002e16 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f857 	bl	8001dcc <HAL_GetTick>
 8002d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7ff f852 	bl	8001dcc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e2b2      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d40:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d44:	2202      	movs	r2, #2
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d64:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d68:	2202      	movs	r2, #2
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d82:	601a      	str	r2, [r3, #0]
  return result;
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0xb10>
 8002d9e:	4b58      	ldr	r3, [pc, #352]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0xb38>
 8002da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dac:	2202      	movs	r2, #2
 8002dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fa93 f2a3 	rbit	r2, r3
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dd0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	6011      	str	r1, [r2, #0]
 8002dd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ddc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	fa92 f1a2 	rbit	r1, r2
 8002de6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002dee:	6011      	str	r1, [r2, #0]
  return result;
 8002df0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f002 021f 	and.w	r2, r2, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d186      	bne.n	8002d24 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e16:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d105      	bne.n	8002e2a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1e:	4b38      	ldr	r3, [pc, #224]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4a37      	ldr	r2, [pc, #220]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8232 	beq.w	80032a0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3c:	4b30      	ldr	r3, [pc, #192]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	f000 8201 	beq.w	800324c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	f040 8157 	bne.w	800310a <HAL_RCC_OscConfig+0xe76>
 8002e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e60:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e80:	601a      	str	r2, [r3, #0]
  return result;
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e8a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe ff93 	bl	8001dcc <HAL_GetTick>
 8002ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe ff8e 	bl	8001dcc <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1f0      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
 8002ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ee4:	601a      	str	r2, [r3, #0]
  return result;
 8002ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002eee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ef8:	d804      	bhi.n	8002f04 <HAL_RCC_OscConfig+0xc70>
 8002efa:	4b01      	ldr	r3, [pc, #4]	@ (8002f00 <HAL_RCC_OscConfig+0xc6c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e029      	b.n	8002f54 <HAL_RCC_OscConfig+0xcc0>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f16:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	4bc3      	ldr	r3, [pc, #780]	@ (8003260 <HAL_RCC_OscConfig+0xfcc>)
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f58:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f5c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f60:	6011      	str	r1, [r2, #0]
 8002f62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f66:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fa92 f1a2 	rbit	r1, r2
 8002f70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f74:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f78:	6011      	str	r1, [r2, #0]
  return result;
 8002f7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f042 0220 	orr.w	r2, r2, #32
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f002 021f 	and.w	r2, r2, #31
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d185      	bne.n	8002eac <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	4baf      	ldr	r3, [pc, #700]	@ (8003260 <HAL_RCC_OscConfig+0xfcc>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	49a7      	ldr	r1, [pc, #668]	@ (8003260 <HAL_RCC_OscConfig+0xfcc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fec:	601a      	str	r2, [r3, #0]
  return result;
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ff6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003002:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	461a      	mov	r2, r3
 800300a:	2301      	movs	r3, #1
 800300c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fedd 	bl	8001dcc <HAL_GetTick>
 8003012:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003016:	e009      	b.n	800302c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fed8 	bl	8001dcc <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e13a      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
 800302c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003030:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003034:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	fa93 f2a3 	rbit	r2, r3
 8003048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003050:	601a      	str	r2, [r3, #0]
  return result;
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800305a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b3f      	cmp	r3, #63	@ 0x3f
 8003064:	d802      	bhi.n	800306c <HAL_RCC_OscConfig+0xdd8>
 8003066:	4b7e      	ldr	r3, [pc, #504]	@ (8003260 <HAL_RCC_OscConfig+0xfcc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	e027      	b.n	80030bc <HAL_RCC_OscConfig+0xe28>
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003074:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003096:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800309a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	4b69      	ldr	r3, [pc, #420]	@ (8003260 <HAL_RCC_OscConfig+0xfcc>)
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030c8:	6011      	str	r1, [r2, #0]
 80030ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	fa92 f1a2 	rbit	r1, r2
 80030d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030dc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030e0:	6011      	str	r1, [r2, #0]
  return result;
 80030e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030e6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	fab2 f282 	clz	r2, r2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f042 0220 	orr.w	r2, r2, #32
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	f002 021f 	and.w	r2, r2, #31
 80030fc:	2101      	movs	r1, #1
 80030fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d087      	beq.n	8003018 <HAL_RCC_OscConfig+0xd84>
 8003108:	e0ca      	b.n	80032a0 <HAL_RCC_OscConfig+0x100c>
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003112:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800312e:	601a      	str	r2, [r3, #0]
  return result;
 8003130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003134:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003138:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003144:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe fe3c 	bl	8001dcc <HAL_GetTick>
 8003154:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003158:	e009      	b.n	800316e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315a:	f7fe fe37 	bl	8001dcc <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e099      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003176:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800317a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003192:	601a      	str	r2, [r3, #0]
  return result;
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800319c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80031a6:	d802      	bhi.n	80031ae <HAL_RCC_OscConfig+0xf1a>
 80031a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <HAL_RCC_OscConfig+0xfcc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e027      	b.n	80031fe <HAL_RCC_OscConfig+0xf6a>
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fa93 f2a3 	rbit	r2, r3
 80031ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ce:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_RCC_OscConfig+0xfcc>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003202:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003206:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800320a:	6011      	str	r1, [r2, #0]
 800320c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003210:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	fa92 f1a2 	rbit	r1, r2
 800321a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800321e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003222:	6011      	str	r1, [r2, #0]
  return result;
 8003224:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003228:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d187      	bne.n	800315a <HAL_RCC_OscConfig+0xec6>
 800324a:	e029      	b.n	80032a0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d103      	bne.n	8003264 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e020      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
 8003260:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_RCC_OscConfig+0x1018>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800326c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003270:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	429a      	cmp	r2, r3
 8003282:	d10b      	bne.n	800329c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003284:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003288:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800328c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003290:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b09e      	sub	sp, #120	@ 0x78
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e154      	b.n	8003572 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b89      	ldr	r3, [pc, #548]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d910      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b86      	ldr	r3, [pc, #536]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 0207 	bic.w	r2, r3, #7
 80032de:	4984      	ldr	r1, [pc, #528]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b82      	ldr	r3, [pc, #520]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e13c      	b.n	8003572 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b7b      	ldr	r3, [pc, #492]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4978      	ldr	r1, [pc, #480]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80cd 	beq.w	80034be <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d137      	bne.n	800339c <HAL_RCC_ClockConfig+0xec>
 800332c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003330:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800333a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b3f      	cmp	r3, #63	@ 0x3f
 8003344:	d802      	bhi.n	800334c <HAL_RCC_ClockConfig+0x9c>
 8003346:	4b6b      	ldr	r3, [pc, #428]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e00f      	b.n	800336c <HAL_RCC_ClockConfig+0xbc>
 800334c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003350:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	667b      	str	r3, [r7, #100]	@ 0x64
 800335a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800335e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003360:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003368:	4b62      	ldr	r3, [pc, #392]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003370:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003372:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003374:	fa92 f2a2 	rbit	r2, r2
 8003378:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800337a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d171      	bne.n	800347c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0ea      	b.n	8003572 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d137      	bne.n	8003414 <HAL_RCC_ClockConfig+0x164>
 80033a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033a8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80033bc:	d802      	bhi.n	80033c4 <HAL_RCC_ClockConfig+0x114>
 80033be:	4b4d      	ldr	r3, [pc, #308]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_ClockConfig+0x134>
 80033c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80033d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e0:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80033ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80033f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d135      	bne.n	800347c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0ae      	b.n	8003572 <HAL_RCC_ClockConfig+0x2c2>
 8003414:	2302      	movs	r3, #2
 8003416:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b3f      	cmp	r3, #63	@ 0x3f
 800342a:	d802      	bhi.n	8003432 <HAL_RCC_ClockConfig+0x182>
 800342c:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e00d      	b.n	800344e <HAL_RCC_ClockConfig+0x19e>
 8003432:	2302      	movs	r3, #2
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
 800343e:	2302      	movs	r3, #2
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	2202      	movs	r2, #2
 8003450:	61ba      	str	r2, [r7, #24]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	fa92 f2a2 	rbit	r2, r2
 8003458:	617a      	str	r2, [r7, #20]
  return result;
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	fab2 f282 	clz	r2, r2
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f042 0220 	orr.w	r2, r2, #32
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	f002 021f 	and.w	r2, r2, #31
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e07a      	b.n	8003572 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347c:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 0203 	bic.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	491a      	ldr	r1, [pc, #104]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348e:	f7fe fc9d 	bl	8001dcc <HAL_GetTick>
 8003492:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003494:	e00a      	b.n	80034ac <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003496:	f7fe fc99 	bl	8001dcc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e062      	b.n	8003572 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 020c 	and.w	r2, r3, #12
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d1eb      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034be:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d215      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034cc:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 0207 	bic.w	r2, r3, #7
 80034d4:	4906      	ldr	r1, [pc, #24]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d006      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e041      	b.n	8003572 <HAL_RCC_ClockConfig+0x2c2>
 80034ee:	bf00      	nop
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b1d      	ldr	r3, [pc, #116]	@ (800357c <HAL_RCC_ClockConfig+0x2cc>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	491a      	ldr	r1, [pc, #104]	@ (800357c <HAL_RCC_ClockConfig+0x2cc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003522:	4b16      	ldr	r3, [pc, #88]	@ (800357c <HAL_RCC_ClockConfig+0x2cc>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4912      	ldr	r1, [pc, #72]	@ (800357c <HAL_RCC_ClockConfig+0x2cc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003536:	f000 f829 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800353a:	4601      	mov	r1, r0
 800353c:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <HAL_RCC_ClockConfig+0x2cc>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003544:	22f0      	movs	r2, #240	@ 0xf0
 8003546:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	fa92 f2a2 	rbit	r2, r2
 800354e:	60fa      	str	r2, [r7, #12]
  return result;
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	fab2 f282 	clz	r2, r2
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	40d3      	lsrs	r3, r2
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x2d0>)
 800355c:	5cd3      	ldrb	r3, [r2, r3]
 800355e:	fa21 f303 	lsr.w	r3, r1, r3
 8003562:	4a08      	ldr	r2, [pc, #32]	@ (8003584 <HAL_RCC_ClockConfig+0x2d4>)
 8003564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003566:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <HAL_RCC_ClockConfig+0x2d8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fbea 	bl	8001d44 <HAL_InitTick>
  
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3778      	adds	r7, #120	@ 0x78
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	08006040 	.word	0x08006040
 8003584:	20000020 	.word	0x20000020
 8003588:	20000024 	.word	0x20000024

0800358c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x94>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x30>
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x36>
 80035ba:	e026      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035bc:	4b19      	ldr	r3, [pc, #100]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x98>)
 80035be:	613b      	str	r3, [r7, #16]
      break;
 80035c0:	e026      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	0c9b      	lsrs	r3, r3, #18
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80035d0:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x94>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	4a14      	ldr	r2, [pc, #80]	@ (800362c <HAL_RCC_GetSysClockFreq+0xa0>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e004      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	613b      	str	r3, [r7, #16]
      break;
 8003608:	e002      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x98>)
 800360c:	613b      	str	r3, [r7, #16]
      break;
 800360e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003610:	693b      	ldr	r3, [r7, #16]
}
 8003612:	4618      	mov	r0, r3
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	007a1200 	.word	0x007a1200
 8003628:	08006058 	.word	0x08006058
 800362c:	08006068 	.word	0x08006068
 8003630:	003d0900 	.word	0x003d0900

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000020 	.word	0x20000020

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003652:	f7ff ffef 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003656:	4601      	mov	r1, r0
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003660:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003664:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	fa92 f2a2 	rbit	r2, r2
 800366c:	603a      	str	r2, [r7, #0]
  return result;
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	40d3      	lsrs	r3, r2
 8003678:	4a04      	ldr	r2, [pc, #16]	@ (800368c <HAL_RCC_GetPCLK1Freq+0x40>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08006050 	.word	0x08006050

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003696:	f7ff ffcd 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 800369a:	4601      	mov	r1, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80036a4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80036a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	fa92 f2a2 	rbit	r2, r2
 80036b0:	603a      	str	r2, [r7, #0]
  return result;
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	fab2 f282 	clz	r2, r2
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	40d3      	lsrs	r3, r2
 80036bc:	4a04      	ldr	r2, [pc, #16]	@ (80036d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036be:	5cd3      	ldrb	r3, [r2, r3]
 80036c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08006050 	.word	0x08006050

080036d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b092      	sub	sp, #72	@ 0x48
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80cb 	beq.w	800388e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f8:	4b85      	ldr	r3, [pc, #532]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10e      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003704:	4b82      	ldr	r3, [pc, #520]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a81      	ldr	r2, [pc, #516]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370e:	61d3      	str	r3, [r2, #28]
 8003710:	4b7f      	ldr	r3, [pc, #508]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b7c      	ldr	r3, [pc, #496]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d118      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372e:	4b79      	ldr	r3, [pc, #484]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a78      	ldr	r2, [pc, #480]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003738:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373a:	f7fe fb47 	bl	8001dcc <HAL_GetTick>
 800373e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	e008      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003742:	f7fe fb43 	bl	8001dcc <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b64      	cmp	r3, #100	@ 0x64
 800374e:	d901      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0d9      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b6f      	ldr	r3, [pc, #444]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003760:	4b6b      	ldr	r3, [pc, #428]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003768:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800376a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d07b      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003778:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800377a:	429a      	cmp	r2, r3
 800377c:	d074      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800377e:	4b64      	ldr	r3, [pc, #400]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800378c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	461a      	mov	r2, r3
 80037a8:	2301      	movs	r3, #1
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b54      	ldr	r3, [pc, #336]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80037d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d043      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe faf4 	bl	8001dcc <HAL_GetTick>
 80037e4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe faf0 	bl	8001dcc <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e084      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80037fe:	2302      	movs	r3, #2
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
 800380a:	2302      	movs	r3, #2
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	61fb      	str	r3, [r7, #28]
  return result;
 8003816:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003828:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	e007      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800382e:	2302      	movs	r3, #2
 8003830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	4b35      	ldr	r3, [pc, #212]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	2202      	movs	r2, #2
 8003840:	613a      	str	r2, [r7, #16]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	fa92 f2a2 	rbit	r2, r2
 8003848:	60fa      	str	r2, [r7, #12]
  return result;
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0bf      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003868:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4926      	ldr	r1, [pc, #152]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003876:	4313      	orrs	r3, r2
 8003878:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800387a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b23      	ldr	r3, [pc, #140]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a22      	ldr	r2, [pc, #136]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389a:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	491a      	ldr	r1, [pc, #104]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b8:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	f023 0210 	bic.w	r2, r3, #16
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4912      	ldr	r1, [pc, #72]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	490b      	ldr	r1, [pc, #44]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4903      	ldr	r1, [pc, #12]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3748      	adds	r7, #72	@ 0x48
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	40007000 	.word	0x40007000
 8003918:	10908100 	.word	0x10908100

0800391c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e049      	b.n	80039c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe f8a6 	bl	8001a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 fb60 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e049      	b.n	8003a70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f841 	bl	8003a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f000 fb09 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_TIM_PWM_Start+0x24>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e03c      	b.n	8003b2a <HAL_TIM_PWM_Start+0x9e>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d109      	bne.n	8003aca <HAL_TIM_PWM_Start+0x3e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	bf14      	ite	ne
 8003ac2:	2301      	movne	r3, #1
 8003ac4:	2300      	moveq	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	e02f      	b.n	8003b2a <HAL_TIM_PWM_Start+0x9e>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d109      	bne.n	8003ae4 <HAL_TIM_PWM_Start+0x58>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e022      	b.n	8003b2a <HAL_TIM_PWM_Start+0x9e>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d109      	bne.n	8003afe <HAL_TIM_PWM_Start+0x72>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2300      	moveq	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	e015      	b.n	8003b2a <HAL_TIM_PWM_Start+0x9e>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d109      	bne.n	8003b18 <HAL_TIM_PWM_Start+0x8c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e008      	b.n	8003b2a <HAL_TIM_PWM_Start+0x9e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e088      	b.n	8003c44 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Start+0xb6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b40:	e023      	b.n	8003b8a <HAL_TIM_PWM_Start+0xfe>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Start+0xc6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b50:	e01b      	b.n	8003b8a <HAL_TIM_PWM_Start+0xfe>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0xd6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b60:	e013      	b.n	8003b8a <HAL_TIM_PWM_Start+0xfe>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0xe6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b70:	e00b      	b.n	8003b8a <HAL_TIM_PWM_Start+0xfe>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xf6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b80:	e003      	b.n	8003b8a <HAL_TIM_PWM_Start+0xfe>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fe08 	bl	80047a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c4c <HAL_TIM_PWM_Start+0x1c0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x134>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c50 <HAL_TIM_PWM_Start+0x1c4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x134>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a28      	ldr	r2, [pc, #160]	@ (8003c54 <HAL_TIM_PWM_Start+0x1c8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x134>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <HAL_TIM_PWM_Start+0x1cc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIM_PWM_Start+0x138>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_TIM_PWM_Start+0x13a>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1b      	ldr	r2, [pc, #108]	@ (8003c4c <HAL_TIM_PWM_Start+0x1c0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x176>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d009      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x176>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c5c <HAL_TIM_PWM_Start+0x1d0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x176>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a14      	ldr	r2, [pc, #80]	@ (8003c50 <HAL_TIM_PWM_Start+0x1c4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d115      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	4b15      	ldr	r3, [pc, #84]	@ (8003c60 <HAL_TIM_PWM_Start+0x1d4>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d015      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x1b4>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1a:	d011      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	e008      	b.n	8003c40 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e000      	b.n	8003c42 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	00010007 	.word	0x00010007

08003c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0ff      	b.n	8003e82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b14      	cmp	r3, #20
 8003c8e:	f200 80f0 	bhi.w	8003e72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c92:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003e73 	.word	0x08003e73
 8003ca0:	08003e73 	.word	0x08003e73
 8003ca4:	08003e73 	.word	0x08003e73
 8003ca8:	08003d2d 	.word	0x08003d2d
 8003cac:	08003e73 	.word	0x08003e73
 8003cb0:	08003e73 	.word	0x08003e73
 8003cb4:	08003e73 	.word	0x08003e73
 8003cb8:	08003d6f 	.word	0x08003d6f
 8003cbc:	08003e73 	.word	0x08003e73
 8003cc0:	08003e73 	.word	0x08003e73
 8003cc4:	08003e73 	.word	0x08003e73
 8003cc8:	08003daf 	.word	0x08003daf
 8003ccc:	08003e73 	.word	0x08003e73
 8003cd0:	08003e73 	.word	0x08003e73
 8003cd4:	08003e73 	.word	0x08003e73
 8003cd8:	08003df1 	.word	0x08003df1
 8003cdc:	08003e73 	.word	0x08003e73
 8003ce0:	08003e73 	.word	0x08003e73
 8003ce4:	08003e73 	.word	0x08003e73
 8003ce8:	08003e31 	.word	0x08003e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fa18 	bl	8004128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0208 	orr.w	r2, r2, #8
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	619a      	str	r2, [r3, #24]
      break;
 8003d2a:	e0a5      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fa7e 	bl	8004234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e084      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fadd 	bl	8004334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0208 	orr.w	r2, r2, #8
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
      break;
 8003dac:	e064      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fb3b 	bl	8004430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	61da      	str	r2, [r3, #28]
      break;
 8003dee:	e043      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fb7e 	bl	80044f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e2e:	e023      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fbbc 	bl	80045b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e70:	e002      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
      break;
 8003e76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop

08003e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e0b6      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x18a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	d03e      	beq.n	8003f64 <HAL_TIM_ConfigClockSource+0xd8>
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eea:	f200 8087 	bhi.w	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	f000 8086 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x176>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efa:	d87f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003efc:	2b70      	cmp	r3, #112	@ 0x70
 8003efe:	d01a      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xaa>
 8003f00:	2b70      	cmp	r3, #112	@ 0x70
 8003f02:	d87b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003f04:	2b60      	cmp	r3, #96	@ 0x60
 8003f06:	d050      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x11e>
 8003f08:	2b60      	cmp	r3, #96	@ 0x60
 8003f0a:	d877      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003f0c:	2b50      	cmp	r3, #80	@ 0x50
 8003f0e:	d03c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xfe>
 8003f10:	2b50      	cmp	r3, #80	@ 0x50
 8003f12:	d873      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003f14:	2b40      	cmp	r3, #64	@ 0x40
 8003f16:	d058      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x13e>
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d86f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003f1c:	2b30      	cmp	r3, #48	@ 0x30
 8003f1e:	d064      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15e>
 8003f20:	2b30      	cmp	r3, #48	@ 0x30
 8003f22:	d86b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d060      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15e>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d867      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05c      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15e>
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d05a      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15e>
 8003f34:	e062      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	f000 fc0f 	bl	8004768 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]
      break;
 8003f62:	e04f      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	f000 fbf8 	bl	8004768 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f86:	609a      	str	r2, [r3, #8]
      break;
 8003f88:	e03c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f96:	461a      	mov	r2, r3
 8003f98:	f000 fb6c 	bl	8004674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2150      	movs	r1, #80	@ 0x50
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fbc5 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e02c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 fb8b 	bl	80046d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2160      	movs	r1, #96	@ 0x60
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fbb5 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e01c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 fb4c 	bl	8004674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2140      	movs	r1, #64	@ 0x40
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fba5 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e00c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f000 fb9c 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 8003ffa:	e003      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e000      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a38      	ldr	r2, [pc, #224]	@ (8004114 <TIM_Base_SetConfig+0xf4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <TIM_Base_SetConfig+0x28>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0x28>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <TIM_Base_SetConfig+0xf8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d108      	bne.n	800405a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2d      	ldr	r2, [pc, #180]	@ (8004114 <TIM_Base_SetConfig+0xf4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <TIM_Base_SetConfig+0x6a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004068:	d00f      	beq.n	800408a <TIM_Base_SetConfig+0x6a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <TIM_Base_SetConfig+0xf8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0x6a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a29      	ldr	r2, [pc, #164]	@ (800411c <TIM_Base_SetConfig+0xfc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0x6a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a28      	ldr	r2, [pc, #160]	@ (8004120 <TIM_Base_SetConfig+0x100>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0x6a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a27      	ldr	r2, [pc, #156]	@ (8004124 <TIM_Base_SetConfig+0x104>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a14      	ldr	r2, [pc, #80]	@ (8004114 <TIM_Base_SetConfig+0xf4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0xc0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a14      	ldr	r2, [pc, #80]	@ (800411c <TIM_Base_SetConfig+0xfc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0xc0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <TIM_Base_SetConfig+0x100>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0xc0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a12      	ldr	r2, [pc, #72]	@ (8004124 <TIM_Base_SetConfig+0x104>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]
  }
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 0201 	bic.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0302 	bic.w	r3, r3, #2
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <TIM_OC1_SetConfig+0xfc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00b      	beq.n	80041a0 <TIM_OC1_SetConfig+0x78>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a27      	ldr	r2, [pc, #156]	@ (8004228 <TIM_OC1_SetConfig+0x100>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d007      	beq.n	80041a0 <TIM_OC1_SetConfig+0x78>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a26      	ldr	r2, [pc, #152]	@ (800422c <TIM_OC1_SetConfig+0x104>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC1_SetConfig+0x78>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a25      	ldr	r2, [pc, #148]	@ (8004230 <TIM_OC1_SetConfig+0x108>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10c      	bne.n	80041ba <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0308 	bic.w	r3, r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a19      	ldr	r2, [pc, #100]	@ (8004224 <TIM_OC1_SetConfig+0xfc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_OC1_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a18      	ldr	r2, [pc, #96]	@ (8004228 <TIM_OC1_SetConfig+0x100>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_OC1_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a17      	ldr	r2, [pc, #92]	@ (800422c <TIM_OC1_SetConfig+0x104>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_OC1_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a16      	ldr	r2, [pc, #88]	@ (8004230 <TIM_OC1_SetConfig+0x108>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d111      	bne.n	80041fe <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f023 0210 	bic.w	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800426e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0320 	bic.w	r3, r3, #32
 8004282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a24      	ldr	r2, [pc, #144]	@ (8004324 <TIM_OC2_SetConfig+0xf0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10d      	bne.n	80042b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800429e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <TIM_OC2_SetConfig+0xf0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_OC2_SetConfig+0xa0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1a      	ldr	r2, [pc, #104]	@ (8004328 <TIM_OC2_SetConfig+0xf4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_OC2_SetConfig+0xa0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a19      	ldr	r2, [pc, #100]	@ (800432c <TIM_OC2_SetConfig+0xf8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC2_SetConfig+0xa0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a18      	ldr	r2, [pc, #96]	@ (8004330 <TIM_OC2_SetConfig+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d113      	bne.n	80042fc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042da:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042e2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a23      	ldr	r2, [pc, #140]	@ (8004420 <TIM_OC3_SetConfig+0xec>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10d      	bne.n	80043b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800439c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043b0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004420 <TIM_OC3_SetConfig+0xec>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_OC3_SetConfig+0x9e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a19      	ldr	r2, [pc, #100]	@ (8004424 <TIM_OC3_SetConfig+0xf0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <TIM_OC3_SetConfig+0x9e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a18      	ldr	r2, [pc, #96]	@ (8004428 <TIM_OC3_SetConfig+0xf4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_OC3_SetConfig+0x9e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a17      	ldr	r2, [pc, #92]	@ (800442c <TIM_OC3_SetConfig+0xf8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d113      	bne.n	80043fa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	621a      	str	r2, [r3, #32]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800

08004430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800447e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <TIM_OC4_SetConfig+0xb8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_OC4_SetConfig+0x7c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a15      	ldr	r2, [pc, #84]	@ (80044ec <TIM_OC4_SetConfig+0xbc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d007      	beq.n	80044ac <TIM_OC4_SetConfig+0x7c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a14      	ldr	r2, [pc, #80]	@ (80044f0 <TIM_OC4_SetConfig+0xc0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_OC4_SetConfig+0x7c>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a13      	ldr	r2, [pc, #76]	@ (80044f4 <TIM_OC4_SetConfig+0xc4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d109      	bne.n	80044c0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800453c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a15      	ldr	r2, [pc, #84]	@ (80045a4 <TIM_OC5_SetConfig+0xac>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_OC5_SetConfig+0x72>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a14      	ldr	r2, [pc, #80]	@ (80045a8 <TIM_OC5_SetConfig+0xb0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_OC5_SetConfig+0x72>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a13      	ldr	r2, [pc, #76]	@ (80045ac <TIM_OC5_SetConfig+0xb4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_OC5_SetConfig+0x72>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a12      	ldr	r2, [pc, #72]	@ (80045b0 <TIM_OC5_SetConfig+0xb8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d109      	bne.n	800457e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	621a      	str	r2, [r3, #32]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800

080045b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	051b      	lsls	r3, r3, #20
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a16      	ldr	r2, [pc, #88]	@ (8004664 <TIM_OC6_SetConfig+0xb0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <TIM_OC6_SetConfig+0x74>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a15      	ldr	r2, [pc, #84]	@ (8004668 <TIM_OC6_SetConfig+0xb4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_OC6_SetConfig+0x74>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a14      	ldr	r2, [pc, #80]	@ (800466c <TIM_OC6_SetConfig+0xb8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_OC6_SetConfig+0x74>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <TIM_OC6_SetConfig+0xbc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d109      	bne.n	800463c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800462e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	029b      	lsls	r3, r3, #10
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40012c00 	.word	0x40012c00
 8004668:	40014000 	.word	0x40014000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800

08004674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800469e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 030a 	bic.w	r3, r3, #10
 80046b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 0210 	bic.w	r2, r3, #16
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	031b      	lsls	r3, r3, #12
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800470e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	f043 0307 	orr.w	r3, r3, #7
 8004754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	021a      	lsls	r2, r3, #8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	431a      	orrs	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2201      	movs	r2, #1
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	401a      	ands	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	431a      	orrs	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e054      	b.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a24      	ldr	r2, [pc, #144]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800483c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a17      	ldr	r2, [pc, #92]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004874:	d009      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a11      	ldr	r2, [pc, #68]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10c      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4313      	orrs	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40014000 	.word	0x40014000

080048d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e060      	b.n	80049ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a14      	ldr	r2, [pc, #80]	@ (80049bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d115      	bne.n	800499c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	051b      	lsls	r3, r3, #20
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40012c00 	.word	0x40012c00

080049c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e040      	b.n	8004a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd f8e6 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2224      	movs	r2, #36	@ 0x24
 80049ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f95e 	bl	8004cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f825 	bl	8004a5c <UART_SetConfig>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e01b      	b.n	8004a54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9dd 	bl	8004e0c <UART_CheckIdleState>
 8004a52:	4603      	mov	r3, r0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8a      	ldr	r3, [pc, #552]	@ (8004cb0 <UART_SetConfig+0x254>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	6979      	ldr	r1, [r7, #20]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a78      	ldr	r2, [pc, #480]	@ (8004cb4 <UART_SetConfig+0x258>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d120      	bne.n	8004b1a <UART_SetConfig+0xbe>
 8004ad8:	4b77      	ldr	r3, [pc, #476]	@ (8004cb8 <UART_SetConfig+0x25c>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d817      	bhi.n	8004b14 <UART_SetConfig+0xb8>
 8004ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <UART_SetConfig+0x90>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b09 	.word	0x08004b09
 8004af4:	08004b0f 	.word	0x08004b0f
 8004af8:	08004b03 	.word	0x08004b03
 8004afc:	2300      	movs	r3, #0
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e01d      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b02:	2302      	movs	r3, #2
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e01a      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e017      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e014      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b14:	2310      	movs	r3, #16
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e011      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a67      	ldr	r2, [pc, #412]	@ (8004cbc <UART_SetConfig+0x260>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d102      	bne.n	8004b2a <UART_SetConfig+0xce>
 8004b24:	2300      	movs	r3, #0
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a64      	ldr	r2, [pc, #400]	@ (8004cc0 <UART_SetConfig+0x264>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d102      	bne.n	8004b3a <UART_SetConfig+0xde>
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e001      	b.n	8004b3e <UART_SetConfig+0xe2>
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b46:	d15a      	bne.n	8004bfe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004b48:	7ffb      	ldrb	r3, [r7, #31]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d827      	bhi.n	8004b9e <UART_SetConfig+0x142>
 8004b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <UART_SetConfig+0xf8>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b8f 	.word	0x08004b8f
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b78:	f7fe fd68 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004b7c:	61b8      	str	r0, [r7, #24]
        break;
 8004b7e:	e013      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fd86 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 8004b84:	61b8      	str	r0, [r7, #24]
        break;
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b4e      	ldr	r3, [pc, #312]	@ (8004cc4 <UART_SetConfig+0x268>)
 8004b8a:	61bb      	str	r3, [r7, #24]
        break;
 8004b8c:	e00c      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7fe fcfd 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8004b92:	61b8      	str	r0, [r7, #24]
        break;
 8004b94:	e008      	b.n	8004ba8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b9a:	61bb      	str	r3, [r7, #24]
        break;
 8004b9c:	e004      	b.n	8004ba8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ba6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d074      	beq.n	8004c98 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	005a      	lsls	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d916      	bls.n	8004bf8 <UART_SetConfig+0x19c>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd0:	d212      	bcs.n	8004bf8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f023 030f 	bic.w	r3, r3, #15
 8004bda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	89fa      	ldrh	r2, [r7, #14]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	e04f      	b.n	8004c98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77bb      	strb	r3, [r7, #30]
 8004bfc:	e04c      	b.n	8004c98 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d828      	bhi.n	8004c56 <UART_SetConfig+0x1fa>
 8004c04:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <UART_SetConfig+0x1b0>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fe fd0c 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004c34:	61b8      	str	r0, [r7, #24]
        break;
 8004c36:	e013      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7fe fd2a 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 8004c3c:	61b8      	str	r0, [r7, #24]
        break;
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <UART_SetConfig+0x268>)
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e00c      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fe fca1 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8004c4a:	61b8      	str	r0, [r7, #24]
        break;
 8004c4c:	e008      	b.n	8004c60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c52:	61bb      	str	r3, [r7, #24]
        break;
 8004c54:	e004      	b.n	8004c60 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d018      	beq.n	8004c98 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085a      	lsrs	r2, r3, #1
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d909      	bls.n	8004c94 <UART_SetConfig+0x238>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c86:	d205      	bcs.n	8004c94 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	e001      	b.n	8004c98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ca4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	efff69f3 	.word	0xefff69f3
 8004cb4:	40013800 	.word	0x40013800
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40004400 	.word	0x40004400
 8004cc0:	40004800 	.word	0x40004800
 8004cc4:	007a1200 	.word	0x007a1200

08004cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01a      	beq.n	8004dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dc6:	d10a      	bne.n	8004dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b098      	sub	sp, #96	@ 0x60
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e1c:	f7fc ffd6 	bl	8001dcc <HAL_GetTick>
 8004e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d12e      	bne.n	8004e8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f88c 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d021      	beq.n	8004e8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e062      	b.n	8004f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d149      	bne.n	8004f30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f856 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03c      	beq.n	8004f30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f08:	61fa      	str	r2, [r7, #28]
 8004f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	617b      	str	r3, [r7, #20]
   return(result);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e011      	b.n	8004f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3758      	adds	r7, #88	@ 0x58
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	e04f      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d04b      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f76:	f7fc ff29 	bl	8001dcc <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e04e      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d037      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b80      	cmp	r3, #128	@ 0x80
 8004fa2:	d034      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d031      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d110      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f838 	bl	8005036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e029      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe8:	d111      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f81e 	bl	8005036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e00f      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4013      	ands	r3, r2
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	bf0c      	ite	eq
 800501e:	2301      	moveq	r3, #1
 8005020:	2300      	movne	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	429a      	cmp	r2, r3
 800502a:	d0a0      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005036:	b480      	push	{r7}
 8005038:	b095      	sub	sp, #84	@ 0x54
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800505c:	643b      	str	r3, [r7, #64]	@ 0x40
 800505e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d118      	bne.n	80050de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f023 0310 	bic.w	r3, r3, #16
 80050c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	613b      	str	r3, [r7, #16]
   return(result);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e6      	bne.n	80050ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050f2:	bf00      	nop
 80050f4:	3754      	adds	r7, #84	@ 0x54
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <memset>:
 80050fe:	4402      	add	r2, r0
 8005100:	4603      	mov	r3, r0
 8005102:	4293      	cmp	r3, r2
 8005104:	d100      	bne.n	8005108 <memset+0xa>
 8005106:	4770      	bx	lr
 8005108:	f803 1b01 	strb.w	r1, [r3], #1
 800510c:	e7f9      	b.n	8005102 <memset+0x4>
	...

08005110 <__errno>:
 8005110:	4b01      	ldr	r3, [pc, #4]	@ (8005118 <__errno+0x8>)
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000002c 	.word	0x2000002c

0800511c <__libc_init_array>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4d0d      	ldr	r5, [pc, #52]	@ (8005154 <__libc_init_array+0x38>)
 8005120:	4c0d      	ldr	r4, [pc, #52]	@ (8005158 <__libc_init_array+0x3c>)
 8005122:	1b64      	subs	r4, r4, r5
 8005124:	10a4      	asrs	r4, r4, #2
 8005126:	2600      	movs	r6, #0
 8005128:	42a6      	cmp	r6, r4
 800512a:	d109      	bne.n	8005140 <__libc_init_array+0x24>
 800512c:	4d0b      	ldr	r5, [pc, #44]	@ (800515c <__libc_init_array+0x40>)
 800512e:	4c0c      	ldr	r4, [pc, #48]	@ (8005160 <__libc_init_array+0x44>)
 8005130:	f000 ff78 	bl	8006024 <_init>
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	2600      	movs	r6, #0
 800513a:	42a6      	cmp	r6, r4
 800513c:	d105      	bne.n	800514a <__libc_init_array+0x2e>
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f855 3b04 	ldr.w	r3, [r5], #4
 8005144:	4798      	blx	r3
 8005146:	3601      	adds	r6, #1
 8005148:	e7ee      	b.n	8005128 <__libc_init_array+0xc>
 800514a:	f855 3b04 	ldr.w	r3, [r5], #4
 800514e:	4798      	blx	r3
 8005150:	3601      	adds	r6, #1
 8005152:	e7f2      	b.n	800513a <__libc_init_array+0x1e>
 8005154:	080060c0 	.word	0x080060c0
 8005158:	080060c0 	.word	0x080060c0
 800515c:	080060c0 	.word	0x080060c0
 8005160:	080060c4 	.word	0x080060c4

08005164 <pow>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	ed2d 8b02 	vpush	{d8}
 800516a:	eeb0 8a40 	vmov.f32	s16, s0
 800516e:	eef0 8a60 	vmov.f32	s17, s1
 8005172:	ec55 4b11 	vmov	r4, r5, d1
 8005176:	f000 f873 	bl	8005260 <__ieee754_pow>
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	4620      	mov	r0, r4
 8005180:	4629      	mov	r1, r5
 8005182:	ec57 6b10 	vmov	r6, r7, d0
 8005186:	f7fb fc75 	bl	8000a74 <__aeabi_dcmpun>
 800518a:	2800      	cmp	r0, #0
 800518c:	d13b      	bne.n	8005206 <pow+0xa2>
 800518e:	ec51 0b18 	vmov	r0, r1, d8
 8005192:	2200      	movs	r2, #0
 8005194:	2300      	movs	r3, #0
 8005196:	f7fb fc3b 	bl	8000a10 <__aeabi_dcmpeq>
 800519a:	b1b8      	cbz	r0, 80051cc <pow+0x68>
 800519c:	2200      	movs	r2, #0
 800519e:	2300      	movs	r3, #0
 80051a0:	4620      	mov	r0, r4
 80051a2:	4629      	mov	r1, r5
 80051a4:	f7fb fc34 	bl	8000a10 <__aeabi_dcmpeq>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d146      	bne.n	800523a <pow+0xd6>
 80051ac:	ec45 4b10 	vmov	d0, r4, r5
 80051b0:	f000 f848 	bl	8005244 <finite>
 80051b4:	b338      	cbz	r0, 8005206 <pow+0xa2>
 80051b6:	2200      	movs	r2, #0
 80051b8:	2300      	movs	r3, #0
 80051ba:	4620      	mov	r0, r4
 80051bc:	4629      	mov	r1, r5
 80051be:	f7fb fc31 	bl	8000a24 <__aeabi_dcmplt>
 80051c2:	b300      	cbz	r0, 8005206 <pow+0xa2>
 80051c4:	f7ff ffa4 	bl	8005110 <__errno>
 80051c8:	2322      	movs	r3, #34	@ 0x22
 80051ca:	e01b      	b.n	8005204 <pow+0xa0>
 80051cc:	ec47 6b10 	vmov	d0, r6, r7
 80051d0:	f000 f838 	bl	8005244 <finite>
 80051d4:	b9e0      	cbnz	r0, 8005210 <pow+0xac>
 80051d6:	eeb0 0a48 	vmov.f32	s0, s16
 80051da:	eef0 0a68 	vmov.f32	s1, s17
 80051de:	f000 f831 	bl	8005244 <finite>
 80051e2:	b1a8      	cbz	r0, 8005210 <pow+0xac>
 80051e4:	ec45 4b10 	vmov	d0, r4, r5
 80051e8:	f000 f82c 	bl	8005244 <finite>
 80051ec:	b180      	cbz	r0, 8005210 <pow+0xac>
 80051ee:	4632      	mov	r2, r6
 80051f0:	463b      	mov	r3, r7
 80051f2:	4630      	mov	r0, r6
 80051f4:	4639      	mov	r1, r7
 80051f6:	f7fb fc3d 	bl	8000a74 <__aeabi_dcmpun>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d0e2      	beq.n	80051c4 <pow+0x60>
 80051fe:	f7ff ff87 	bl	8005110 <__errno>
 8005202:	2321      	movs	r3, #33	@ 0x21
 8005204:	6003      	str	r3, [r0, #0]
 8005206:	ecbd 8b02 	vpop	{d8}
 800520a:	ec47 6b10 	vmov	d0, r6, r7
 800520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	4630      	mov	r0, r6
 8005216:	4639      	mov	r1, r7
 8005218:	f7fb fbfa 	bl	8000a10 <__aeabi_dcmpeq>
 800521c:	2800      	cmp	r0, #0
 800521e:	d0f2      	beq.n	8005206 <pow+0xa2>
 8005220:	eeb0 0a48 	vmov.f32	s0, s16
 8005224:	eef0 0a68 	vmov.f32	s1, s17
 8005228:	f000 f80c 	bl	8005244 <finite>
 800522c:	2800      	cmp	r0, #0
 800522e:	d0ea      	beq.n	8005206 <pow+0xa2>
 8005230:	ec45 4b10 	vmov	d0, r4, r5
 8005234:	f000 f806 	bl	8005244 <finite>
 8005238:	e7c3      	b.n	80051c2 <pow+0x5e>
 800523a:	4f01      	ldr	r7, [pc, #4]	@ (8005240 <pow+0xdc>)
 800523c:	2600      	movs	r6, #0
 800523e:	e7e2      	b.n	8005206 <pow+0xa2>
 8005240:	3ff00000 	.word	0x3ff00000

08005244 <finite>:
 8005244:	b082      	sub	sp, #8
 8005246:	ed8d 0b00 	vstr	d0, [sp]
 800524a:	9801      	ldr	r0, [sp, #4]
 800524c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005250:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005254:	0fc0      	lsrs	r0, r0, #31
 8005256:	b002      	add	sp, #8
 8005258:	4770      	bx	lr
 800525a:	0000      	movs	r0, r0
 800525c:	0000      	movs	r0, r0
	...

08005260 <__ieee754_pow>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	b091      	sub	sp, #68	@ 0x44
 8005266:	ed8d 1b00 	vstr	d1, [sp]
 800526a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800526e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005272:	ea5a 0001 	orrs.w	r0, sl, r1
 8005276:	ec57 6b10 	vmov	r6, r7, d0
 800527a:	d113      	bne.n	80052a4 <__ieee754_pow+0x44>
 800527c:	19b3      	adds	r3, r6, r6
 800527e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005282:	4152      	adcs	r2, r2
 8005284:	4298      	cmp	r0, r3
 8005286:	4b9a      	ldr	r3, [pc, #616]	@ (80054f0 <__ieee754_pow+0x290>)
 8005288:	4193      	sbcs	r3, r2
 800528a:	f080 84ee 	bcs.w	8005c6a <__ieee754_pow+0xa0a>
 800528e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005292:	4630      	mov	r0, r6
 8005294:	4639      	mov	r1, r7
 8005296:	f7fa ff9d 	bl	80001d4 <__adddf3>
 800529a:	ec41 0b10 	vmov	d0, r0, r1
 800529e:	b011      	add	sp, #68	@ 0x44
 80052a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a4:	4a93      	ldr	r2, [pc, #588]	@ (80054f4 <__ieee754_pow+0x294>)
 80052a6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80052aa:	4295      	cmp	r5, r2
 80052ac:	46b8      	mov	r8, r7
 80052ae:	4633      	mov	r3, r6
 80052b0:	d80a      	bhi.n	80052c8 <__ieee754_pow+0x68>
 80052b2:	d104      	bne.n	80052be <__ieee754_pow+0x5e>
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	d1ea      	bne.n	800528e <__ieee754_pow+0x2e>
 80052b8:	45aa      	cmp	sl, r5
 80052ba:	d8e8      	bhi.n	800528e <__ieee754_pow+0x2e>
 80052bc:	e001      	b.n	80052c2 <__ieee754_pow+0x62>
 80052be:	4592      	cmp	sl, r2
 80052c0:	d802      	bhi.n	80052c8 <__ieee754_pow+0x68>
 80052c2:	4592      	cmp	sl, r2
 80052c4:	d10f      	bne.n	80052e6 <__ieee754_pow+0x86>
 80052c6:	b171      	cbz	r1, 80052e6 <__ieee754_pow+0x86>
 80052c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80052cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80052d0:	ea58 0803 	orrs.w	r8, r8, r3
 80052d4:	d1db      	bne.n	800528e <__ieee754_pow+0x2e>
 80052d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80052da:	18db      	adds	r3, r3, r3
 80052dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80052e0:	4152      	adcs	r2, r2
 80052e2:	4598      	cmp	r8, r3
 80052e4:	e7cf      	b.n	8005286 <__ieee754_pow+0x26>
 80052e6:	f1b8 0f00 	cmp.w	r8, #0
 80052ea:	46ab      	mov	fp, r5
 80052ec:	da43      	bge.n	8005376 <__ieee754_pow+0x116>
 80052ee:	4a82      	ldr	r2, [pc, #520]	@ (80054f8 <__ieee754_pow+0x298>)
 80052f0:	4592      	cmp	sl, r2
 80052f2:	d856      	bhi.n	80053a2 <__ieee754_pow+0x142>
 80052f4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80052f8:	4592      	cmp	sl, r2
 80052fa:	f240 84c5 	bls.w	8005c88 <__ieee754_pow+0xa28>
 80052fe:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005302:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005306:	2a14      	cmp	r2, #20
 8005308:	dd18      	ble.n	800533c <__ieee754_pow+0xdc>
 800530a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800530e:	fa21 f402 	lsr.w	r4, r1, r2
 8005312:	fa04 f202 	lsl.w	r2, r4, r2
 8005316:	428a      	cmp	r2, r1
 8005318:	f040 84b6 	bne.w	8005c88 <__ieee754_pow+0xa28>
 800531c:	f004 0401 	and.w	r4, r4, #1
 8005320:	f1c4 0402 	rsb	r4, r4, #2
 8005324:	2900      	cmp	r1, #0
 8005326:	d159      	bne.n	80053dc <__ieee754_pow+0x17c>
 8005328:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800532c:	d148      	bne.n	80053c0 <__ieee754_pow+0x160>
 800532e:	4632      	mov	r2, r6
 8005330:	463b      	mov	r3, r7
 8005332:	4630      	mov	r0, r6
 8005334:	4639      	mov	r1, r7
 8005336:	f7fb f903 	bl	8000540 <__aeabi_dmul>
 800533a:	e7ae      	b.n	800529a <__ieee754_pow+0x3a>
 800533c:	2900      	cmp	r1, #0
 800533e:	d14c      	bne.n	80053da <__ieee754_pow+0x17a>
 8005340:	f1c2 0214 	rsb	r2, r2, #20
 8005344:	fa4a f402 	asr.w	r4, sl, r2
 8005348:	fa04 f202 	lsl.w	r2, r4, r2
 800534c:	4552      	cmp	r2, sl
 800534e:	f040 8498 	bne.w	8005c82 <__ieee754_pow+0xa22>
 8005352:	f004 0401 	and.w	r4, r4, #1
 8005356:	f1c4 0402 	rsb	r4, r4, #2
 800535a:	4a68      	ldr	r2, [pc, #416]	@ (80054fc <__ieee754_pow+0x29c>)
 800535c:	4592      	cmp	sl, r2
 800535e:	d1e3      	bne.n	8005328 <__ieee754_pow+0xc8>
 8005360:	f1b9 0f00 	cmp.w	r9, #0
 8005364:	f280 8489 	bge.w	8005c7a <__ieee754_pow+0xa1a>
 8005368:	4964      	ldr	r1, [pc, #400]	@ (80054fc <__ieee754_pow+0x29c>)
 800536a:	4632      	mov	r2, r6
 800536c:	463b      	mov	r3, r7
 800536e:	2000      	movs	r0, #0
 8005370:	f7fb fa10 	bl	8000794 <__aeabi_ddiv>
 8005374:	e791      	b.n	800529a <__ieee754_pow+0x3a>
 8005376:	2400      	movs	r4, #0
 8005378:	bb81      	cbnz	r1, 80053dc <__ieee754_pow+0x17c>
 800537a:	4a5e      	ldr	r2, [pc, #376]	@ (80054f4 <__ieee754_pow+0x294>)
 800537c:	4592      	cmp	sl, r2
 800537e:	d1ec      	bne.n	800535a <__ieee754_pow+0xfa>
 8005380:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8005384:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005388:	431a      	orrs	r2, r3
 800538a:	f000 846e 	beq.w	8005c6a <__ieee754_pow+0xa0a>
 800538e:	4b5c      	ldr	r3, [pc, #368]	@ (8005500 <__ieee754_pow+0x2a0>)
 8005390:	429d      	cmp	r5, r3
 8005392:	d908      	bls.n	80053a6 <__ieee754_pow+0x146>
 8005394:	f1b9 0f00 	cmp.w	r9, #0
 8005398:	f280 846b 	bge.w	8005c72 <__ieee754_pow+0xa12>
 800539c:	2000      	movs	r0, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	e77b      	b.n	800529a <__ieee754_pow+0x3a>
 80053a2:	2402      	movs	r4, #2
 80053a4:	e7e8      	b.n	8005378 <__ieee754_pow+0x118>
 80053a6:	f1b9 0f00 	cmp.w	r9, #0
 80053aa:	f04f 0000 	mov.w	r0, #0
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	f6bf af72 	bge.w	800529a <__ieee754_pow+0x3a>
 80053b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80053ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80053be:	e76c      	b.n	800529a <__ieee754_pow+0x3a>
 80053c0:	4a50      	ldr	r2, [pc, #320]	@ (8005504 <__ieee754_pow+0x2a4>)
 80053c2:	4591      	cmp	r9, r2
 80053c4:	d10a      	bne.n	80053dc <__ieee754_pow+0x17c>
 80053c6:	f1b8 0f00 	cmp.w	r8, #0
 80053ca:	db07      	blt.n	80053dc <__ieee754_pow+0x17c>
 80053cc:	ec47 6b10 	vmov	d0, r6, r7
 80053d0:	b011      	add	sp, #68	@ 0x44
 80053d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d6:	f000 bd4f 	b.w	8005e78 <__ieee754_sqrt>
 80053da:	2400      	movs	r4, #0
 80053dc:	ec47 6b10 	vmov	d0, r6, r7
 80053e0:	9302      	str	r3, [sp, #8]
 80053e2:	f000 fc87 	bl	8005cf4 <fabs>
 80053e6:	9b02      	ldr	r3, [sp, #8]
 80053e8:	ec51 0b10 	vmov	r0, r1, d0
 80053ec:	bb43      	cbnz	r3, 8005440 <__ieee754_pow+0x1e0>
 80053ee:	4b43      	ldr	r3, [pc, #268]	@ (80054fc <__ieee754_pow+0x29c>)
 80053f0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d000      	beq.n	80053fa <__ieee754_pow+0x19a>
 80053f8:	bb15      	cbnz	r5, 8005440 <__ieee754_pow+0x1e0>
 80053fa:	f1b9 0f00 	cmp.w	r9, #0
 80053fe:	da05      	bge.n	800540c <__ieee754_pow+0x1ac>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	2000      	movs	r0, #0
 8005406:	493d      	ldr	r1, [pc, #244]	@ (80054fc <__ieee754_pow+0x29c>)
 8005408:	f7fb f9c4 	bl	8000794 <__aeabi_ddiv>
 800540c:	f1b8 0f00 	cmp.w	r8, #0
 8005410:	f6bf af43 	bge.w	800529a <__ieee754_pow+0x3a>
 8005414:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005418:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800541c:	4325      	orrs	r5, r4
 800541e:	d108      	bne.n	8005432 <__ieee754_pow+0x1d2>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4610      	mov	r0, r2
 8005426:	4619      	mov	r1, r3
 8005428:	f7fa fed2 	bl	80001d0 <__aeabi_dsub>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	e79e      	b.n	8005370 <__ieee754_pow+0x110>
 8005432:	2c01      	cmp	r4, #1
 8005434:	f47f af31 	bne.w	800529a <__ieee754_pow+0x3a>
 8005438:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800543c:	4619      	mov	r1, r3
 800543e:	e72c      	b.n	800529a <__ieee754_pow+0x3a>
 8005440:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8005444:	3b01      	subs	r3, #1
 8005446:	ea53 0204 	orrs.w	r2, r3, r4
 800544a:	d102      	bne.n	8005452 <__ieee754_pow+0x1f2>
 800544c:	4632      	mov	r2, r6
 800544e:	463b      	mov	r3, r7
 8005450:	e7e8      	b.n	8005424 <__ieee754_pow+0x1c4>
 8005452:	3c01      	subs	r4, #1
 8005454:	431c      	orrs	r4, r3
 8005456:	d016      	beq.n	8005486 <__ieee754_pow+0x226>
 8005458:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80054e0 <__ieee754_pow+0x280>
 800545c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005460:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005464:	f240 8110 	bls.w	8005688 <__ieee754_pow+0x428>
 8005468:	4b27      	ldr	r3, [pc, #156]	@ (8005508 <__ieee754_pow+0x2a8>)
 800546a:	459a      	cmp	sl, r3
 800546c:	4b24      	ldr	r3, [pc, #144]	@ (8005500 <__ieee754_pow+0x2a0>)
 800546e:	d916      	bls.n	800549e <__ieee754_pow+0x23e>
 8005470:	429d      	cmp	r5, r3
 8005472:	d80b      	bhi.n	800548c <__ieee754_pow+0x22c>
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	da0b      	bge.n	8005492 <__ieee754_pow+0x232>
 800547a:	2000      	movs	r0, #0
 800547c:	b011      	add	sp, #68	@ 0x44
 800547e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005482:	f000 bcf1 	b.w	8005e68 <__math_oflow>
 8005486:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80054e8 <__ieee754_pow+0x288>
 800548a:	e7e7      	b.n	800545c <__ieee754_pow+0x1fc>
 800548c:	f1b9 0f00 	cmp.w	r9, #0
 8005490:	dcf3      	bgt.n	800547a <__ieee754_pow+0x21a>
 8005492:	2000      	movs	r0, #0
 8005494:	b011      	add	sp, #68	@ 0x44
 8005496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f000 bcdd 	b.w	8005e58 <__math_uflow>
 800549e:	429d      	cmp	r5, r3
 80054a0:	d20c      	bcs.n	80054bc <__ieee754_pow+0x25c>
 80054a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2300      	movs	r3, #0
 80054aa:	f7fb fabb 	bl	8000a24 <__aeabi_dcmplt>
 80054ae:	3800      	subs	r0, #0
 80054b0:	bf18      	it	ne
 80054b2:	2001      	movne	r0, #1
 80054b4:	f1b9 0f00 	cmp.w	r9, #0
 80054b8:	daec      	bge.n	8005494 <__ieee754_pow+0x234>
 80054ba:	e7df      	b.n	800547c <__ieee754_pow+0x21c>
 80054bc:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <__ieee754_pow+0x29c>)
 80054be:	429d      	cmp	r5, r3
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	d922      	bls.n	800550c <__ieee754_pow+0x2ac>
 80054c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ca:	2300      	movs	r3, #0
 80054cc:	f7fb faaa 	bl	8000a24 <__aeabi_dcmplt>
 80054d0:	3800      	subs	r0, #0
 80054d2:	bf18      	it	ne
 80054d4:	2001      	movne	r0, #1
 80054d6:	f1b9 0f00 	cmp.w	r9, #0
 80054da:	dccf      	bgt.n	800547c <__ieee754_pow+0x21c>
 80054dc:	e7da      	b.n	8005494 <__ieee754_pow+0x234>
 80054de:	bf00      	nop
 80054e0:	00000000 	.word	0x00000000
 80054e4:	3ff00000 	.word	0x3ff00000
 80054e8:	00000000 	.word	0x00000000
 80054ec:	bff00000 	.word	0xbff00000
 80054f0:	fff00000 	.word	0xfff00000
 80054f4:	7ff00000 	.word	0x7ff00000
 80054f8:	433fffff 	.word	0x433fffff
 80054fc:	3ff00000 	.word	0x3ff00000
 8005500:	3fefffff 	.word	0x3fefffff
 8005504:	3fe00000 	.word	0x3fe00000
 8005508:	43f00000 	.word	0x43f00000
 800550c:	4b5a      	ldr	r3, [pc, #360]	@ (8005678 <__ieee754_pow+0x418>)
 800550e:	f7fa fe5f 	bl	80001d0 <__aeabi_dsub>
 8005512:	a351      	add	r3, pc, #324	@ (adr r3, 8005658 <__ieee754_pow+0x3f8>)
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	4604      	mov	r4, r0
 800551a:	460d      	mov	r5, r1
 800551c:	f7fb f810 	bl	8000540 <__aeabi_dmul>
 8005520:	a34f      	add	r3, pc, #316	@ (adr r3, 8005660 <__ieee754_pow+0x400>)
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	4606      	mov	r6, r0
 8005528:	460f      	mov	r7, r1
 800552a:	4620      	mov	r0, r4
 800552c:	4629      	mov	r1, r5
 800552e:	f7fb f807 	bl	8000540 <__aeabi_dmul>
 8005532:	4b52      	ldr	r3, [pc, #328]	@ (800567c <__ieee754_pow+0x41c>)
 8005534:	4682      	mov	sl, r0
 8005536:	468b      	mov	fp, r1
 8005538:	2200      	movs	r2, #0
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fa ffff 	bl	8000540 <__aeabi_dmul>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	a148      	add	r1, pc, #288	@ (adr r1, 8005668 <__ieee754_pow+0x408>)
 8005548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800554c:	f7fa fe40 	bl	80001d0 <__aeabi_dsub>
 8005550:	4622      	mov	r2, r4
 8005552:	462b      	mov	r3, r5
 8005554:	f7fa fff4 	bl	8000540 <__aeabi_dmul>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	2000      	movs	r0, #0
 800555e:	4948      	ldr	r1, [pc, #288]	@ (8005680 <__ieee754_pow+0x420>)
 8005560:	f7fa fe36 	bl	80001d0 <__aeabi_dsub>
 8005564:	4622      	mov	r2, r4
 8005566:	4680      	mov	r8, r0
 8005568:	4689      	mov	r9, r1
 800556a:	462b      	mov	r3, r5
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f7fa ffe6 	bl	8000540 <__aeabi_dmul>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4640      	mov	r0, r8
 800557a:	4649      	mov	r1, r9
 800557c:	f7fa ffe0 	bl	8000540 <__aeabi_dmul>
 8005580:	a33b      	add	r3, pc, #236	@ (adr r3, 8005670 <__ieee754_pow+0x410>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fa ffdb 	bl	8000540 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4650      	mov	r0, sl
 8005590:	4659      	mov	r1, fp
 8005592:	f7fa fe1d 	bl	80001d0 <__aeabi_dsub>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4680      	mov	r8, r0
 800559c:	4689      	mov	r9, r1
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fa fe17 	bl	80001d4 <__adddf3>
 80055a6:	2400      	movs	r4, #0
 80055a8:	4632      	mov	r2, r6
 80055aa:	463b      	mov	r3, r7
 80055ac:	4620      	mov	r0, r4
 80055ae:	460d      	mov	r5, r1
 80055b0:	f7fa fe0e 	bl	80001d0 <__aeabi_dsub>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4640      	mov	r0, r8
 80055ba:	4649      	mov	r1, r9
 80055bc:	f7fa fe08 	bl	80001d0 <__aeabi_dsub>
 80055c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80055d0:	4606      	mov	r6, r0
 80055d2:	460f      	mov	r7, r1
 80055d4:	465b      	mov	r3, fp
 80055d6:	4652      	mov	r2, sl
 80055d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055dc:	f7fa fdf8 	bl	80001d0 <__aeabi_dsub>
 80055e0:	4622      	mov	r2, r4
 80055e2:	462b      	mov	r3, r5
 80055e4:	f7fa ffac 	bl	8000540 <__aeabi_dmul>
 80055e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ec:	4680      	mov	r8, r0
 80055ee:	4689      	mov	r9, r1
 80055f0:	4630      	mov	r0, r6
 80055f2:	4639      	mov	r1, r7
 80055f4:	f7fa ffa4 	bl	8000540 <__aeabi_dmul>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4640      	mov	r0, r8
 80055fe:	4649      	mov	r1, r9
 8005600:	f7fa fde8 	bl	80001d4 <__adddf3>
 8005604:	465b      	mov	r3, fp
 8005606:	4606      	mov	r6, r0
 8005608:	460f      	mov	r7, r1
 800560a:	4652      	mov	r2, sl
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fa ff96 	bl	8000540 <__aeabi_dmul>
 8005614:	460b      	mov	r3, r1
 8005616:	4602      	mov	r2, r0
 8005618:	4680      	mov	r8, r0
 800561a:	4689      	mov	r9, r1
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fa fdd8 	bl	80001d4 <__adddf3>
 8005624:	4b17      	ldr	r3, [pc, #92]	@ (8005684 <__ieee754_pow+0x424>)
 8005626:	4299      	cmp	r1, r3
 8005628:	4604      	mov	r4, r0
 800562a:	460d      	mov	r5, r1
 800562c:	468b      	mov	fp, r1
 800562e:	f340 820b 	ble.w	8005a48 <__ieee754_pow+0x7e8>
 8005632:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005636:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800563a:	4303      	orrs	r3, r0
 800563c:	f000 81ea 	beq.w	8005a14 <__ieee754_pow+0x7b4>
 8005640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f7fb f9ec 	bl	8000a24 <__aeabi_dcmplt>
 800564c:	3800      	subs	r0, #0
 800564e:	bf18      	it	ne
 8005650:	2001      	movne	r0, #1
 8005652:	e713      	b.n	800547c <__ieee754_pow+0x21c>
 8005654:	f3af 8000 	nop.w
 8005658:	60000000 	.word	0x60000000
 800565c:	3ff71547 	.word	0x3ff71547
 8005660:	f85ddf44 	.word	0xf85ddf44
 8005664:	3e54ae0b 	.word	0x3e54ae0b
 8005668:	55555555 	.word	0x55555555
 800566c:	3fd55555 	.word	0x3fd55555
 8005670:	652b82fe 	.word	0x652b82fe
 8005674:	3ff71547 	.word	0x3ff71547
 8005678:	3ff00000 	.word	0x3ff00000
 800567c:	3fd00000 	.word	0x3fd00000
 8005680:	3fe00000 	.word	0x3fe00000
 8005684:	408fffff 	.word	0x408fffff
 8005688:	4bd5      	ldr	r3, [pc, #852]	@ (80059e0 <__ieee754_pow+0x780>)
 800568a:	ea08 0303 	and.w	r3, r8, r3
 800568e:	2200      	movs	r2, #0
 8005690:	b92b      	cbnz	r3, 800569e <__ieee754_pow+0x43e>
 8005692:	4bd4      	ldr	r3, [pc, #848]	@ (80059e4 <__ieee754_pow+0x784>)
 8005694:	f7fa ff54 	bl	8000540 <__aeabi_dmul>
 8005698:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800569c:	468b      	mov	fp, r1
 800569e:	ea4f 532b 	mov.w	r3, fp, asr #20
 80056a2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80056a6:	4413      	add	r3, r2
 80056a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80056aa:	4bcf      	ldr	r3, [pc, #828]	@ (80059e8 <__ieee754_pow+0x788>)
 80056ac:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80056b0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80056b4:	459b      	cmp	fp, r3
 80056b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80056ba:	dd08      	ble.n	80056ce <__ieee754_pow+0x46e>
 80056bc:	4bcb      	ldr	r3, [pc, #812]	@ (80059ec <__ieee754_pow+0x78c>)
 80056be:	459b      	cmp	fp, r3
 80056c0:	f340 81a5 	ble.w	8005a0e <__ieee754_pow+0x7ae>
 80056c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056c6:	3301      	adds	r3, #1
 80056c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80056ca:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80056ce:	f04f 0a00 	mov.w	sl, #0
 80056d2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80056d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056d8:	4bc5      	ldr	r3, [pc, #788]	@ (80059f0 <__ieee754_pow+0x790>)
 80056da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056de:	ed93 7b00 	vldr	d7, [r3]
 80056e2:	4629      	mov	r1, r5
 80056e4:	ec53 2b17 	vmov	r2, r3, d7
 80056e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056f0:	f7fa fd6e 	bl	80001d0 <__aeabi_dsub>
 80056f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056f8:	4606      	mov	r6, r0
 80056fa:	460f      	mov	r7, r1
 80056fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005700:	f7fa fd68 	bl	80001d4 <__adddf3>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	2000      	movs	r0, #0
 800570a:	49ba      	ldr	r1, [pc, #744]	@ (80059f4 <__ieee754_pow+0x794>)
 800570c:	f7fb f842 	bl	8000794 <__aeabi_ddiv>
 8005710:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4630      	mov	r0, r6
 800571a:	4639      	mov	r1, r7
 800571c:	f7fa ff10 	bl	8000540 <__aeabi_dmul>
 8005720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005724:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005728:	106d      	asrs	r5, r5, #1
 800572a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800572e:	f04f 0b00 	mov.w	fp, #0
 8005732:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005736:	4661      	mov	r1, ip
 8005738:	2200      	movs	r2, #0
 800573a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800573e:	4658      	mov	r0, fp
 8005740:	46e1      	mov	r9, ip
 8005742:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005746:	4614      	mov	r4, r2
 8005748:	461d      	mov	r5, r3
 800574a:	f7fa fef9 	bl	8000540 <__aeabi_dmul>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4630      	mov	r0, r6
 8005754:	4639      	mov	r1, r7
 8005756:	f7fa fd3b 	bl	80001d0 <__aeabi_dsub>
 800575a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800575e:	4606      	mov	r6, r0
 8005760:	460f      	mov	r7, r1
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f7fa fd33 	bl	80001d0 <__aeabi_dsub>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005772:	f7fa fd2d 	bl	80001d0 <__aeabi_dsub>
 8005776:	465a      	mov	r2, fp
 8005778:	464b      	mov	r3, r9
 800577a:	f7fa fee1 	bl	8000540 <__aeabi_dmul>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4630      	mov	r0, r6
 8005784:	4639      	mov	r1, r7
 8005786:	f7fa fd23 	bl	80001d0 <__aeabi_dsub>
 800578a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800578e:	f7fa fed7 	bl	8000540 <__aeabi_dmul>
 8005792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005796:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	f7fa fecf 	bl	8000540 <__aeabi_dmul>
 80057a2:	a37d      	add	r3, pc, #500	@ (adr r3, 8005998 <__ieee754_pow+0x738>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	4604      	mov	r4, r0
 80057aa:	460d      	mov	r5, r1
 80057ac:	f7fa fec8 	bl	8000540 <__aeabi_dmul>
 80057b0:	a37b      	add	r3, pc, #492	@ (adr r3, 80059a0 <__ieee754_pow+0x740>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa fd0d 	bl	80001d4 <__adddf3>
 80057ba:	4622      	mov	r2, r4
 80057bc:	462b      	mov	r3, r5
 80057be:	f7fa febf 	bl	8000540 <__aeabi_dmul>
 80057c2:	a379      	add	r3, pc, #484	@ (adr r3, 80059a8 <__ieee754_pow+0x748>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f7fa fd04 	bl	80001d4 <__adddf3>
 80057cc:	4622      	mov	r2, r4
 80057ce:	462b      	mov	r3, r5
 80057d0:	f7fa feb6 	bl	8000540 <__aeabi_dmul>
 80057d4:	a376      	add	r3, pc, #472	@ (adr r3, 80059b0 <__ieee754_pow+0x750>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fa fcfb 	bl	80001d4 <__adddf3>
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f7fa fead 	bl	8000540 <__aeabi_dmul>
 80057e6:	a374      	add	r3, pc, #464	@ (adr r3, 80059b8 <__ieee754_pow+0x758>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fa fcf2 	bl	80001d4 <__adddf3>
 80057f0:	4622      	mov	r2, r4
 80057f2:	462b      	mov	r3, r5
 80057f4:	f7fa fea4 	bl	8000540 <__aeabi_dmul>
 80057f8:	a371      	add	r3, pc, #452	@ (adr r3, 80059c0 <__ieee754_pow+0x760>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa fce9 	bl	80001d4 <__adddf3>
 8005802:	4622      	mov	r2, r4
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	462b      	mov	r3, r5
 800580a:	4620      	mov	r0, r4
 800580c:	4629      	mov	r1, r5
 800580e:	f7fa fe97 	bl	8000540 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f7fa fe91 	bl	8000540 <__aeabi_dmul>
 800581e:	465a      	mov	r2, fp
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	464b      	mov	r3, r9
 8005826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800582a:	f7fa fcd3 	bl	80001d4 <__adddf3>
 800582e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005832:	f7fa fe85 	bl	8000540 <__aeabi_dmul>
 8005836:	4622      	mov	r2, r4
 8005838:	462b      	mov	r3, r5
 800583a:	f7fa fccb 	bl	80001d4 <__adddf3>
 800583e:	465a      	mov	r2, fp
 8005840:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005844:	464b      	mov	r3, r9
 8005846:	4658      	mov	r0, fp
 8005848:	4649      	mov	r1, r9
 800584a:	f7fa fe79 	bl	8000540 <__aeabi_dmul>
 800584e:	4b6a      	ldr	r3, [pc, #424]	@ (80059f8 <__ieee754_pow+0x798>)
 8005850:	2200      	movs	r2, #0
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	f7fa fcbd 	bl	80001d4 <__adddf3>
 800585a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800585e:	f7fa fcb9 	bl	80001d4 <__adddf3>
 8005862:	46d8      	mov	r8, fp
 8005864:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005868:	460d      	mov	r5, r1
 800586a:	465a      	mov	r2, fp
 800586c:	460b      	mov	r3, r1
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005876:	f7fa fe63 	bl	8000540 <__aeabi_dmul>
 800587a:	465c      	mov	r4, fp
 800587c:	4680      	mov	r8, r0
 800587e:	4689      	mov	r9, r1
 8005880:	4b5d      	ldr	r3, [pc, #372]	@ (80059f8 <__ieee754_pow+0x798>)
 8005882:	2200      	movs	r2, #0
 8005884:	4620      	mov	r0, r4
 8005886:	4629      	mov	r1, r5
 8005888:	f7fa fca2 	bl	80001d0 <__aeabi_dsub>
 800588c:	4632      	mov	r2, r6
 800588e:	463b      	mov	r3, r7
 8005890:	f7fa fc9e 	bl	80001d0 <__aeabi_dsub>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800589c:	f7fa fc98 	bl	80001d0 <__aeabi_dsub>
 80058a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a4:	f7fa fe4c 	bl	8000540 <__aeabi_dmul>
 80058a8:	4622      	mov	r2, r4
 80058aa:	4606      	mov	r6, r0
 80058ac:	460f      	mov	r7, r1
 80058ae:	462b      	mov	r3, r5
 80058b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058b4:	f7fa fe44 	bl	8000540 <__aeabi_dmul>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	f7fa fc88 	bl	80001d4 <__adddf3>
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4640      	mov	r0, r8
 80058ce:	4649      	mov	r1, r9
 80058d0:	f7fa fc80 	bl	80001d4 <__adddf3>
 80058d4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80058d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80059c8 <__ieee754_pow+0x768>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	4658      	mov	r0, fp
 80058e0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80058e4:	460d      	mov	r5, r1
 80058e6:	f7fa fe2b 	bl	8000540 <__aeabi_dmul>
 80058ea:	465c      	mov	r4, fp
 80058ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	4620      	mov	r0, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fa fc6a 	bl	80001d0 <__aeabi_dsub>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	f7fa fc64 	bl	80001d0 <__aeabi_dsub>
 8005908:	a331      	add	r3, pc, #196	@ (adr r3, 80059d0 <__ieee754_pow+0x770>)
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f7fa fe17 	bl	8000540 <__aeabi_dmul>
 8005912:	a331      	add	r3, pc, #196	@ (adr r3, 80059d8 <__ieee754_pow+0x778>)
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	4606      	mov	r6, r0
 800591a:	460f      	mov	r7, r1
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fa fe0e 	bl	8000540 <__aeabi_dmul>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	f7fa fc52 	bl	80001d4 <__adddf3>
 8005930:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005932:	4b32      	ldr	r3, [pc, #200]	@ (80059fc <__ieee754_pow+0x79c>)
 8005934:	4413      	add	r3, r2
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f7fa fc4b 	bl	80001d4 <__adddf3>
 800593e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005942:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005944:	f7fa fd92 	bl	800046c <__aeabi_i2d>
 8005948:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800594a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <__ieee754_pow+0x7a0>)
 800594c:	4413      	add	r3, r2
 800594e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005952:	4606      	mov	r6, r0
 8005954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005958:	460f      	mov	r7, r1
 800595a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800595e:	f7fa fc39 	bl	80001d4 <__adddf3>
 8005962:	4642      	mov	r2, r8
 8005964:	464b      	mov	r3, r9
 8005966:	f7fa fc35 	bl	80001d4 <__adddf3>
 800596a:	4632      	mov	r2, r6
 800596c:	463b      	mov	r3, r7
 800596e:	f7fa fc31 	bl	80001d4 <__adddf3>
 8005972:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8005976:	4632      	mov	r2, r6
 8005978:	463b      	mov	r3, r7
 800597a:	4658      	mov	r0, fp
 800597c:	460d      	mov	r5, r1
 800597e:	f7fa fc27 	bl	80001d0 <__aeabi_dsub>
 8005982:	4642      	mov	r2, r8
 8005984:	464b      	mov	r3, r9
 8005986:	f7fa fc23 	bl	80001d0 <__aeabi_dsub>
 800598a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800598e:	f7fa fc1f 	bl	80001d0 <__aeabi_dsub>
 8005992:	465c      	mov	r4, fp
 8005994:	e036      	b.n	8005a04 <__ieee754_pow+0x7a4>
 8005996:	bf00      	nop
 8005998:	4a454eef 	.word	0x4a454eef
 800599c:	3fca7e28 	.word	0x3fca7e28
 80059a0:	93c9db65 	.word	0x93c9db65
 80059a4:	3fcd864a 	.word	0x3fcd864a
 80059a8:	a91d4101 	.word	0xa91d4101
 80059ac:	3fd17460 	.word	0x3fd17460
 80059b0:	518f264d 	.word	0x518f264d
 80059b4:	3fd55555 	.word	0x3fd55555
 80059b8:	db6fabff 	.word	0xdb6fabff
 80059bc:	3fdb6db6 	.word	0x3fdb6db6
 80059c0:	33333303 	.word	0x33333303
 80059c4:	3fe33333 	.word	0x3fe33333
 80059c8:	e0000000 	.word	0xe0000000
 80059cc:	3feec709 	.word	0x3feec709
 80059d0:	dc3a03fd 	.word	0xdc3a03fd
 80059d4:	3feec709 	.word	0x3feec709
 80059d8:	145b01f5 	.word	0x145b01f5
 80059dc:	be3e2fe0 	.word	0xbe3e2fe0
 80059e0:	7ff00000 	.word	0x7ff00000
 80059e4:	43400000 	.word	0x43400000
 80059e8:	0003988e 	.word	0x0003988e
 80059ec:	000bb679 	.word	0x000bb679
 80059f0:	08006098 	.word	0x08006098
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	40080000 	.word	0x40080000
 80059fc:	08006078 	.word	0x08006078
 8005a00:	08006088 	.word	0x08006088
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a0c:	e5d6      	b.n	80055bc <__ieee754_pow+0x35c>
 8005a0e:	f04f 0a01 	mov.w	sl, #1
 8005a12:	e65e      	b.n	80056d2 <__ieee754_pow+0x472>
 8005a14:	a3b5      	add	r3, pc, #724	@ (adr r3, 8005cec <__ieee754_pow+0xa8c>)
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	f7fa fbd9 	bl	80001d4 <__adddf3>
 8005a22:	4642      	mov	r2, r8
 8005a24:	e9cd 0100 	strd	r0, r1, [sp]
 8005a28:	464b      	mov	r3, r9
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	f7fa fbcf 	bl	80001d0 <__aeabi_dsub>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a3a:	f7fb f811 	bl	8000a60 <__aeabi_dcmpgt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f47f adfe 	bne.w	8005640 <__ieee754_pow+0x3e0>
 8005a44:	4ba2      	ldr	r3, [pc, #648]	@ (8005cd0 <__ieee754_pow+0xa70>)
 8005a46:	e022      	b.n	8005a8e <__ieee754_pow+0x82e>
 8005a48:	4ca2      	ldr	r4, [pc, #648]	@ (8005cd4 <__ieee754_pow+0xa74>)
 8005a4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005a4e:	42a3      	cmp	r3, r4
 8005a50:	d919      	bls.n	8005a86 <__ieee754_pow+0x826>
 8005a52:	4ba1      	ldr	r3, [pc, #644]	@ (8005cd8 <__ieee754_pow+0xa78>)
 8005a54:	440b      	add	r3, r1
 8005a56:	4303      	orrs	r3, r0
 8005a58:	d009      	beq.n	8005a6e <__ieee754_pow+0x80e>
 8005a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2300      	movs	r3, #0
 8005a62:	f7fa ffdf 	bl	8000a24 <__aeabi_dcmplt>
 8005a66:	3800      	subs	r0, #0
 8005a68:	bf18      	it	ne
 8005a6a:	2001      	movne	r0, #1
 8005a6c:	e512      	b.n	8005494 <__ieee754_pow+0x234>
 8005a6e:	4642      	mov	r2, r8
 8005a70:	464b      	mov	r3, r9
 8005a72:	f7fa fbad 	bl	80001d0 <__aeabi_dsub>
 8005a76:	4632      	mov	r2, r6
 8005a78:	463b      	mov	r3, r7
 8005a7a:	f7fa ffe7 	bl	8000a4c <__aeabi_dcmpge>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d1eb      	bne.n	8005a5a <__ieee754_pow+0x7fa>
 8005a82:	4b96      	ldr	r3, [pc, #600]	@ (8005cdc <__ieee754_pow+0xa7c>)
 8005a84:	e003      	b.n	8005a8e <__ieee754_pow+0x82e>
 8005a86:	4a96      	ldr	r2, [pc, #600]	@ (8005ce0 <__ieee754_pow+0xa80>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	f240 80e7 	bls.w	8005c5c <__ieee754_pow+0x9fc>
 8005a8e:	151b      	asrs	r3, r3, #20
 8005a90:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8005a94:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8005a98:	fa4a fa03 	asr.w	sl, sl, r3
 8005a9c:	44da      	add	sl, fp
 8005a9e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005aa2:	4890      	ldr	r0, [pc, #576]	@ (8005ce4 <__ieee754_pow+0xa84>)
 8005aa4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005aa8:	4108      	asrs	r0, r1
 8005aaa:	ea00 030a 	and.w	r3, r0, sl
 8005aae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005ab2:	f1c1 0114 	rsb	r1, r1, #20
 8005ab6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005aba:	fa4a fa01 	asr.w	sl, sl, r1
 8005abe:	f1bb 0f00 	cmp.w	fp, #0
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	bfb8      	it	lt
 8005acc:	f1ca 0a00 	rsblt	sl, sl, #0
 8005ad0:	f7fa fb7e 	bl	80001d0 <__aeabi_dsub>
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	4689      	mov	r9, r1
 8005ad8:	4632      	mov	r2, r6
 8005ada:	463b      	mov	r3, r7
 8005adc:	4640      	mov	r0, r8
 8005ade:	4649      	mov	r1, r9
 8005ae0:	f7fa fb78 	bl	80001d4 <__adddf3>
 8005ae4:	2400      	movs	r4, #0
 8005ae6:	a36a      	add	r3, pc, #424	@ (adr r3, 8005c90 <__ieee754_pow+0xa30>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	4620      	mov	r0, r4
 8005aee:	460d      	mov	r5, r1
 8005af0:	f7fa fd26 	bl	8000540 <__aeabi_dmul>
 8005af4:	4642      	mov	r2, r8
 8005af6:	e9cd 0100 	strd	r0, r1, [sp]
 8005afa:	464b      	mov	r3, r9
 8005afc:	4620      	mov	r0, r4
 8005afe:	4629      	mov	r1, r5
 8005b00:	f7fa fb66 	bl	80001d0 <__aeabi_dsub>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	f7fa fb60 	bl	80001d0 <__aeabi_dsub>
 8005b10:	a361      	add	r3, pc, #388	@ (adr r3, 8005c98 <__ieee754_pow+0xa38>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fd13 	bl	8000540 <__aeabi_dmul>
 8005b1a:	a361      	add	r3, pc, #388	@ (adr r3, 8005ca0 <__ieee754_pow+0xa40>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	4680      	mov	r8, r0
 8005b22:	4689      	mov	r9, r1
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7fa fd0a 	bl	8000540 <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4640      	mov	r0, r8
 8005b32:	4649      	mov	r1, r9
 8005b34:	f7fa fb4e 	bl	80001d4 <__adddf3>
 8005b38:	4604      	mov	r4, r0
 8005b3a:	460d      	mov	r5, r1
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b44:	f7fa fb46 	bl	80001d4 <__adddf3>
 8005b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	4689      	mov	r9, r1
 8005b50:	f7fa fb3e 	bl	80001d0 <__aeabi_dsub>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4620      	mov	r0, r4
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	f7fa fb38 	bl	80001d0 <__aeabi_dsub>
 8005b60:	4642      	mov	r2, r8
 8005b62:	4606      	mov	r6, r0
 8005b64:	460f      	mov	r7, r1
 8005b66:	464b      	mov	r3, r9
 8005b68:	4640      	mov	r0, r8
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	f7fa fce8 	bl	8000540 <__aeabi_dmul>
 8005b70:	a34d      	add	r3, pc, #308	@ (adr r3, 8005ca8 <__ieee754_pow+0xa48>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	f7fa fce1 	bl	8000540 <__aeabi_dmul>
 8005b7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005cb0 <__ieee754_pow+0xa50>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fa fb24 	bl	80001d0 <__aeabi_dsub>
 8005b88:	4622      	mov	r2, r4
 8005b8a:	462b      	mov	r3, r5
 8005b8c:	f7fa fcd8 	bl	8000540 <__aeabi_dmul>
 8005b90:	a349      	add	r3, pc, #292	@ (adr r3, 8005cb8 <__ieee754_pow+0xa58>)
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa fb1d 	bl	80001d4 <__adddf3>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	f7fa fccf 	bl	8000540 <__aeabi_dmul>
 8005ba2:	a347      	add	r3, pc, #284	@ (adr r3, 8005cc0 <__ieee754_pow+0xa60>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f7fa fb12 	bl	80001d0 <__aeabi_dsub>
 8005bac:	4622      	mov	r2, r4
 8005bae:	462b      	mov	r3, r5
 8005bb0:	f7fa fcc6 	bl	8000540 <__aeabi_dmul>
 8005bb4:	a344      	add	r3, pc, #272	@ (adr r3, 8005cc8 <__ieee754_pow+0xa68>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f7fa fb0b 	bl	80001d4 <__adddf3>
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f7fa fcbd 	bl	8000540 <__aeabi_dmul>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa faff 	bl	80001d0 <__aeabi_dsub>
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	460d      	mov	r5, r1
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4640      	mov	r0, r8
 8005bdc:	4649      	mov	r1, r9
 8005bde:	f7fa fcaf 	bl	8000540 <__aeabi_dmul>
 8005be2:	2200      	movs	r2, #0
 8005be4:	e9cd 0100 	strd	r0, r1, [sp]
 8005be8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005bec:	4620      	mov	r0, r4
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7fa faee 	bl	80001d0 <__aeabi_dsub>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bfc:	f7fa fdca 	bl	8000794 <__aeabi_ddiv>
 8005c00:	4632      	mov	r2, r6
 8005c02:	4604      	mov	r4, r0
 8005c04:	460d      	mov	r5, r1
 8005c06:	463b      	mov	r3, r7
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	f7fa fc98 	bl	8000540 <__aeabi_dmul>
 8005c10:	4632      	mov	r2, r6
 8005c12:	463b      	mov	r3, r7
 8005c14:	f7fa fade 	bl	80001d4 <__adddf3>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7fa fad6 	bl	80001d0 <__aeabi_dsub>
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	f7fa fad2 	bl	80001d0 <__aeabi_dsub>
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4602      	mov	r2, r0
 8005c30:	492d      	ldr	r1, [pc, #180]	@ (8005ce8 <__ieee754_pow+0xa88>)
 8005c32:	2000      	movs	r0, #0
 8005c34:	f7fa facc 	bl	80001d0 <__aeabi_dsub>
 8005c38:	ec41 0b10 	vmov	d0, r0, r1
 8005c3c:	ee10 3a90 	vmov	r3, s1
 8005c40:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c48:	da0b      	bge.n	8005c62 <__ieee754_pow+0xa02>
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	f000 f85c 	bl	8005d08 <scalbn>
 8005c50:	ec51 0b10 	vmov	r0, r1, d0
 8005c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c58:	f7ff bb6d 	b.w	8005336 <__ieee754_pow+0xd6>
 8005c5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005c60:	e73a      	b.n	8005ad8 <__ieee754_pow+0x878>
 8005c62:	ec51 0b10 	vmov	r0, r1, d0
 8005c66:	4619      	mov	r1, r3
 8005c68:	e7f4      	b.n	8005c54 <__ieee754_pow+0x9f4>
 8005c6a:	491f      	ldr	r1, [pc, #124]	@ (8005ce8 <__ieee754_pow+0xa88>)
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f7ff bb14 	b.w	800529a <__ieee754_pow+0x3a>
 8005c72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c76:	f7ff bb10 	b.w	800529a <__ieee754_pow+0x3a>
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7ff bb0c 	b.w	800529a <__ieee754_pow+0x3a>
 8005c82:	460c      	mov	r4, r1
 8005c84:	f7ff bb69 	b.w	800535a <__ieee754_pow+0xfa>
 8005c88:	2400      	movs	r4, #0
 8005c8a:	f7ff bb4b 	b.w	8005324 <__ieee754_pow+0xc4>
 8005c8e:	bf00      	nop
 8005c90:	00000000 	.word	0x00000000
 8005c94:	3fe62e43 	.word	0x3fe62e43
 8005c98:	fefa39ef 	.word	0xfefa39ef
 8005c9c:	3fe62e42 	.word	0x3fe62e42
 8005ca0:	0ca86c39 	.word	0x0ca86c39
 8005ca4:	be205c61 	.word	0xbe205c61
 8005ca8:	72bea4d0 	.word	0x72bea4d0
 8005cac:	3e663769 	.word	0x3e663769
 8005cb0:	c5d26bf1 	.word	0xc5d26bf1
 8005cb4:	3ebbbd41 	.word	0x3ebbbd41
 8005cb8:	af25de2c 	.word	0xaf25de2c
 8005cbc:	3f11566a 	.word	0x3f11566a
 8005cc0:	16bebd93 	.word	0x16bebd93
 8005cc4:	3f66c16c 	.word	0x3f66c16c
 8005cc8:	5555553e 	.word	0x5555553e
 8005ccc:	3fc55555 	.word	0x3fc55555
 8005cd0:	40900000 	.word	0x40900000
 8005cd4:	4090cbff 	.word	0x4090cbff
 8005cd8:	3f6f3400 	.word	0x3f6f3400
 8005cdc:	4090cc00 	.word	0x4090cc00
 8005ce0:	3fe00000 	.word	0x3fe00000
 8005ce4:	fff00000 	.word	0xfff00000
 8005ce8:	3ff00000 	.word	0x3ff00000
 8005cec:	652b82fe 	.word	0x652b82fe
 8005cf0:	3c971547 	.word	0x3c971547

08005cf4 <fabs>:
 8005cf4:	ec51 0b10 	vmov	r0, r1, d0
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005cfe:	ec43 2b10 	vmov	d0, r2, r3
 8005d02:	4770      	bx	lr
 8005d04:	0000      	movs	r0, r0
	...

08005d08 <scalbn>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	ec55 4b10 	vmov	r4, r5, d0
 8005d0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005d12:	4606      	mov	r6, r0
 8005d14:	462b      	mov	r3, r5
 8005d16:	b991      	cbnz	r1, 8005d3e <scalbn+0x36>
 8005d18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005d1c:	4323      	orrs	r3, r4
 8005d1e:	d03b      	beq.n	8005d98 <scalbn+0x90>
 8005d20:	4b33      	ldr	r3, [pc, #204]	@ (8005df0 <scalbn+0xe8>)
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	2200      	movs	r2, #0
 8005d28:	f7fa fc0a 	bl	8000540 <__aeabi_dmul>
 8005d2c:	4b31      	ldr	r3, [pc, #196]	@ (8005df4 <scalbn+0xec>)
 8005d2e:	429e      	cmp	r6, r3
 8005d30:	4604      	mov	r4, r0
 8005d32:	460d      	mov	r5, r1
 8005d34:	da0f      	bge.n	8005d56 <scalbn+0x4e>
 8005d36:	a326      	add	r3, pc, #152	@ (adr r3, 8005dd0 <scalbn+0xc8>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	e01e      	b.n	8005d7c <scalbn+0x74>
 8005d3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005d42:	4291      	cmp	r1, r2
 8005d44:	d10b      	bne.n	8005d5e <scalbn+0x56>
 8005d46:	4622      	mov	r2, r4
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f7fa fa42 	bl	80001d4 <__adddf3>
 8005d50:	4604      	mov	r4, r0
 8005d52:	460d      	mov	r5, r1
 8005d54:	e020      	b.n	8005d98 <scalbn+0x90>
 8005d56:	460b      	mov	r3, r1
 8005d58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005d5c:	3936      	subs	r1, #54	@ 0x36
 8005d5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005d62:	4296      	cmp	r6, r2
 8005d64:	dd0d      	ble.n	8005d82 <scalbn+0x7a>
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	a11b      	add	r1, pc, #108	@ (adr r1, 8005dd8 <scalbn+0xd0>)
 8005d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d6e:	da02      	bge.n	8005d76 <scalbn+0x6e>
 8005d70:	a11b      	add	r1, pc, #108	@ (adr r1, 8005de0 <scalbn+0xd8>)
 8005d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d76:	a318      	add	r3, pc, #96	@ (adr r3, 8005dd8 <scalbn+0xd0>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f7fa fbe0 	bl	8000540 <__aeabi_dmul>
 8005d80:	e7e6      	b.n	8005d50 <scalbn+0x48>
 8005d82:	1872      	adds	r2, r6, r1
 8005d84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	dcec      	bgt.n	8005d66 <scalbn+0x5e>
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	dd06      	ble.n	8005d9e <scalbn+0x96>
 8005d90:	f36f 531e 	bfc	r3, #20, #11
 8005d94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d98:	ec45 4b10 	vmov	d0, r4, r5
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005da2:	da08      	bge.n	8005db6 <scalbn+0xae>
 8005da4:	2d00      	cmp	r5, #0
 8005da6:	a10a      	add	r1, pc, #40	@ (adr r1, 8005dd0 <scalbn+0xc8>)
 8005da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dac:	dac3      	bge.n	8005d36 <scalbn+0x2e>
 8005dae:	a10e      	add	r1, pc, #56	@ (adr r1, 8005de8 <scalbn+0xe0>)
 8005db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005db4:	e7bf      	b.n	8005d36 <scalbn+0x2e>
 8005db6:	3236      	adds	r2, #54	@ 0x36
 8005db8:	f36f 531e 	bfc	r3, #20, #11
 8005dbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <scalbn+0xf0>)
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	e7d8      	b.n	8005d7c <scalbn+0x74>
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	c2f8f359 	.word	0xc2f8f359
 8005dd4:	01a56e1f 	.word	0x01a56e1f
 8005dd8:	8800759c 	.word	0x8800759c
 8005ddc:	7e37e43c 	.word	0x7e37e43c
 8005de0:	8800759c 	.word	0x8800759c
 8005de4:	fe37e43c 	.word	0xfe37e43c
 8005de8:	c2f8f359 	.word	0xc2f8f359
 8005dec:	81a56e1f 	.word	0x81a56e1f
 8005df0:	43500000 	.word	0x43500000
 8005df4:	ffff3cb0 	.word	0xffff3cb0
 8005df8:	3c900000 	.word	0x3c900000

08005dfc <with_errno>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	ed2d 8b02 	vpush	{d8}
 8005e02:	eeb0 8a40 	vmov.f32	s16, s0
 8005e06:	eef0 8a60 	vmov.f32	s17, s1
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	f7ff f980 	bl	8005110 <__errno>
 8005e10:	eeb0 0a48 	vmov.f32	s0, s16
 8005e14:	eef0 0a68 	vmov.f32	s1, s17
 8005e18:	ecbd 8b02 	vpop	{d8}
 8005e1c:	6004      	str	r4, [r0, #0]
 8005e1e:	bd10      	pop	{r4, pc}

08005e20 <xflow>:
 8005e20:	4603      	mov	r3, r0
 8005e22:	b507      	push	{r0, r1, r2, lr}
 8005e24:	ec51 0b10 	vmov	r0, r1, d0
 8005e28:	b183      	cbz	r3, 8005e4c <xflow+0x2c>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e30:	e9cd 2300 	strd	r2, r3, [sp]
 8005e34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e38:	f7fa fb82 	bl	8000540 <__aeabi_dmul>
 8005e3c:	ec41 0b10 	vmov	d0, r0, r1
 8005e40:	2022      	movs	r0, #34	@ 0x22
 8005e42:	b003      	add	sp, #12
 8005e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e48:	f7ff bfd8 	b.w	8005dfc <with_errno>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	e7ee      	b.n	8005e30 <xflow+0x10>
 8005e52:	0000      	movs	r0, r0
 8005e54:	0000      	movs	r0, r0
	...

08005e58 <__math_uflow>:
 8005e58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005e60 <__math_uflow+0x8>
 8005e5c:	f7ff bfe0 	b.w	8005e20 <xflow>
 8005e60:	00000000 	.word	0x00000000
 8005e64:	10000000 	.word	0x10000000

08005e68 <__math_oflow>:
 8005e68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005e70 <__math_oflow+0x8>
 8005e6c:	f7ff bfd8 	b.w	8005e20 <xflow>
 8005e70:	00000000 	.word	0x00000000
 8005e74:	70000000 	.word	0x70000000

08005e78 <__ieee754_sqrt>:
 8005e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	4a66      	ldr	r2, [pc, #408]	@ (8006018 <__ieee754_sqrt+0x1a0>)
 8005e7e:	ec55 4b10 	vmov	r4, r5, d0
 8005e82:	43aa      	bics	r2, r5
 8005e84:	462b      	mov	r3, r5
 8005e86:	4621      	mov	r1, r4
 8005e88:	d110      	bne.n	8005eac <__ieee754_sqrt+0x34>
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f7fa fb56 	bl	8000540 <__aeabi_dmul>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7fa f99a 	bl	80001d4 <__adddf3>
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	ec45 4b10 	vmov	d0, r4, r5
 8005ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	dc0e      	bgt.n	8005ece <__ieee754_sqrt+0x56>
 8005eb0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005eb4:	4322      	orrs	r2, r4
 8005eb6:	d0f5      	beq.n	8005ea4 <__ieee754_sqrt+0x2c>
 8005eb8:	b19d      	cbz	r5, 8005ee2 <__ieee754_sqrt+0x6a>
 8005eba:	4622      	mov	r2, r4
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa f986 	bl	80001d0 <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	f7fa fc64 	bl	8000794 <__aeabi_ddiv>
 8005ecc:	e7e8      	b.n	8005ea0 <__ieee754_sqrt+0x28>
 8005ece:	152a      	asrs	r2, r5, #20
 8005ed0:	d115      	bne.n	8005efe <__ieee754_sqrt+0x86>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e009      	b.n	8005eea <__ieee754_sqrt+0x72>
 8005ed6:	0acb      	lsrs	r3, r1, #11
 8005ed8:	3a15      	subs	r2, #21
 8005eda:	0549      	lsls	r1, r1, #21
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0fa      	beq.n	8005ed6 <__ieee754_sqrt+0x5e>
 8005ee0:	e7f7      	b.n	8005ed2 <__ieee754_sqrt+0x5a>
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	e7fa      	b.n	8005edc <__ieee754_sqrt+0x64>
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	3001      	adds	r0, #1
 8005eea:	02dc      	lsls	r4, r3, #11
 8005eec:	d5fb      	bpl.n	8005ee6 <__ieee754_sqrt+0x6e>
 8005eee:	1e44      	subs	r4, r0, #1
 8005ef0:	1b12      	subs	r2, r2, r4
 8005ef2:	f1c0 0420 	rsb	r4, r0, #32
 8005ef6:	fa21 f404 	lsr.w	r4, r1, r4
 8005efa:	4323      	orrs	r3, r4
 8005efc:	4081      	lsls	r1, r0
 8005efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f02:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f0a:	07d2      	lsls	r2, r2, #31
 8005f0c:	bf5c      	itt	pl
 8005f0e:	005b      	lslpl	r3, r3, #1
 8005f10:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005f14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f18:	bf58      	it	pl
 8005f1a:	0049      	lslpl	r1, r1, #1
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005f22:	107f      	asrs	r7, r7, #1
 8005f24:	0049      	lsls	r1, r1, #1
 8005f26:	2016      	movs	r0, #22
 8005f28:	4632      	mov	r2, r6
 8005f2a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005f2e:	1915      	adds	r5, r2, r4
 8005f30:	429d      	cmp	r5, r3
 8005f32:	bfde      	ittt	le
 8005f34:	192a      	addle	r2, r5, r4
 8005f36:	1b5b      	suble	r3, r3, r5
 8005f38:	1936      	addle	r6, r6, r4
 8005f3a:	0fcd      	lsrs	r5, r1, #31
 8005f3c:	3801      	subs	r0, #1
 8005f3e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005f42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005f46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005f4a:	d1f0      	bne.n	8005f2e <__ieee754_sqrt+0xb6>
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	2420      	movs	r4, #32
 8005f50:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005f54:	4293      	cmp	r3, r2
 8005f56:	eb0c 0e00 	add.w	lr, ip, r0
 8005f5a:	dc02      	bgt.n	8005f62 <__ieee754_sqrt+0xea>
 8005f5c:	d113      	bne.n	8005f86 <__ieee754_sqrt+0x10e>
 8005f5e:	458e      	cmp	lr, r1
 8005f60:	d811      	bhi.n	8005f86 <__ieee754_sqrt+0x10e>
 8005f62:	f1be 0f00 	cmp.w	lr, #0
 8005f66:	eb0e 000c 	add.w	r0, lr, ip
 8005f6a:	da3f      	bge.n	8005fec <__ieee754_sqrt+0x174>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	db3d      	blt.n	8005fec <__ieee754_sqrt+0x174>
 8005f70:	f102 0801 	add.w	r8, r2, #1
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	458e      	cmp	lr, r1
 8005f78:	bf88      	it	hi
 8005f7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005f7e:	eba1 010e 	sub.w	r1, r1, lr
 8005f82:	4465      	add	r5, ip
 8005f84:	4642      	mov	r2, r8
 8005f86:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005f8a:	3c01      	subs	r4, #1
 8005f8c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005f90:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005f94:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005f98:	d1dc      	bne.n	8005f54 <__ieee754_sqrt+0xdc>
 8005f9a:	4319      	orrs	r1, r3
 8005f9c:	d01b      	beq.n	8005fd6 <__ieee754_sqrt+0x15e>
 8005f9e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800601c <__ieee754_sqrt+0x1a4>
 8005fa2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006020 <__ieee754_sqrt+0x1a8>
 8005fa6:	e9da 0100 	ldrd	r0, r1, [sl]
 8005faa:	e9db 2300 	ldrd	r2, r3, [fp]
 8005fae:	f7fa f90f 	bl	80001d0 <__aeabi_dsub>
 8005fb2:	e9da 8900 	ldrd	r8, r9, [sl]
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa fd3b 	bl	8000a38 <__aeabi_dcmple>
 8005fc2:	b140      	cbz	r0, 8005fd6 <__ieee754_sqrt+0x15e>
 8005fc4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005fc8:	e9da 0100 	ldrd	r0, r1, [sl]
 8005fcc:	e9db 2300 	ldrd	r2, r3, [fp]
 8005fd0:	d10e      	bne.n	8005ff0 <__ieee754_sqrt+0x178>
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	4625      	mov	r5, r4
 8005fd6:	1073      	asrs	r3, r6, #1
 8005fd8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fdc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8005fe0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8005fe4:	086b      	lsrs	r3, r5, #1
 8005fe6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8005fea:	e759      	b.n	8005ea0 <__ieee754_sqrt+0x28>
 8005fec:	4690      	mov	r8, r2
 8005fee:	e7c1      	b.n	8005f74 <__ieee754_sqrt+0xfc>
 8005ff0:	f7fa f8f0 	bl	80001d4 <__adddf3>
 8005ff4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fd10 	bl	8000a24 <__aeabi_dcmplt>
 8006004:	b120      	cbz	r0, 8006010 <__ieee754_sqrt+0x198>
 8006006:	1cab      	adds	r3, r5, #2
 8006008:	bf08      	it	eq
 800600a:	3601      	addeq	r6, #1
 800600c:	3502      	adds	r5, #2
 800600e:	e7e2      	b.n	8005fd6 <__ieee754_sqrt+0x15e>
 8006010:	1c6b      	adds	r3, r5, #1
 8006012:	f023 0501 	bic.w	r5, r3, #1
 8006016:	e7de      	b.n	8005fd6 <__ieee754_sqrt+0x15e>
 8006018:	7ff00000 	.word	0x7ff00000
 800601c:	080060b0 	.word	0x080060b0
 8006020:	080060a8 	.word	0x080060a8

08006024 <_init>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr

08006030 <_fini>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr

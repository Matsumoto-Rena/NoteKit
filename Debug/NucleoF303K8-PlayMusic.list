
NucleoF303K8-PlayMusic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006294  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08006420  08006420  00007420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069a8  080069a8  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080069a8  080069a8  000079a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b0  080069b0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b0  080069b0  000079b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069b4  080069b4  000079b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080069b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00000534  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000594  20000594  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e281  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dfc  00000000  00000000  00016311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00018110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099d  00000000  00000000  00018d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b626  00000000  00000000  000196fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb5a  00000000  00000000  00034d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4b64  00000000  00000000  0004487d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e93e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039e4  00000000  00000000  000e9424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000ece08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006404 	.word	0x08006404

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08006404 	.word	0x08006404

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b988 	b.w	8000e68 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	468e      	mov	lr, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	4688      	mov	r8, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d962      	bls.n	8000c4c <__udivmoddi4+0xdc>
 8000b86:	fab2 f682 	clz	r6, r2
 8000b8a:	b14e      	cbz	r6, 8000ba0 <__udivmoddi4+0x30>
 8000b8c:	f1c6 0320 	rsb	r3, r6, #32
 8000b90:	fa01 f806 	lsl.w	r8, r1, r6
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	40b7      	lsls	r7, r6
 8000b9a:	ea43 0808 	orr.w	r8, r3, r8
 8000b9e:	40b4      	lsls	r4, r6
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f fc87 	uxth.w	ip, r7
 8000ba8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bac:	0c23      	lsrs	r3, r4, #16
 8000bae:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc4:	f080 80ea 	bcs.w	8000d9c <__udivmoddi4+0x22c>
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f240 80e7 	bls.w	8000d9c <__udivmoddi4+0x22c>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	443b      	add	r3, r7
 8000bd2:	1a9a      	subs	r2, r3, r2
 8000bd4:	b2a3      	uxth	r3, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be6:	459c      	cmp	ip, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x8e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	f080 80d6 	bcs.w	8000da0 <__udivmoddi4+0x230>
 8000bf4:	459c      	cmp	ip, r3
 8000bf6:	f240 80d3 	bls.w	8000da0 <__udivmoddi4+0x230>
 8000bfa:	443b      	add	r3, r7
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c02:	eba3 030c 	sub.w	r3, r3, ip
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11d      	cbz	r5, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40f3      	lsrs	r3, r6
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d905      	bls.n	8000c26 <__udivmoddi4+0xb6>
 8000c1a:	b10d      	cbz	r5, 8000c20 <__udivmoddi4+0xb0>
 8000c1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4608      	mov	r0, r1
 8000c24:	e7f5      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c26:	fab3 f183 	clz	r1, r3
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d146      	bne.n	8000cbc <__udivmoddi4+0x14c>
 8000c2e:	4573      	cmp	r3, lr
 8000c30:	d302      	bcc.n	8000c38 <__udivmoddi4+0xc8>
 8000c32:	4282      	cmp	r2, r0
 8000c34:	f200 8105 	bhi.w	8000e42 <__udivmoddi4+0x2d2>
 8000c38:	1a84      	subs	r4, r0, r2
 8000c3a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	4690      	mov	r8, r2
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d0e5      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c46:	e9c5 4800 	strd	r4, r8, [r5]
 8000c4a:	e7e2      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f000 8090 	beq.w	8000d72 <__udivmoddi4+0x202>
 8000c52:	fab2 f682 	clz	r6, r2
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f040 80a4 	bne.w	8000da4 <__udivmoddi4+0x234>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	0c03      	lsrs	r3, r0, #16
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	b280      	uxth	r0, r0
 8000c66:	b2bc      	uxth	r4, r7
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c76:	fb04 f20c 	mul.w	r2, r4, ip
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x11e>
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0x11c>
 8000c86:	429a      	cmp	r2, r3
 8000c88:	f200 80e0 	bhi.w	8000e4c <__udivmoddi4+0x2dc>
 8000c8c:	46c4      	mov	ip, r8
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c94:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c98:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c9c:	fb02 f404 	mul.w	r4, r2, r4
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x144>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x142>
 8000cac:	429c      	cmp	r4, r3
 8000cae:	f200 80ca 	bhi.w	8000e46 <__udivmoddi4+0x2d6>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	1b1b      	subs	r3, r3, r4
 8000cb6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cba:	e7a5      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cbc:	f1c1 0620 	rsb	r6, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	fa0e f401 	lsl.w	r4, lr, r1
 8000ccc:	fa20 f306 	lsr.w	r3, r0, r6
 8000cd0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd8:	4323      	orrs	r3, r4
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	fa1f fc87 	uxth.w	ip, r7
 8000ce2:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce6:	0c1c      	lsrs	r4, r3, #16
 8000ce8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cf0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x1a0>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d02:	f080 809c 	bcs.w	8000e3e <__udivmoddi4+0x2ce>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f240 8099 	bls.w	8000e3e <__udivmoddi4+0x2ce>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	eba4 040e 	sub.w	r4, r4, lr
 8000d14:	fa1f fe83 	uxth.w	lr, r3
 8000d18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d20:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d24:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1ce>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d32:	f080 8082 	bcs.w	8000e3a <__udivmoddi4+0x2ca>
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d97f      	bls.n	8000e3a <__udivmoddi4+0x2ca>
 8000d3a:	3b02      	subs	r3, #2
 8000d3c:	443c      	add	r4, r7
 8000d3e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d42:	eba4 040c 	sub.w	r4, r4, ip
 8000d46:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d4a:	4564      	cmp	r4, ip
 8000d4c:	4673      	mov	r3, lr
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	d362      	bcc.n	8000e18 <__udivmoddi4+0x2a8>
 8000d52:	d05f      	beq.n	8000e14 <__udivmoddi4+0x2a4>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x1fe>
 8000d56:	ebb8 0203 	subs.w	r2, r8, r3
 8000d5a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d62:	fa22 f301 	lsr.w	r3, r2, r1
 8000d66:	431e      	orrs	r6, r3
 8000d68:	40cc      	lsrs	r4, r1
 8000d6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e74f      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000d72:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d76:	0c01      	lsrs	r1, r0, #16
 8000d78:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d82:	463b      	mov	r3, r7
 8000d84:	4638      	mov	r0, r7
 8000d86:	463c      	mov	r4, r7
 8000d88:	46b8      	mov	r8, r7
 8000d8a:	46be      	mov	lr, r7
 8000d8c:	2620      	movs	r6, #32
 8000d8e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d92:	eba2 0208 	sub.w	r2, r2, r8
 8000d96:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d9a:	e766      	b.n	8000c6a <__udivmoddi4+0xfa>
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	e718      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e72c      	b.n	8000bfe <__udivmoddi4+0x8e>
 8000da4:	f1c6 0220 	rsb	r2, r6, #32
 8000da8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	40b1      	lsls	r1, r6
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dca:	fb08 f904 	mul.w	r9, r8, r4
 8000dce:	40b0      	lsls	r0, r6
 8000dd0:	4589      	cmp	r9, r1
 8000dd2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd6:	b280      	uxth	r0, r0
 8000dd8:	d93e      	bls.n	8000e58 <__udivmoddi4+0x2e8>
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x276>
 8000de2:	4589      	cmp	r9, r1
 8000de4:	d81f      	bhi.n	8000e26 <__udivmoddi4+0x2b6>
 8000de6:	eba1 0109 	sub.w	r1, r1, r9
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fb09 f804 	mul.w	r8, r9, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	b292      	uxth	r2, r2
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	4542      	cmp	r2, r8
 8000dfe:	d229      	bcs.n	8000e54 <__udivmoddi4+0x2e4>
 8000e00:	18ba      	adds	r2, r7, r2
 8000e02:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e06:	d2c4      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e08:	4542      	cmp	r2, r8
 8000e0a:	d2c2      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e0c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e10:	443a      	add	r2, r7
 8000e12:	e7be      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e14:	45f0      	cmp	r8, lr
 8000e16:	d29d      	bcs.n	8000d54 <__udivmoddi4+0x1e4>
 8000e18:	ebbe 0302 	subs.w	r3, lr, r2
 8000e1c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e20:	3801      	subs	r0, #1
 8000e22:	46e1      	mov	r9, ip
 8000e24:	e796      	b.n	8000d54 <__udivmoddi4+0x1e4>
 8000e26:	eba7 0909 	sub.w	r9, r7, r9
 8000e2a:	4449      	add	r1, r9
 8000e2c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e30:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e34:	fb09 f804 	mul.w	r8, r9, r4
 8000e38:	e7db      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e3a:	4673      	mov	r3, lr
 8000e3c:	e77f      	b.n	8000d3e <__udivmoddi4+0x1ce>
 8000e3e:	4650      	mov	r0, sl
 8000e40:	e766      	b.n	8000d10 <__udivmoddi4+0x1a0>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e6fd      	b.n	8000c42 <__udivmoddi4+0xd2>
 8000e46:	443b      	add	r3, r7
 8000e48:	3a02      	subs	r2, #2
 8000e4a:	e733      	b.n	8000cb4 <__udivmoddi4+0x144>
 8000e4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	e71c      	b.n	8000c8e <__udivmoddi4+0x11e>
 8000e54:	4649      	mov	r1, r9
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e58:	eba1 0109 	sub.w	r1, r1, r9
 8000e5c:	46c4      	mov	ip, r8
 8000e5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e62:	fb09 f804 	mul.w	r8, r9, r4
 8000e66:	e7c4      	b.n	8000df2 <__udivmoddi4+0x282>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <NoteKit_TickHandler>:
 * @note   この関数は、`SysTick_Handler` などのタイマ割り込みハンドラから、
 * @note   定期的に（通常は1msごと）呼び出される必要があります。
 * @param  None
 * @retval None
 */
void NoteKit_TickHandler(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000e72:	f001 f975 	bl	8002160 <HAL_GetTick>
 8000e76:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < num_buzzers; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	e0a5      	b.n	8000fca <NoteKit_TickHandler+0x15e>
        // 演奏中で、かつ終了時刻を過ぎていたら
        if (buzzer[i].is_playing && ((int32_t)(current_time - buzzer[i].end_time_ms) >= 0)) {
 8000e7e:	4959      	ldr	r1, [pc, #356]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8096 	beq.w	8000fc4 <NoteKit_TickHandler+0x158>
 8000e98:	4952      	ldr	r1, [pc, #328]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f2c0 8088 	blt.w	8000fc4 <NoteKit_TickHandler+0x158>
            // 音を止める
            __HAL_TIM_SET_COMPARE(buzzer[i].tim_handle, buzzer[i].tim_channel, 0);
 8000eb4:	494b      	ldr	r1, [pc, #300]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10b      	bne.n	8000ee2 <NoteKit_TickHandler+0x76>
 8000eca:	4946      	ldr	r1, [pc, #280]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ee0:	e066      	b.n	8000fb0 <NoteKit_TickHandler+0x144>
 8000ee2:	4940      	ldr	r1, [pc, #256]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d10b      	bne.n	8000f10 <NoteKit_TickHandler+0xa4>
 8000ef8:	493a      	ldr	r1, [pc, #232]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f0e:	e04f      	b.n	8000fb0 <NoteKit_TickHandler+0x144>
 8000f10:	4934      	ldr	r1, [pc, #208]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d10b      	bne.n	8000f3e <NoteKit_TickHandler+0xd2>
 8000f26:	492f      	ldr	r1, [pc, #188]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f3c:	e038      	b.n	8000fb0 <NoteKit_TickHandler+0x144>
 8000f3e:	4929      	ldr	r1, [pc, #164]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d10b      	bne.n	8000f6c <NoteKit_TickHandler+0x100>
 8000f54:	4923      	ldr	r1, [pc, #140]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6a:	e021      	b.n	8000fb0 <NoteKit_TickHandler+0x144>
 8000f6c:	491d      	ldr	r1, [pc, #116]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d10b      	bne.n	8000f9a <NoteKit_TickHandler+0x12e>
 8000f82:	4918      	ldr	r1, [pc, #96]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2300      	movs	r3, #0
 8000f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f98:	e00a      	b.n	8000fb0 <NoteKit_TickHandler+0x144>
 8000f9a:	4912      	ldr	r1, [pc, #72]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2300      	movs	r3, #0
 8000fae:	65d3      	str	r3, [r2, #92]	@ 0x5c
            // 演奏中フラグを倒す
            buzzer[i].is_playing = false;
 8000fb0:	490c      	ldr	r1, [pc, #48]	@ (8000fe4 <NoteKit_TickHandler+0x178>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	330c      	adds	r3, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_buzzers; i++) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <NoteKit_TickHandler+0x17c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	f6ff af53 	blt.w	8000e7e <NoteKit_TickHandler+0x12>
        }
    }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001cc 	.word	0x200001cc
 8000fe8:	20000334 	.word	0x20000334

08000fec <to_midi_index>:
 * @note   C-1 を MIDIノート番号 0 とするマッピングを使用します。
 * @param  pc: PitchClass の enum 値 (例: PITCH_C, PITCH_CS)
 * @param  real_octave: 実際のオクターブ番号 (例: C4 を計算したい場合は 4)
 * @retval int: 計算されたMIDIノート番号 (例: C4 = 60, A4 = 69)
 */
int to_midi_index(PitchClass pc, int real_octave) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
    // C-1がMIDIノート番号0になるマッピング
    return (real_octave + 1) * 12 + pc;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	461a      	mov	r2, r3
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4413      	add	r3, r2
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <Set_Frequences>:

/*
 *
 */
void Set_Frequences() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0
    // 基準音の定義
    const double A4_FREQUENCY = 440.0;
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <Set_Frequences+0xc0>)
 8001024:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    const int A4_MIDI_NOTE = to_midi_index(PITCH_A, 4); // 69になる
 8001028:	2104      	movs	r1, #4
 800102a:	2009      	movs	r0, #9
 800102c:	f7ff ffde 	bl	8000fec <to_midi_index>
 8001030:	6278      	str	r0, [r7, #36]	@ 0x24

    const double SEMITONE_RATIO = pow(2.0, 1.0 / 12.0);
 8001032:	a327      	add	r3, pc, #156	@ (adr r3, 80010d0 <Set_Frequences+0xb8>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (int i = 0; i < NUM_OCTAVES; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001040:	e03d      	b.n	80010be <Set_Frequences+0xa6>

        // `i` (0,1,2,3,4...) を実際のオクターブ番号 (1,2,3,4,5...) に変換
        int real_octave = i + 1;
 8001042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]

        for (int pitch = 0; pitch < PITCH_COUNT; pitch++) {
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
 800104c:	e031      	b.n	80010b2 <Set_Frequences+0x9a>

            // to_midi_indexには変換後の「実際のオクターブ番号」を渡す
            int current_midi_note = to_midi_index((PitchClass)pitch, real_octave);
 800104e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001050:	b2db      	uxtb	r3, r3
 8001052:	6979      	ldr	r1, [r7, #20]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffc9 	bl	8000fec <to_midi_index>
 800105a:	6138      	str	r0, [r7, #16]

            int distance_from_a4 = current_midi_note - A4_MIDI_NOTE;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	60fb      	str	r3, [r7, #12]

            double frequency = A4_FREQUENCY * pow(SEMITONE_RATIO, distance_from_a4);
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fa01 	bl	800046c <__aeabi_i2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	ec43 2b11 	vmov	d1, r2, r3
 8001072:	ed97 0b06 	vldr	d0, [r7, #24]
 8001076:	f004 fa65 	bl	8005544 <pow>
 800107a:	ec53 2b10 	vmov	r2, r3, d0
 800107e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001082:	f7ff fa5d 	bl	8000540 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9c7 2300 	strd	r2, r3, [r7]

            // 重要：配列のインデックスには、ループ変数 `i` (0..4) を使う
            frequences[pitch][i] = (float)frequency;
 800108e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001092:	f7ff fd05 	bl	8000aa0 <__aeabi_d2f>
 8001096:	4601      	mov	r1, r0
 8001098:	4810      	ldr	r0, [pc, #64]	@ (80010dc <Set_Frequences+0xc4>)
 800109a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4403      	add	r3, r0
 80010aa:	6019      	str	r1, [r3, #0]
        for (int pitch = 0; pitch < PITCH_COUNT; pitch++) {
 80010ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ae:	3301      	adds	r3, #1
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80010b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b4:	2b0b      	cmp	r3, #11
 80010b6:	ddca      	ble.n	800104e <Set_Frequences+0x36>
    for (int i = 0; i < NUM_OCTAVES; i++) {
 80010b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ba:	3301      	adds	r3, #1
 80010bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80010be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c0:	2b06      	cmp	r3, #6
 80010c2:	ddbe      	ble.n	8001042 <Set_Frequences+0x2a>
        }
    }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3738      	adds	r7, #56	@ 0x38
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	92d97963 	.word	0x92d97963
 80010d4:	3ff0f38f 	.word	0x3ff0f38f
 80010d8:	407b8000 	.word	0x407b8000
 80010dc:	2000007c 	.word	0x2000007c

080010e0 <Set_Tempo>:

/*
 *
 */
void Set_Tempo(uint8_t bpm) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	current_bpm = bpm;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <Set_Tempo+0x20>)
 80010f0:	801a      	strh	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000

08001104 <NoteKit_Init>:

void NoteKit_Init() {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	Set_Frequences();
 8001108:	f7ff ff86 	bl	8001018 <Set_Frequences>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <Set_Buzzer>:

/*
 *
 */
void Set_Buzzer(uint8_t buzzer_id, uint8_t tim_clock_MHz, TIM_HandleTypeDef* htim, uint32_t tim_channel) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	460b      	mov	r3, r1
 8001120:	73bb      	strb	r3, [r7, #14]

	HAL_TIM_PWM_Start(htim, tim_channel);
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f002 fe7b 	bl	8003e20 <HAL_TIM_PWM_Start>
	buzzer[buzzer_id].tim_clock_MHz = tim_clock_MHz;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	7bb9      	ldrb	r1, [r7, #14]
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <Set_Buzzer+0x68>)
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4403      	add	r3, r0
 800113a:	3308      	adds	r3, #8
 800113c:	6019      	str	r1, [r3, #0]
	buzzer[buzzer_id].tim_handle = htim;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	490d      	ldr	r1, [pc, #52]	@ (8001178 <Set_Buzzer+0x68>)
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	601a      	str	r2, [r3, #0]
	buzzer[buzzer_id].tim_channel = tim_channel;
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	4909      	ldr	r1, [pc, #36]	@ (8001178 <Set_Buzzer+0x68>)
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3304      	adds	r3, #4
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	601a      	str	r2, [r3, #0]
	num_buzzers++;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <Set_Buzzer+0x6c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <Set_Buzzer+0x6c>)
 800116e:	701a      	strb	r2, [r3, #0]

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200001cc 	.word	0x200001cc
 800117c:	20000334 	.word	0x20000334

08001180 <NoteKit_NoteOn>:
 * @param channel_id   チャンネル番号 (0 ~ NUM_BUZZERS-1)
 * @param frequency_hz 周波数 (Hz)。0を指定すると音を停止します。
 * @param duration_ms  鳴らす時間 (ミリ秒)。0を指定すると手動で停止するまで鳴らし続けます。
 */
void NoteKit_NoteOn(uint8_t channel_id, uint32_t frequency_hz, uint32_t duration_ms)
{
 8001180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001184:	b096      	sub	sp, #88	@ 0x58
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	6339      	str	r1, [r7, #48]	@ 0x30
 800118c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800118e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    // 無効なチャンネルIDなら何もしない
    if (channel_id >= num_buzzers) {
 8001192:	4bc0      	ldr	r3, [pc, #768]	@ (8001494 <NoteKit_NoteOn+0x314>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800119a:	4293      	cmp	r3, r2
 800119c:	f080 820c 	bcs.w	80015b8 <NoteKit_NoteOn+0x438>
        return;
    }

    if (frequency_hz == 0) {
 80011a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 80a4 	bne.w	80012f0 <NoteKit_NoteOn+0x170>
        // CCRを0にしてPWM出力を無音化
        __HAL_TIM_SET_COMPARE(buzzer[channel_id].tim_handle, buzzer[channel_id].tim_channel, 0);
 80011a8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80011ac:	49ba      	ldr	r1, [pc, #744]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3304      	adds	r3, #4
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10c      	bne.n	80011da <NoteKit_NoteOn+0x5a>
 80011c0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80011c4:	49b4      	ldr	r1, [pc, #720]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011d8:	e06f      	b.n	80012ba <NoteKit_NoteOn+0x13a>
 80011da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80011de:	49ae      	ldr	r1, [pc, #696]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3304      	adds	r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d10c      	bne.n	800120c <NoteKit_NoteOn+0x8c>
 80011f2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80011f6:	49a8      	ldr	r1, [pc, #672]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	2300      	movs	r3, #0
 8001208:	6393      	str	r3, [r2, #56]	@ 0x38
 800120a:	e056      	b.n	80012ba <NoteKit_NoteOn+0x13a>
 800120c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001210:	49a1      	ldr	r1, [pc, #644]	@ (8001498 <NoteKit_NoteOn+0x318>)
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	3304      	adds	r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b08      	cmp	r3, #8
 8001222:	d10c      	bne.n	800123e <NoteKit_NoteOn+0xbe>
 8001224:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001228:	499b      	ldr	r1, [pc, #620]	@ (8001498 <NoteKit_NoteOn+0x318>)
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2300      	movs	r3, #0
 800123a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800123c:	e03d      	b.n	80012ba <NoteKit_NoteOn+0x13a>
 800123e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001242:	4995      	ldr	r1, [pc, #596]	@ (8001498 <NoteKit_NoteOn+0x318>)
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	3304      	adds	r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d10c      	bne.n	8001270 <NoteKit_NoteOn+0xf0>
 8001256:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800125a:	498f      	ldr	r1, [pc, #572]	@ (8001498 <NoteKit_NoteOn+0x318>)
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	e024      	b.n	80012ba <NoteKit_NoteOn+0x13a>
 8001270:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001274:	4988      	ldr	r1, [pc, #544]	@ (8001498 <NoteKit_NoteOn+0x318>)
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b10      	cmp	r3, #16
 8001286:	d10c      	bne.n	80012a2 <NoteKit_NoteOn+0x122>
 8001288:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800128c:	4982      	ldr	r1, [pc, #520]	@ (8001498 <NoteKit_NoteOn+0x318>)
 800128e:	4613      	mov	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a0:	e00b      	b.n	80012ba <NoteKit_NoteOn+0x13a>
 80012a2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012a6:	497c      	ldr	r1, [pc, #496]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
        // is_playing は true にして、休符の長さだけ待つようにする
        buzzer[channel_id].is_playing = true;
 80012ba:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012be:	4976      	ldr	r1, [pc, #472]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	330c      	adds	r3, #12
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
        buzzer[channel_id].end_time_ms = HAL_GetTick() + duration_ms;
 80012d0:	f000 ff46 	bl	8002160 <HAL_GetTick>
 80012d4:	4601      	mov	r1, r0
 80012d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012dc:	4419      	add	r1, r3
 80012de:	486e      	ldr	r0, [pc, #440]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4403      	add	r3, r0
 80012ea:	3310      	adds	r3, #16
 80012ec:	6019      	str	r1, [r3, #0]
        return; // 音を鳴らす処理は行わない
 80012ee:	e164      	b.n	80015ba <NoteKit_NoteOn+0x43a>
    }

    // --- タイマのレジスタ値を計算 ---

    // 1. タイマのクロック周波数 (Hz) を64ビットで計算
    uint64_t timer_freq_hz = (uint64_t)buzzer[channel_id].tim_clock_MHz * 1000000;
 80012f0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012f4:	4968      	ldr	r1, [pc, #416]	@ (8001498 <NoteKit_NoteOn+0x318>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	3308      	adds	r3, #8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	469a      	mov	sl, r3
 8001308:	4693      	mov	fp, r2
 800130a:	4652      	mov	r2, sl
 800130c:	465b      	mov	r3, fp
 800130e:	f04f 0000 	mov.w	r0, #0
 8001312:	f04f 0100 	mov.w	r1, #0
 8001316:	0159      	lsls	r1, r3, #5
 8001318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800131c:	0150      	lsls	r0, r2, #5
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	ebb2 040a 	subs.w	r4, r2, sl
 8001326:	eb63 050b 	sbc.w	r5, r3, fp
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	026b      	lsls	r3, r5, #9
 8001334:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001338:	0262      	lsls	r2, r4, #9
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	eb14 080a 	adds.w	r8, r4, sl
 8001342:	eb45 090b 	adc.w	r9, r5, fp
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001352:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001356:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800135a:	ebb2 0108 	subs.w	r1, r2, r8
 800135e:	6139      	str	r1, [r7, #16]
 8001360:	eb63 0309 	sbc.w	r3, r3, r9
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800136a:	460b      	mov	r3, r1
 800136c:	eb13 030a 	adds.w	r3, r3, sl
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	eb43 030b 	adc.w	r3, r3, fp
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800137e:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48

    // 2. 現在のプリスケーラ値を取得
    uint32_t prescaler = (buzzer[channel_id].tim_handle)->Init.Prescaler;
 8001382:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001386:	4944      	ldr	r1, [pc, #272]	@ (8001498 <NoteKit_NoteOn+0x318>)
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	647b      	str	r3, [r7, #68]	@ 0x44

    // 3. ARR（周期）の値を64ビットで計算
    // (timer_freq_hz / (prescaler + 1)) が、カウンタが1秒間に数える数
    uint64_t arr_calc = (timer_freq_hz / (prescaler + 1) / frequency_hz) - 1;
 8001398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800139a:	3301      	adds	r3, #1
 800139c:	2200      	movs	r2, #0
 800139e:	623b      	str	r3, [r7, #32]
 80013a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80013a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80013aa:	f7ff fbc9 	bl	8000b40 <__aeabi_uldivmod>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b8:	2200      	movs	r2, #0
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	61fa      	str	r2, [r7, #28]
 80013be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c2:	f7ff fbbd 	bl	8000b40 <__aeabi_uldivmod>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	1e51      	subs	r1, r2, #1
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	f143 33ff 	adc.w	r3, r3, #4294967295
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

    // 4. 計算結果がタイマの上限（多くは16ビット=65535）を超えないようにクリップ
    if (arr_calc > 65535) {
 80013dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013e0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80013e4:	f173 0300 	sbcs.w	r3, r3, #0
 80013e8:	d305      	bcc.n	80013f6 <NoteKit_NoteOn+0x276>
        arr_calc = 65535;
 80013ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    }
    uint32_t arr_value = (uint32_t)arr_calc;
 80013f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013f8:	643b      	str	r3, [r7, #64]	@ 0x40

    // 5. CCR（デューティ比50%）の値を計算
    uint32_t pulse_value = arr_value / 2;
 80013fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // --- ハードウェアと状態を更新 ---

    // 6. 計算した値をタイマのレジスタに設定
    __HAL_TIM_SET_AUTORELOAD(buzzer[channel_id].tim_handle, arr_value);
 8001400:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001404:	4924      	ldr	r1, [pc, #144]	@ (8001498 <NoteKit_NoteOn+0x318>)
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001418:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800141c:	491e      	ldr	r1, [pc, #120]	@ (8001498 <NoteKit_NoteOn+0x318>)
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800142c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(buzzer[channel_id].tim_handle, buzzer[channel_id].tim_channel, pulse_value);
 800142e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001432:	4919      	ldr	r1, [pc, #100]	@ (8001498 <NoteKit_NoteOn+0x318>)
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	3304      	adds	r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <NoteKit_NoteOn+0x2e0>
 8001446:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800144a:	4913      	ldr	r1, [pc, #76]	@ (8001498 <NoteKit_NoteOn+0x318>)
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800145c:	635a      	str	r2, [r3, #52]	@ 0x34
 800145e:	e074      	b.n	800154a <NoteKit_NoteOn+0x3ca>
 8001460:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001464:	490c      	ldr	r1, [pc, #48]	@ (8001498 <NoteKit_NoteOn+0x318>)
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3304      	adds	r3, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d111      	bne.n	800149c <NoteKit_NoteOn+0x31c>
 8001478:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800147c:	4906      	ldr	r1, [pc, #24]	@ (8001498 <NoteKit_NoteOn+0x318>)
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800148e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001490:	e05b      	b.n	800154a <NoteKit_NoteOn+0x3ca>
 8001492:	bf00      	nop
 8001494:	20000334 	.word	0x20000334
 8001498:	200001cc 	.word	0x200001cc
 800149c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014a0:	4948      	ldr	r1, [pc, #288]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3304      	adds	r3, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d10c      	bne.n	80014ce <NoteKit_NoteOn+0x34e>
 80014b4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014b8:	4942      	ldr	r1, [pc, #264]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014cc:	e03d      	b.n	800154a <NoteKit_NoteOn+0x3ca>
 80014ce:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014d2:	493c      	ldr	r1, [pc, #240]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3304      	adds	r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d10c      	bne.n	8001500 <NoteKit_NoteOn+0x380>
 80014e6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80014ea:	4936      	ldr	r1, [pc, #216]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	e024      	b.n	800154a <NoteKit_NoteOn+0x3ca>
 8001500:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001504:	492f      	ldr	r1, [pc, #188]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3304      	adds	r3, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b10      	cmp	r3, #16
 8001516:	d10c      	bne.n	8001532 <NoteKit_NoteOn+0x3b2>
 8001518:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800151c:	4929      	ldr	r1, [pc, #164]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800152e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001530:	e00b      	b.n	800154a <NoteKit_NoteOn+0x3ca>
 8001532:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001536:	4923      	ldr	r1, [pc, #140]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001548:	65d3      	str	r3, [r2, #92]	@ 0x5c

    HAL_TIM_GenerateEvent(buzzer[channel_id].tim_handle, TIM_EVENTSOURCE_UPDATE);
 800154a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800154e:	491d      	ldr	r1, [pc, #116]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fe5e 	bl	8004220 <HAL_TIM_GenerateEvent>
//        // ...テストとして、強制的に20msに書き換える
//    	duration_ms = 20;
//    }

    // 7. 演奏状態を設定
    if (duration_ms > 0) {
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01a      	beq.n	80015a0 <NoteKit_NoteOn+0x420>
        // is_playingフラグを立てる（TickHandlerが監視を開始する）
        buzzer[channel_id].is_playing = true;
 800156a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800156e:	4915      	ldr	r1, [pc, #84]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	330c      	adds	r3, #12
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
        // 「現在の時刻 + 音の長さ」で終了時刻を計算して保存
        buzzer[channel_id].end_time_ms = HAL_GetTick() + duration_ms;
 8001580:	f000 fdee 	bl	8002160 <HAL_GetTick>
 8001584:	4601      	mov	r1, r0
 8001586:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800158a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158c:	4419      	add	r1, r3
 800158e:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4403      	add	r3, r0
 800159a:	3310      	adds	r3, #16
 800159c:	6019      	str	r1, [r3, #0]
 800159e:	e00c      	b.n	80015ba <NoteKit_NoteOn+0x43a>
    } else {
        // duration_msが0の場合は無限再生
        // is_playingはfalseのままなので、TickHandlerは自動で止めない
        buzzer[channel_id].is_playing = false;
 80015a0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80015a4:	4907      	ldr	r1, [pc, #28]	@ (80015c4 <NoteKit_NoteOn+0x444>)
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	330c      	adds	r3, #12
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e000      	b.n	80015ba <NoteKit_NoteOn+0x43a>
        return;
 80015b8:	bf00      	nop
    }
}
 80015ba:	3758      	adds	r7, #88	@ 0x58
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015c2:	bf00      	nop
 80015c4:	200001cc 	.word	0x200001cc

080015c8 <NoteKit_SetPart>:
}

/**
 * @brief 指定したチャンネルに演奏するパート（楽譜）を設定します。
 */
void NoteKit_SetPart(uint8_t channel_id, const ScoreNote* score, int length, bool loop) {
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	4613      	mov	r3, r2
 80015da:	73bb      	strb	r3, [r7, #14]
    if (channel_id >= num_buzzers) return;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <NoteKit_SetPart+0x90>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d232      	bcs.n	800164c <NoteKit_SetPart+0x84>

    buzzer[channel_id].assigned_score = score;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	491c      	ldr	r1, [pc, #112]	@ (800165c <NoteKit_SetPart+0x94>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3314      	adds	r3, #20
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	601a      	str	r2, [r3, #0]
    buzzer[channel_id].score_length = length;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	4917      	ldr	r1, [pc, #92]	@ (800165c <NoteKit_SetPart+0x94>)
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3318      	adds	r3, #24
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
    buzzer[channel_id].score_index = 0; // 再生位置を先頭にリセット
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	4912      	ldr	r1, [pc, #72]	@ (800165c <NoteKit_SetPart+0x94>)
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	331c      	adds	r3, #28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
    buzzer[channel_id].part_is_active = true;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	490d      	ldr	r1, [pc, #52]	@ (800165c <NoteKit_SetPart+0x94>)
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3320      	adds	r3, #32
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
    buzzer[channel_id].loop = loop;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	4908      	ldr	r1, [pc, #32]	@ (800165c <NoteKit_SetPart+0x94>)
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	3321      	adds	r3, #33	@ 0x21
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e000      	b.n	800164e <NoteKit_SetPart+0x86>
    if (channel_id >= num_buzzers) return;
 800164c:	bf00      	nop
}
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	20000334 	.word	0x20000334
 800165c:	200001cc 	.word	0x200001cc

08001660 <get_duration_ms>:
/**
 * @brief 長さの種類(Duration enum)から、現在のBPMに基づいた具体的な時間(ms)を計算して返す
 * @param type 長さの種類 (例: DURATION_QUARTER)
 * @return 計算された音の長さ (ミリ秒)
 */
uint32_t get_duration_ms(Duration type) {
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
    // 基準となる4分音符の長さを計算 (浮動小数点数で精度を確保)
    float quarter_note_ms = 60000.0f / current_bpm;
 800166a:	4b56      	ldr	r3, [pc, #344]	@ (80017c4 <get_duration_ms+0x164>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001676:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80017c8 <get_duration_ms+0x168>
 800167a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167e:	edc7 7a03 	vstr	s15, [r7, #12]
    float duration_ms = 0.0f;
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

    switch (type) {
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b0a      	cmp	r3, #10
 800168c:	d87b      	bhi.n	8001786 <get_duration_ms+0x126>
 800168e:	a201      	add	r2, pc, #4	@ (adr r2, 8001694 <get_duration_ms+0x34>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016c1 	.word	0x080016c1
 8001698:	080016d3 	.word	0x080016d3
 800169c:	080016e1 	.word	0x080016e1
 80016a0:	080016e7 	.word	0x080016e7
 80016a4:	080016f9 	.word	0x080016f9
 80016a8:	0800170b 	.word	0x0800170b
 80016ac:	0800171d 	.word	0x0800171d
 80016b0:	08001733 	.word	0x08001733
 80016b4:	08001745 	.word	0x08001745
 80016b8:	0800175f 	.word	0x0800175f
 80016bc:	08001775 	.word	0x08001775
        // 基本音符
        case DURATION_WHOLE:         duration_ms = quarter_note_ms * 4.0f; break;
 80016c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	edc7 7a05 	vstr	s15, [r7, #20]
 80016d0:	e05d      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_HALF:          duration_ms = quarter_note_ms * 2.0f; break;
 80016d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016da:	edc7 7a05 	vstr	s15, [r7, #20]
 80016de:	e056      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_QUARTER:       duration_ms = quarter_note_ms;        break;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e053      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_EIGHTH:        duration_ms = quarter_note_ms / 2.0f; break;
 80016e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f2:	edc7 7a05 	vstr	s15, [r7, #20]
 80016f6:	e04a      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_SIXTEENTH:     duration_ms = quarter_note_ms / 4.0f; break;
 80016f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016fc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001704:	edc7 7a05 	vstr	s15, [r7, #20]
 8001708:	e041      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_THIRTY_SECOND: duration_ms = quarter_note_ms / 8.0f; break;
 800170a:	ed97 7a03 	vldr	s14, [r7, #12]
 800170e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001716:	edc7 7a05 	vstr	s15, [r7, #20]
 800171a:	e038      	b.n	800178e <get_duration_ms+0x12e>

        // 付点音符 (元の長さの1.5倍)
        case DURATION_DOTTED_HALF:    duration_ms = (quarter_note_ms * 2.0f) * 1.5f; break;
 800171c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001720:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001724:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001730:	e02d      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_DOTTED_QUARTER: duration_ms = quarter_note_ms * 1.5f;          break;
 8001732:	edd7 7a03 	vldr	s15, [r7, #12]
 8001736:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001742:	e024      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_DOTTED_EIGHTH:  duration_ms = (quarter_note_ms / 2.0f) * 1.5f; break;
 8001744:	ed97 7a03 	vldr	s14, [r7, #12]
 8001748:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800174c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001750:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001758:	edc7 7a05 	vstr	s15, [r7, #20]
 800175c:	e017      	b.n	800178e <get_duration_ms+0x12e>

        // 三連符
        case DURATION_QUARTER_TRIPLET: duration_ms = (quarter_note_ms * 2.0f) / 3.0f; break;
 800175e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001762:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001766:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800176a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001772:	e00c      	b.n	800178e <get_duration_ms+0x12e>
        case DURATION_EIGHTH_TRIPLET:  duration_ms = quarter_note_ms / 3.0f;          break;
 8001774:	ed97 7a03 	vldr	s14, [r7, #12]
 8001778:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800177c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001780:	edc7 7a05 	vstr	s15, [r7, #20]
 8001784:	e003      	b.n	800178e <get_duration_ms+0x12e>

        default: duration_ms = 0.0f; break; // 未知の型の場合は0を返す
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	bf00      	nop
    }

    uint32_t rounded_duration_ms = (uint32_t)duration_ms;
 800178e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001796:	ee17 3a90 	vmov	r3, s15
 800179a:	613b      	str	r3, [r7, #16]

	if (rounded_duration_ms == 0 && duration_ms > 0) {
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <get_duration_ms+0x154>
 80017a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	dd01      	ble.n	80017b4 <get_duration_ms+0x154>
		rounded_duration_ms = MINIMUM_AUDIBLE_MS;
 80017b0:	230a      	movs	r3, #10
 80017b2:	613b      	str	r3, [r7, #16]
	}

	return rounded_duration_ms;
 80017b4:	693b      	ldr	r3, [r7, #16]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000
 80017c8:	476a6000 	.word	0x476a6000

080017cc <NoteKit_SequencerUpdate>:

/**
 * @brief 音楽シーケンサーを1ステップ進めます。mainのwhile(1)から呼び出します。
 */
void NoteKit_SequencerUpdate(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
    // 全てのチャンネル（ブザー）をチェック
    for (int i = 0; i < num_buzzers; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e09f      	b.n	8001918 <NoteKit_SequencerUpdate+0x14c>
        // このチャンネルが有効で、かつ演奏を終えている（次の音を鳴らす準備ができている）場合
        if (buzzer[i].part_is_active && !buzzer[i].is_playing) {
 80017d8:	4955      	ldr	r1, [pc, #340]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3320      	adds	r3, #32
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8091 	beq.w	8001912 <NoteKit_SequencerUpdate+0x146>
 80017f0:	494f      	ldr	r1, [pc, #316]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	330c      	adds	r3, #12
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8081 	beq.w	8001912 <NoteKit_SequencerUpdate+0x146>

            // このチャンネルの楽譜の、次の音へ進む
            if (buzzer[i].score_index < buzzer[i].score_length) {
 8001810:	4947      	ldr	r1, [pc, #284]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	331c      	adds	r3, #28
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	4843      	ldr	r0, [pc, #268]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	3318      	adds	r3, #24
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4299      	cmp	r1, r3
 8001836:	da4c      	bge.n	80018d2 <NoteKit_SequencerUpdate+0x106>
                // これから鳴らす音の情報を、このチャンネル専用の楽譜から取得
                const ScoreNote* next_note = &buzzer[i].assigned_score[buzzer[i].score_index];
 8001838:	493d      	ldr	r1, [pc, #244]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	3314      	adds	r3, #20
 8001848:	6819      	ldr	r1, [r3, #0]
 800184a:	4839      	ldr	r0, [pc, #228]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4403      	add	r3, r0
 8001858:	331c      	adds	r3, #28
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	440b      	add	r3, r1
 8001866:	60bb      	str	r3, [r7, #8]

                // pitchとoctaveから周波数(Hz)を周波数テーブルで引く
                uint32_t frequency_hz = (uint32_t)frequences[next_note->pitch][next_note->octave];
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	4618      	mov	r0, r3
 8001874:	4a2f      	ldr	r2, [pc, #188]	@ (8001934 <NoteKit_SequencerUpdate+0x168>)
 8001876:	460b      	mov	r3, r1
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	1a5b      	subs	r3, r3, r1
 800187c:	4403      	add	r3, r0
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	607b      	str	r3, [r7, #4]

				//　duration_typeから長さ(ms)を計算する関数を呼び出す
				uint32_t duration_ms = get_duration_ms(next_note->duration_type);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	789b      	ldrb	r3, [r3, #2]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fee3 	bl	8001660 <get_duration_ms>
 800189a:	6038      	str	r0, [r7, #0]

				// 計算・変換した値を NoteKit_NoteOn に渡す
				NoteKit_NoteOn(i, frequency_hz, duration_ms);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc6b 	bl	8001180 <NoteKit_NoteOn>

                // このチャンネルの再生位置を一つ進める
                buzzer[i].score_index++;
 80018aa:	4921      	ldr	r1, [pc, #132]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	331c      	adds	r3, #28
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1c59      	adds	r1, r3, #1
 80018be:	481c      	ldr	r0, [pc, #112]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4403      	add	r3, r0
 80018cc:	331c      	adds	r3, #28
 80018ce:	6019      	str	r1, [r3, #0]
 80018d0:	e01f      	b.n	8001912 <NoteKit_SequencerUpdate+0x146>
            }
            else if (buzzer[i].loop) {
 80018d2:	4917      	ldr	r1, [pc, #92]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3321      	adds	r3, #33	@ 0x21
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00a      	beq.n	80018fe <NoteKit_SequencerUpdate+0x132>
                // ループ再生なら、再生位置を先頭に戻す
                buzzer[i].score_index = 0;
 80018e8:	4911      	ldr	r1, [pc, #68]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4613      	mov	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	331c      	adds	r3, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e009      	b.n	8001912 <NoteKit_SequencerUpdate+0x146>
            }
            else {
                // ループしないなら、このパートを非アクティブにする
                buzzer[i].part_is_active = false;
 80018fe:	490c      	ldr	r1, [pc, #48]	@ (8001930 <NoteKit_SequencerUpdate+0x164>)
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3320      	adds	r3, #32
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_buzzers; i++) {
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <NoteKit_SequencerUpdate+0x16c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4293      	cmp	r3, r2
 8001922:	f6ff af59 	blt.w	80017d8 <NoteKit_SequencerUpdate+0xc>
            }
        }
    }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200001cc 	.word	0x200001cc
 8001934:	2000007c 	.word	0x2000007c
 8001938:	20000334 	.word	0x20000334

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001940:	f000 fbb4 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001944:	f000 f858 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001948:	f000 fa20 	bl	8001d8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800194c:	f000 f9ee 	bl	8001d2c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001950:	f000 f8a6 	bl	8001aa0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001954:	f000 f968 	bl	8001c28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  NoteKit_Init();
 8001958:	f7ff fbd4 	bl	8001104 <NoteKit_Init>
  Set_Tempo(150);
 800195c:	2096      	movs	r0, #150	@ 0x96
 800195e:	f7ff fbbf 	bl	80010e0 <Set_Tempo>
  Set_Buzzer(0, 8, &htim1, TIM_CHANNEL_1);
 8001962:	2300      	movs	r3, #0
 8001964:	4a1a      	ldr	r2, [pc, #104]	@ (80019d0 <main+0x94>)
 8001966:	2108      	movs	r1, #8
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fbd1 	bl	8001110 <Set_Buzzer>
  Set_Buzzer(1, 8, &htim1, TIM_CHANNEL_2);
 800196e:	2304      	movs	r3, #4
 8001970:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <main+0x94>)
 8001972:	2108      	movs	r1, #8
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fbcb 	bl	8001110 <Set_Buzzer>
  Set_Buzzer(2, 8, &htim3, TIM_CHANNEL_1);
 800197a:	2300      	movs	r3, #0
 800197c:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <main+0x98>)
 800197e:	2108      	movs	r1, #8
 8001980:	2002      	movs	r0, #2
 8001982:	f7ff fbc5 	bl	8001110 <Set_Buzzer>
  Set_Buzzer(3, 8, &htim3, TIM_CHANNEL_2);
 8001986:	2304      	movs	r3, #4
 8001988:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <main+0x98>)
 800198a:	2108      	movs	r1, #8
 800198c:	2003      	movs	r0, #3
 800198e:	f7ff fbbf 	bl	8001110 <Set_Buzzer>
//  Set_Buzzer(4, 8, &htim1, TIM_CHANNEL_3);

  // 各チャンネルに楽譜パートをセット
  NoteKit_SetPart(0, part1_melody, part1_len, true); // チャンネル0はメロディをループ再生
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <main+0x9c>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	4910      	ldr	r1, [pc, #64]	@ (80019dc <main+0xa0>)
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fe14 	bl	80015c8 <NoteKit_SetPart>
  NoteKit_SetPart(1, part2_bass, part2_len, true);  // チャンネル1はベースをループ再生
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <main+0xa4>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	490f      	ldr	r1, [pc, #60]	@ (80019e4 <main+0xa8>)
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff fe0d 	bl	80015c8 <NoteKit_SetPart>
  NoteKit_SetPart(2, part3_bass, part3_len, true);  // チャンネル1はベースをループ再生
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <main+0xac>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2301      	movs	r3, #1
 80019b4:	490d      	ldr	r1, [pc, #52]	@ (80019ec <main+0xb0>)
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff fe06 	bl	80015c8 <NoteKit_SetPart>
  NoteKit_SetPart(3, part4_bass, part4_len, true);  // チャンネル1はベースをループ再生
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <main+0xb4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	490c      	ldr	r1, [pc, #48]	@ (80019f4 <main+0xb8>)
 80019c4:	2003      	movs	r0, #3
 80019c6:	f7ff fdff 	bl	80015c8 <NoteKit_SetPart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NoteKit_SequencerUpdate();
 80019ca:	f7ff feff 	bl	80017cc <NoteKit_SequencerUpdate>
 80019ce:	e7fc      	b.n	80019ca <main+0x8e>
 80019d0:	20000338 	.word	0x20000338
 80019d4:	20000384 	.word	0x20000384
 80019d8:	08006610 	.word	0x08006610
 80019dc:	08006420 	.word	0x08006420
 80019e0:	0800671c 	.word	0x0800671c
 80019e4:	08006614 	.word	0x08006614
 80019e8:	0800685c 	.word	0x0800685c
 80019ec:	08006720 	.word	0x08006720
 80019f0:	08006928 	.word	0x08006928
 80019f4:	08006860 	.word	0x08006860

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b096      	sub	sp, #88	@ 0x58
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a02:	2228      	movs	r2, #40	@ 0x28
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fd69 	bl	80054de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a34:	2310      	movs	r3, #16
 8001a36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fdf1 	bl	8002628 <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a4c:	f000 f9c2 	bl	8001dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fdea 	bl	8003644 <HAL_RCC_ClockConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a76:	f000 f9ad 	bl	8001dd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 ffee 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a92:	f000 f99f 	bl	8001dd4 <Error_Handler>
  }
}
 8001a96:	bf00      	nop
 8001a98:	3758      	adds	r7, #88	@ 0x58
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b09a      	sub	sp, #104	@ 0x68
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	222c      	movs	r2, #44	@ 0x2c
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fcff 	bl	80054de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001ae2:	4a50      	ldr	r2, [pc, #320]	@ (8001c24 <MX_TIM1_Init+0x184>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001af4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b00:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b46      	ldr	r3, [pc, #280]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b0c:	4844      	ldr	r0, [pc, #272]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001b0e:	f002 f8cf 	bl	8003cb0 <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f000 f95c 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b20:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b26:	4619      	mov	r1, r3
 8001b28:	483d      	ldr	r0, [pc, #244]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001b2a:	f002 fba0 	bl	800426e <HAL_TIM_ConfigClockSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b34:	f000 f94e 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b38:	4839      	ldr	r0, [pc, #228]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001b3a:	f002 f910 	bl	8003d5e <HAL_TIM_PWM_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b44:	f000 f946 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4831      	ldr	r0, [pc, #196]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001b5c:	f003 f83a 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b66:	f000 f935 	bl	8001dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6a:	2360      	movs	r3, #96	@ 0x60
 8001b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4824      	ldr	r0, [pc, #144]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001b90:	f002 fa32 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001b9a:	f000 f91b 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481e      	ldr	r0, [pc, #120]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001ba8:	f002 fa26 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001bb2:	f000 f90f 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bba:	2208      	movs	r2, #8
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4818      	ldr	r0, [pc, #96]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001bc0:	f002 fa1a 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001bca:	f000 f903 	bl	8001dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001c04:	f003 f854 	bl	8004cb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001c0e:	f000 f8e1 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c12:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <MX_TIM1_Init+0x180>)
 8001c14:	f000 f93c 	bl	8001e90 <HAL_TIM_MspPostInit>

}
 8001c18:	bf00      	nop
 8001c1a:	3768      	adds	r7, #104	@ 0x68
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000338 	.word	0x20000338
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	@ 0x38
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c5a:	4b32      	ldr	r3, [pc, #200]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c5c:	4a32      	ldr	r2, [pc, #200]	@ (8001d28 <MX_TIM3_Init+0x100>)
 8001c5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001c60:	4b30      	ldr	r3, [pc, #192]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c62:	2207      	movs	r2, #7
 8001c64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b2b      	ldr	r3, [pc, #172]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c80:	4828      	ldr	r0, [pc, #160]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c82:	f002 f815 	bl	8003cb0 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c8c:	f000 f8a2 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4821      	ldr	r0, [pc, #132]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001c9e:	f002 fae6 	bl	800426e <HAL_TIM_ConfigClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ca8:	f000 f894 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cac:	481d      	ldr	r0, [pc, #116]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001cae:	f002 f856 	bl	8003d5e <HAL_TIM_PWM_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001cb8:	f000 f88c 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4816      	ldr	r0, [pc, #88]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001ccc:	f002 ff82 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cd6:	f000 f87d 	bl	8001dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2360      	movs	r3, #96	@ 0x60
 8001cdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001cf2:	f002 f981 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cfc:	f000 f86a 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	2204      	movs	r2, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001d08:	f002 f976 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001d12:	f000 f85f 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d16:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <MX_TIM3_Init+0xfc>)
 8001d18:	f000 f8ba 	bl	8001e90 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3738      	adds	r7, #56	@ 0x38
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000384 	.word	0x20000384
 8001d28:	40000400 	.word	0x40000400

08001d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <MX_USART2_UART_Init+0x5c>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d38:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_USART2_UART_Init+0x58>)
 8001d70:	f003 f816 	bl	8004da0 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d7a:	f000 f82b 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200003d0 	.word	0x200003d0
 8001d88:	40004400 	.word	0x40004400

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_GPIO_Init+0x44>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd0 <MX_GPIO_Init+0x44>)
 8001d98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d9c:	6153      	str	r3, [r2, #20]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_GPIO_Init+0x44>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_GPIO_Init+0x44>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <MX_GPIO_Init+0x44>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	6153      	str	r3, [r2, #20]
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_GPIO_Init+0x44>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <Error_Handler+0x8>

08001de0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <HAL_MspInit+0x44>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	4a0e      	ldr	r2, [pc, #56]	@ (8001e24 <HAL_MspInit+0x44>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6193      	str	r3, [r2, #24]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <HAL_MspInit+0x44>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <HAL_MspInit+0x44>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <HAL_MspInit+0x44>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_MspInit+0x44>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a13      	ldr	r2, [pc, #76]	@ (8001e84 <HAL_TIM_Base_MspInit+0x5c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10c      	bne.n	8001e54 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3a:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <HAL_TIM_Base_MspInit+0x60>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4a12      	ldr	r2, [pc, #72]	@ (8001e88 <HAL_TIM_Base_MspInit+0x60>)
 8001e40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e44:	6193      	str	r3, [r2, #24]
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_TIM_Base_MspInit+0x60>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e52:	e010      	b.n	8001e76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <HAL_TIM_Base_MspInit+0x64>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10b      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_TIM_Base_MspInit+0x60>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <HAL_TIM_Base_MspInit+0x60>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <HAL_TIM_Base_MspInit+0x60>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40000400 	.word	0x40000400

08001e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <HAL_TIM_MspPostInit+0xac>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d11e      	bne.n	8001ef0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <HAL_TIM_MspPostInit+0xb0>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	4a22      	ldr	r2, [pc, #136]	@ (8001f40 <HAL_TIM_MspPostInit+0xb0>)
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ebc:	6153      	str	r3, [r2, #20]
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_TIM_MspPostInit+0xb0>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001eca:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001edc:	2306      	movs	r3, #6
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eea:	f000 fa2b 	bl	8002344 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001eee:	e021      	b.n	8001f34 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <HAL_TIM_MspPostInit+0xb4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d11c      	bne.n	8001f34 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_TIM_MspPostInit+0xb0>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <HAL_TIM_MspPostInit+0xb0>)
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f04:	6153      	str	r3, [r2, #20]
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <HAL_TIM_MspPostInit+0xb0>)
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f12:	2350      	movs	r3, #80	@ 0x50
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f22:	2302      	movs	r3, #2
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f30:	f000 fa08 	bl	8002344 <HAL_GPIO_Init>
}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	@ 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40000400 	.word	0x40000400

08001f48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <HAL_UART_MspInit+0x80>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d129      	bne.n	8001fbe <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <HAL_UART_MspInit+0x84>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a17      	ldr	r2, [pc, #92]	@ (8001fcc <HAL_UART_MspInit+0x84>)
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_UART_MspInit+0x84>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_UART_MspInit+0x84>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <HAL_UART_MspInit+0x84>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	6153      	str	r3, [r2, #20]
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <HAL_UART_MspInit+0x84>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001f9a:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fac:	2307      	movs	r3, #7
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fba:	f000 f9c3 	bl	8002344 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	@ 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <HardFault_Handler+0x4>

08001fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <MemManage_Handler+0x4>

08001fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f000 f887 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  NoteKit_TickHandler();
 800202a:	f7fe ff1f 	bl	8000e6c <NoteKit_TickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002090 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800205c:	f7ff ffea 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LoopForever+0x6>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <LoopForever+0xe>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	@ (80020a4 <LoopForever+0x16>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002086:	f003 fa39 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800208a:	f7ff fc57 	bl	800193c <main>

0800208e <LoopForever>:

LoopForever:
    b LoopForever
 800208e:	e7fe      	b.n	800208e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002090:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800209c:	080069b8 	.word	0x080069b8
  ldr r2, =_sbss
 80020a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80020a4:	20000594 	.word	0x20000594

080020a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC1_2_IRQHandler>
	...

080020ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_Init+0x28>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_Init+0x28>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f90d 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff fe8a 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40022000 	.word	0x40022000

080020d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f917 	bl	800232a <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 f8ed 	bl	80022f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002118:	4a06      	ldr	r2, [pc, #24]	@ (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000004 	.word	0x20000004
 8002130:	2000000c 	.word	0x2000000c
 8002134:	20000008 	.word	0x20000008

08002138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2000000c 	.word	0x2000000c
 800215c:	20000458 	.word	0x20000458

08002160 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;  
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000458 	.word	0x20000458

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	@ (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	@ (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff8e 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff47 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff5c 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff8e 	bl	8002230 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff5d 	bl	80021dc <__NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffb0 	bl	8002298 <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002352:	e14e      	b.n	80025f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8140 	beq.w	80025ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d005      	beq.n	8002384 <HAL_GPIO_Init+0x40>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d130      	bne.n	80023e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ba:	2201      	movs	r2, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 0201 	and.w	r2, r3, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d017      	beq.n	8002422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d123      	bne.n	8002476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	6939      	ldr	r1, [r7, #16]
 8002472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0203 	and.w	r2, r3, #3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 809a 	beq.w	80025ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b8:	4b55      	ldr	r3, [pc, #340]	@ (8002610 <HAL_GPIO_Init+0x2cc>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a54      	ldr	r2, [pc, #336]	@ (8002610 <HAL_GPIO_Init+0x2cc>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <HAL_GPIO_Init+0x2cc>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024d0:	4a50      	ldr	r2, [pc, #320]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	220f      	movs	r2, #15
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024fa:	d013      	beq.n	8002524 <HAL_GPIO_Init+0x1e0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a46      	ldr	r2, [pc, #280]	@ (8002618 <HAL_GPIO_Init+0x2d4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00d      	beq.n	8002520 <HAL_GPIO_Init+0x1dc>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a45      	ldr	r2, [pc, #276]	@ (800261c <HAL_GPIO_Init+0x2d8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <HAL_GPIO_Init+0x1d8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a44      	ldr	r2, [pc, #272]	@ (8002620 <HAL_GPIO_Init+0x2dc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_GPIO_Init+0x1d4>
 8002514:	2303      	movs	r3, #3
 8002516:	e006      	b.n	8002526 <HAL_GPIO_Init+0x1e2>
 8002518:	2305      	movs	r3, #5
 800251a:	e004      	b.n	8002526 <HAL_GPIO_Init+0x1e2>
 800251c:	2302      	movs	r3, #2
 800251e:	e002      	b.n	8002526 <HAL_GPIO_Init+0x1e2>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_GPIO_Init+0x1e2>
 8002524:	2300      	movs	r3, #0
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	f002 0203 	and.w	r2, r2, #3
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	4093      	lsls	r3, r2
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002536:	4937      	ldr	r1, [pc, #220]	@ (8002614 <HAL_GPIO_Init+0x2d0>)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002544:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002568:	4a2e      	ldr	r2, [pc, #184]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800256e:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002592:	4a24      	ldr	r2, [pc, #144]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002598:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025bc:	4a19      	ldr	r2, [pc, #100]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c2:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002624 <HAL_GPIO_Init+0x2e0>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f47f aea9 	bne.w	8002354 <HAL_GPIO_Init+0x10>
  }
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000
 8002618:	48000400 	.word	0x48000400
 800261c:	48000800 	.word	0x48000800
 8002620:	48000c00 	.word	0x48000c00
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800262e:	af00      	add	r7, sp, #0
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002638:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f000 bff4 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002652:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 816d 	beq.w	800293e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002664:	4bb4      	ldr	r3, [pc, #720]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b04      	cmp	r3, #4
 800266e:	d00c      	beq.n	800268a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002670:	4bb1      	ldr	r3, [pc, #708]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d157      	bne.n	800272c <HAL_RCC_OscConfig+0x104>
 800267c:	4bae      	ldr	r3, [pc, #696]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002688:	d150      	bne.n	800272c <HAL_RCC_OscConfig+0x104>
 800268a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800268e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800269e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80026aa:	d802      	bhi.n	80026b2 <HAL_RCC_OscConfig+0x8a>
 80026ac:	4ba2      	ldr	r3, [pc, #648]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0xb6>
 80026b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026b6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80026c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ca:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80026ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80026da:	4b97      	ldr	r3, [pc, #604]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026e2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80026e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026ea:	fa92 f2a2 	rbit	r2, r2
 80026ee:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80026f2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80026f6:	fab2 f282 	clz	r2, r2
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f042 0220 	orr.w	r2, r2, #32
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f002 021f 	and.w	r2, r2, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f202 	lsl.w	r2, r1, r2
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8114 	beq.w	800293c <HAL_RCC_OscConfig+0x314>
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 810b 	bne.w	800293c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f000 bf85 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x124>
 800273e:	4b7e      	ldr	r3, [pc, #504]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7d      	ldr	r2, [pc, #500]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e036      	b.n	80027ba <HAL_RCC_OscConfig+0x192>
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10c      	bne.n	8002776 <HAL_RCC_OscConfig+0x14e>
 800275c:	4b76      	ldr	r3, [pc, #472]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a75      	ldr	r2, [pc, #468]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b73      	ldr	r3, [pc, #460]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a72      	ldr	r2, [pc, #456]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e021      	b.n	80027ba <HAL_RCC_OscConfig+0x192>
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x17a>
 8002788:	4b6b      	ldr	r3, [pc, #428]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6a      	ldr	r2, [pc, #424]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 800278e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b68      	ldr	r3, [pc, #416]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a67      	ldr	r2, [pc, #412]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e00b      	b.n	80027ba <HAL_RCC_OscConfig+0x192>
 80027a2:	4b65      	ldr	r3, [pc, #404]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a64      	ldr	r2, [pc, #400]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b62      	ldr	r3, [pc, #392]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a61      	ldr	r2, [pc, #388]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80027b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	f023 020f 	bic.w	r2, r3, #15
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	495a      	ldr	r1, [pc, #360]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d054      	beq.n	800288e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fcbc 	bl	8002160 <HAL_GetTick>
 80027e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ee:	f7ff fcb7 	bl	8002160 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d902      	bls.n	8002804 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	f000 bf19 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
 8002804:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002808:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002818:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b3f      	cmp	r3, #63	@ 0x3f
 8002824:	d802      	bhi.n	800282c <HAL_RCC_OscConfig+0x204>
 8002826:	4b44      	ldr	r3, [pc, #272]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e015      	b.n	8002858 <HAL_RCC_OscConfig+0x230>
 800282c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002830:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002844:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002848:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002854:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800285c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002860:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800286c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0b0      	beq.n	80027ee <HAL_RCC_OscConfig+0x1c6>
 800288c:	e057      	b.n	800293e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7ff fc67 	bl	8002160 <HAL_GetTick>
 8002892:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff fc62 	bl	8002160 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	@ 0x64
 80028a6:	d902      	bls.n	80028ae <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f000 bec4 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
 80028ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80028c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ce:	d802      	bhi.n	80028d6 <HAL_RCC_OscConfig+0x2ae>
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x2da>
 80028d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028da:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028ee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <HAL_RCC_OscConfig+0x310>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002906:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800290a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002916:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1b0      	bne.n	8002898 <HAL_RCC_OscConfig+0x270>
 8002936:	e002      	b.n	800293e <HAL_RCC_OscConfig+0x316>
 8002938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 816c 	beq.w	8002c2c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002954:	4bcc      	ldr	r3, [pc, #816]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002960:	4bc9      	ldr	r3, [pc, #804]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d16d      	bne.n	8002a48 <HAL_RCC_OscConfig+0x420>
 800296c:	4bc6      	ldr	r3, [pc, #792]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d167      	bne.n	8002a48 <HAL_RCC_OscConfig+0x420>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800298a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b3f      	cmp	r3, #63	@ 0x3f
 8002996:	d802      	bhi.n	800299e <HAL_RCC_OscConfig+0x376>
 8002998:	4bbb      	ldr	r3, [pc, #748]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	e013      	b.n	80029c6 <HAL_RCC_OscConfig+0x39e>
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80029b0:	2302      	movs	r3, #2
 80029b2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80029b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80029c2:	4bb1      	ldr	r3, [pc, #708]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	2202      	movs	r2, #2
 80029c8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80029cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029d0:	fa92 f2a2 	rbit	r2, r2
 80029d4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80029d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f002 021f 	and.w	r2, r2, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3e6>
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d002      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f000 be14 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	21f8      	movs	r1, #248	@ 0xf8
 8002a24:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a2c:	fa91 f1a1 	rbit	r1, r1
 8002a30:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a34:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a38:	fab1 f181 	clz	r1, r1
 8002a3c:	b2c9      	uxtb	r1, r1
 8002a3e:	408b      	lsls	r3, r1
 8002a40:	4991      	ldr	r1, [pc, #580]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e0f1      	b.n	8002c2c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8083 	beq.w	8002b60 <HAL_RCC_OscConfig+0x538>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	2301      	movs	r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff fb6b 	bl	8002160 <HAL_GetTick>
 8002a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a90:	f7ff fb66 	bl	8002160 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d902      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f000 bdc8 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ab8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac4:	d802      	bhi.n	8002acc <HAL_RCC_OscConfig+0x4a4>
 8002ac6:	4b70      	ldr	r3, [pc, #448]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0x4cc>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ae4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002af0:	4b65      	ldr	r3, [pc, #404]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	2202      	movs	r2, #2
 8002af6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002afa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002b06:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0b4      	beq.n	8002a90 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b58      	ldr	r3, [pc, #352]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	21f8      	movs	r1, #248	@ 0xf8
 8002b3c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b44:	fa91 f1a1 	rbit	r1, r1
 8002b48:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b50:	fab1 f181 	clz	r1, r1
 8002b54:	b2c9      	uxtb	r1, r1
 8002b56:	408b      	lsls	r3, r1
 8002b58:	494b      	ldr	r1, [pc, #300]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
 8002b5e:	e065      	b.n	8002c2c <HAL_RCC_OscConfig+0x604>
 8002b60:	2301      	movs	r3, #1
 8002b62:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	461a      	mov	r2, r3
 8002b88:	2300      	movs	r3, #0
 8002b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fae8 	bl	8002160 <HAL_GetTick>
 8002b90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b96:	f7ff fae3 	bl	8002160 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	f000 bd45 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bca:	d802      	bhi.n	8002bd2 <HAL_RCC_OscConfig+0x5aa>
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e013      	b.n	8002bfa <HAL_RCC_OscConfig+0x5d2>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002be4:	2302      	movs	r3, #2
 8002be6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002bea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_OscConfig+0x660>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002c00:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c04:	fa92 f2a2 	rbit	r2, r2
 8002c08:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0220 	orr.w	r2, r2, #32
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1b4      	bne.n	8002b96 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8115 	beq.w	8002e6c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d07e      	beq.n	8002d50 <HAL_RCC_OscConfig+0x728>
 8002c52:	2301      	movs	r3, #1
 8002c54:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	2301      	movs	r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fa70 	bl	8002160 <HAL_GetTick>
 8002c80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c84:	e00f      	b.n	8002ca6 <HAL_RCC_OscConfig+0x67e>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c90:	f7ff fa66 	bl	8002160 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f000 bcc8 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	fa93 f2a3 	rbit	r2, r3
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cfe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d00:	4bb0      	ldr	r3, [pc, #704]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	6019      	str	r1, [r3, #0]
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fa93 f1a3 	rbit	r1, r3
 8002d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d26:	6019      	str	r1, [r3, #0]
  return result;
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f303 	lsl.w	r3, r1, r3
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0a0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x668>
 8002d4e:	e08d      	b.n	8002e6c <HAL_RCC_OscConfig+0x844>
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d72:	601a      	str	r2, [r3, #0]
  return result;
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b90      	ldr	r3, [pc, #576]	@ (8002fc8 <HAL_RCC_OscConfig+0x9a0>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7ff f9e5 	bl	8002160 <HAL_GetTick>
 8002d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7ff f9e0 	bl	8002160 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d902      	bls.n	8002db2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	f000 bc42 	b.w	8003636 <HAL_RCC_OscConfig+0x100e>
 8002db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dba:	2202      	movs	r2, #2
 8002dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dde:	2202      	movs	r2, #2
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e02:	2202      	movs	r2, #2
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1e:	4b69      	ldr	r3, [pc, #420]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	6019      	str	r1, [r3, #0]
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f1a3 	rbit	r1, r3
 8002e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e44:	6019      	str	r1, [r3, #0]
  return result;
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fab3 f383 	clz	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d197      	bne.n	8002d9c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 819e 	beq.w	80031be <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e88:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d116      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	61d3      	str	r3, [r2, #28]
 8002ea0:	4b48      	ldr	r3, [pc, #288]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002eba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b42      	ldr	r3, [pc, #264]	@ (8002fcc <HAL_RCC_OscConfig+0x9a4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b3f      	ldr	r3, [pc, #252]	@ (8002fcc <HAL_RCC_OscConfig+0x9a4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fcc <HAL_RCC_OscConfig+0x9a4>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7ff f941 	bl	8002160 <HAL_GetTick>
 8002ede:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	e009      	b.n	8002ef8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7ff f93c 	bl	8002160 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	@ 0x64
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e39e      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b34      	ldr	r3, [pc, #208]	@ (8002fcc <HAL_RCC_OscConfig+0x9a4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x8fa>
 8002f14:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	e035      	b.n	8002f8e <HAL_RCC_OscConfig+0x966>
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x924>
 8002f32:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a23      	ldr	r2, [pc, #140]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a20      	ldr	r2, [pc, #128]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	e020      	b.n	8002f8e <HAL_RCC_OscConfig+0x966>
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x94e>
 8002f5c:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x966>
 8002f76:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc4 <HAL_RCC_OscConfig+0x99c>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8087 	beq.w	80030ae <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7ff f8de 	bl	8002160 <HAL_GetTick>
 8002fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	e012      	b.n	8002fd0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7ff f8d9 	bl	8002160 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d908      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e339      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	10908120 	.word	0x10908120
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fd8:	2202      	movs	r2, #2
 8002fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fa93 f2a3 	rbit	r2, r3
 8002fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003016:	601a      	str	r2, [r3, #0]
  return result;
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003020:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_RCC_OscConfig+0xa10>
 8003032:	4b98      	ldr	r3, [pc, #608]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	e013      	b.n	8003060 <HAL_RCC_OscConfig+0xa38>
 8003038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003040:	2202      	movs	r2, #2
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003048:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	4b8d      	ldr	r3, [pc, #564]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003064:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003068:	2102      	movs	r1, #2
 800306a:	6011      	str	r1, [r2, #0]
 800306c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003070:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	fa92 f1a2 	rbit	r1, r2
 800307a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800307e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003082:	6011      	str	r1, [r2, #0]
  return result;
 8003084:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003088:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f43f af7f 	beq.w	8002faa <HAL_RCC_OscConfig+0x982>
 80030ac:	e07d      	b.n	80031aa <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7ff f857 	bl	8002160 <HAL_GetTick>
 80030b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7ff f852 	bl	8002160 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e2b2      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
 80030d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030d8:	2202      	movs	r2, #2
 80030da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030fc:	2202      	movs	r2, #2
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003116:	601a      	str	r2, [r3, #0]
  return result;
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003120:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0xb10>
 8003132:	4b58      	ldr	r3, [pc, #352]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	e013      	b.n	8003160 <HAL_RCC_OscConfig+0xb38>
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003140:	2202      	movs	r2, #2
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003148:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003156:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	4b4d      	ldr	r3, [pc, #308]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003164:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003168:	2102      	movs	r1, #2
 800316a:	6011      	str	r1, [r2, #0]
 800316c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003170:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	fa92 f1a2 	rbit	r1, r2
 800317a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800317e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003182:	6011      	str	r1, [r2, #0]
  return result;
 8003184:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003188:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	fab2 f282 	clz	r2, r2
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f002 021f 	and.w	r2, r2, #31
 800319e:	2101      	movs	r1, #1
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d186      	bne.n	80030b8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031aa:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d105      	bne.n	80031be <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b2:	4b38      	ldr	r3, [pc, #224]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4a37      	ldr	r2, [pc, #220]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 80031b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8232 	beq.w	8003634 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d0:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	f000 8201 	beq.w	80035e0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	f040 8157 	bne.w	800349e <HAL_RCC_OscConfig+0xe76>
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003214:	601a      	str	r2, [r3, #0]
  return result;
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800321e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800322a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	461a      	mov	r2, r3
 8003232:	2300      	movs	r3, #0
 8003234:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe ff93 	bl	8002160 <HAL_GetTick>
 800323a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323e:	e009      	b.n	8003254 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe ff8e 	bl	8002160 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1f0      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
 8003254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003258:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800325c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b3f      	cmp	r3, #63	@ 0x3f
 800328c:	d804      	bhi.n	8003298 <HAL_RCC_OscConfig+0xc70>
 800328e:	4b01      	ldr	r3, [pc, #4]	@ (8003294 <HAL_RCC_OscConfig+0xc6c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	e029      	b.n	80032e8 <HAL_RCC_OscConfig+0xcc0>
 8003294:	40021000 	.word	0x40021000
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032aa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f2a3 	rbit	r2, r3
 80032da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	4bc3      	ldr	r3, [pc, #780]	@ (80035f4 <HAL_RCC_OscConfig+0xfcc>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032fa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fa92 f1a2 	rbit	r1, r2
 8003304:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003308:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800330c:	6011      	str	r1, [r2, #0]
  return result;
 800330e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003312:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f002 021f 	and.w	r2, r2, #31
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d185      	bne.n	8003240 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003334:	4baf      	ldr	r3, [pc, #700]	@ (80035f4 <HAL_RCC_OscConfig+0xfcc>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	430b      	orrs	r3, r1
 8003356:	49a7      	ldr	r1, [pc, #668]	@ (80035f4 <HAL_RCC_OscConfig+0xfcc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	fa93 f2a3 	rbit	r2, r3
 8003378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003380:	601a      	str	r2, [r3, #0]
  return result;
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800338a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003396:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	461a      	mov	r2, r3
 800339e:	2301      	movs	r3, #1
 80033a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fedd 	bl	8002160 <HAL_GetTick>
 80033a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033aa:	e009      	b.n	80033c0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fed8 	bl	8002160 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e13a      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033e4:	601a      	str	r2, [r3, #0]
  return result;
 80033e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80033f8:	d802      	bhi.n	8003400 <HAL_RCC_OscConfig+0xdd8>
 80033fa:	4b7e      	ldr	r3, [pc, #504]	@ (80035f4 <HAL_RCC_OscConfig+0xfcc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	e027      	b.n	8003450 <HAL_RCC_OscConfig+0xe28>
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003408:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800340c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f2a3 	rbit	r2, r3
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800342e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	4b69      	ldr	r3, [pc, #420]	@ (80035f4 <HAL_RCC_OscConfig+0xfcc>)
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003454:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003458:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800345c:	6011      	str	r1, [r2, #0]
 800345e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003462:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	fa92 f1a2 	rbit	r1, r2
 800346c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003470:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003474:	6011      	str	r1, [r2, #0]
  return result;
 8003476:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800347a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	fab2 f282 	clz	r2, r2
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	f042 0220 	orr.w	r2, r2, #32
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	f002 021f 	and.w	r2, r2, #31
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f202 	lsl.w	r2, r1, r2
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d087      	beq.n	80033ac <HAL_RCC_OscConfig+0xd84>
 800349c:	e0ca      	b.n	8003634 <HAL_RCC_OscConfig+0x100c>
 800349e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034c2:	601a      	str	r2, [r3, #0]
  return result;
 80034c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	461a      	mov	r2, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fe3c 	bl	8002160 <HAL_GetTick>
 80034e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ec:	e009      	b.n	8003502 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe fe37 	bl	8002160 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e099      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800350a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003526:	601a      	str	r2, [r3, #0]
  return result;
 8003528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003530:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b3f      	cmp	r3, #63	@ 0x3f
 800353a:	d802      	bhi.n	8003542 <HAL_RCC_OscConfig+0xf1a>
 800353c:	4b2d      	ldr	r3, [pc, #180]	@ (80035f4 <HAL_RCC_OscConfig+0xfcc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e027      	b.n	8003592 <HAL_RCC_OscConfig+0xf6a>
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800354a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fa93 f2a3 	rbit	r2, r3
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <HAL_RCC_OscConfig+0xfcc>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003596:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800359a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800359e:	6011      	str	r1, [r2, #0]
 80035a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	fa92 f1a2 	rbit	r1, r2
 80035ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035b6:	6011      	str	r1, [r2, #0]
  return result;
 80035b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	fab2 f282 	clz	r2, r2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f042 0220 	orr.w	r2, r2, #32
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f002 021f 	and.w	r2, r2, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d187      	bne.n	80034ee <HAL_RCC_OscConfig+0xec6>
 80035de:	e029      	b.n	8003634 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d103      	bne.n	80035f8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e020      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
 80035f4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f8:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_RCC_OscConfig+0x1018>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003600:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003604:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	429a      	cmp	r2, r3
 8003616:	d10b      	bne.n	8003630 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003618:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800361c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003624:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b09e      	sub	sp, #120	@ 0x78
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e154      	b.n	8003906 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b89      	ldr	r3, [pc, #548]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d910      	bls.n	800368c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b86      	ldr	r3, [pc, #536]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 0207 	bic.w	r2, r3, #7
 8003672:	4984      	ldr	r1, [pc, #528]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b82      	ldr	r3, [pc, #520]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e13c      	b.n	8003906 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003698:	4b7b      	ldr	r3, [pc, #492]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4978      	ldr	r1, [pc, #480]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80cd 	beq.w	8003852 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d137      	bne.n	8003730 <HAL_RCC_ClockConfig+0xec>
 80036c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80036ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80036d8:	d802      	bhi.n	80036e0 <HAL_RCC_ClockConfig+0x9c>
 80036da:	4b6b      	ldr	r3, [pc, #428]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e00f      	b.n	8003700 <HAL_RCC_ClockConfig+0xbc>
 80036e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80036ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80036f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036fc:	4b62      	ldr	r3, [pc, #392]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003704:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003706:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003708:	fa92 f2a2 	rbit	r2, r2
 800370c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800370e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d171      	bne.n	8003810 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0ea      	b.n	8003906 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d137      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x164>
 8003738:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800373c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003750:	d802      	bhi.n	8003758 <HAL_RCC_ClockConfig+0x114>
 8003752:	4b4d      	ldr	r3, [pc, #308]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e00f      	b.n	8003778 <HAL_RCC_ClockConfig+0x134>
 8003758:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800375c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	647b      	str	r3, [r7, #68]	@ 0x44
 8003766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800376a:	643b      	str	r3, [r7, #64]	@ 0x40
 800376c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003774:	4b44      	ldr	r3, [pc, #272]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800377c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800377e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f002 021f 	and.w	r2, r2, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f202 	lsl.w	r2, r1, r2
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d135      	bne.n	8003810 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0ae      	b.n	8003906 <HAL_RCC_ClockConfig+0x2c2>
 80037a8:	2302      	movs	r3, #2
 80037aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80037be:	d802      	bhi.n	80037c6 <HAL_RCC_ClockConfig+0x182>
 80037c0:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	e00d      	b.n	80037e2 <HAL_RCC_ClockConfig+0x19e>
 80037c6:	2302      	movs	r3, #2
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d2:	2302      	movs	r3, #2
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	2202      	movs	r2, #2
 80037e4:	61ba      	str	r2, [r7, #24]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	fa92 f2a2 	rbit	r2, r2
 80037ec:	617a      	str	r2, [r7, #20]
  return result;
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	fab2 f282 	clz	r2, r2
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f002 021f 	and.w	r2, r2, #31
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e07a      	b.n	8003906 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003810:	4b1d      	ldr	r3, [pc, #116]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	491a      	ldr	r1, [pc, #104]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003822:	f7fe fc9d 	bl	8002160 <HAL_GetTick>
 8003826:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003828:	e00a      	b.n	8003840 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382a:	f7fe fc99 	bl	8002160 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e062      	b.n	8003906 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003840:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 020c 	and.w	r2, r3, #12
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	429a      	cmp	r2, r3
 8003850:	d1eb      	bne.n	800382a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d215      	bcs.n	800388c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003860:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0207 	bic.w	r2, r3, #7
 8003868:	4906      	ldr	r1, [pc, #24]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d006      	beq.n	800388c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e041      	b.n	8003906 <HAL_RCC_ClockConfig+0x2c2>
 8003882:	bf00      	nop
 8003884:	40022000 	.word	0x40022000
 8003888:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <HAL_RCC_ClockConfig+0x2cc>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	491a      	ldr	r1, [pc, #104]	@ (8003910 <HAL_RCC_ClockConfig+0x2cc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b6:	4b16      	ldr	r3, [pc, #88]	@ (8003910 <HAL_RCC_ClockConfig+0x2cc>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4912      	ldr	r1, [pc, #72]	@ (8003910 <HAL_RCC_ClockConfig+0x2cc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038ca:	f000 f829 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038ce:	4601      	mov	r1, r0
 80038d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <HAL_RCC_ClockConfig+0x2cc>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d8:	22f0      	movs	r2, #240	@ 0xf0
 80038da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	fa92 f2a2 	rbit	r2, r2
 80038e2:	60fa      	str	r2, [r7, #12]
  return result;
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	fab2 f282 	clz	r2, r2
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	40d3      	lsrs	r3, r2
 80038ee:	4a09      	ldr	r2, [pc, #36]	@ (8003914 <HAL_RCC_ClockConfig+0x2d0>)
 80038f0:	5cd3      	ldrb	r3, [r2, r3]
 80038f2:	fa21 f303 	lsr.w	r3, r1, r3
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <HAL_RCC_ClockConfig+0x2d4>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038fa:	4b08      	ldr	r3, [pc, #32]	@ (800391c <HAL_RCC_ClockConfig+0x2d8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fbea 	bl	80020d8 <HAL_InitTick>
  
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3778      	adds	r7, #120	@ 0x78
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	0800692c 	.word	0x0800692c
 8003918:	20000004 	.word	0x20000004
 800391c:	20000008 	.word	0x20000008

08003920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800393a:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b04      	cmp	r3, #4
 8003948:	d002      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x30>
 800394a:	2b08      	cmp	r3, #8
 800394c:	d003      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x36>
 800394e:	e026      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003952:	613b      	str	r3, [r7, #16]
      break;
 8003954:	e026      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	0c9b      	lsrs	r3, r3, #18
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	4a17      	ldr	r2, [pc, #92]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003960:	5cd3      	ldrb	r3, [r2, r3]
 8003962:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003964:	4b13      	ldr	r3, [pc, #76]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800396e:	5cd3      	ldrb	r3, [r2, r3]
 8003970:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800397c:	4a0e      	ldr	r2, [pc, #56]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	fbb2 f2f3 	udiv	r2, r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e004      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a0c      	ldr	r2, [pc, #48]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	613b      	str	r3, [r7, #16]
      break;
 800399c:	e002      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80039a0:	613b      	str	r3, [r7, #16]
      break;
 80039a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a4:	693b      	ldr	r3, [r7, #16]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	007a1200 	.word	0x007a1200
 80039bc:	08006944 	.word	0x08006944
 80039c0:	08006954 	.word	0x08006954
 80039c4:	003d0900 	.word	0x003d0900

080039c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039e6:	f7ff ffef 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039ea:	4601      	mov	r1, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	fa92 f2a2 	rbit	r2, r2
 8003a00:	603a      	str	r2, [r7, #0]
  return result;
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	40d3      	lsrs	r3, r2
 8003a0c:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	0800693c 	.word	0x0800693c

08003a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a2a:	f7ff ffcd 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a2e:	4601      	mov	r1, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a38:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	fa92 f2a2 	rbit	r2, r2
 8003a44:	603a      	str	r2, [r7, #0]
  return result;
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	40d3      	lsrs	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	@ (8003a64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	0800693c 	.word	0x0800693c

08003a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b092      	sub	sp, #72	@ 0x48
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80cb 	beq.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8c:	4b85      	ldr	r3, [pc, #532]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10e      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a98:	4b82      	ldr	r3, [pc, #520]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4a81      	ldr	r2, [pc, #516]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	61d3      	str	r3, [r2, #28]
 8003aa4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d118      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac2:	4b79      	ldr	r3, [pc, #484]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a78      	ldr	r2, [pc, #480]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003acc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ace:	f7fe fb47 	bl	8002160 <HAL_GetTick>
 8003ad2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad6:	f7fe fb43 	bl	8002160 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b64      	cmp	r3, #100	@ 0x64
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0d9      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003af4:	4b6b      	ldr	r3, [pc, #428]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d07b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d074      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b12:	4b64      	ldr	r3, [pc, #400]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b20:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b5d      	ldr	r3, [pc, #372]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b54      	ldr	r3, [pc, #336]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2300      	movs	r3, #0
 8003b62:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b64:	4a4f      	ldr	r2, [pc, #316]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d043      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe faf4 	bl	8002160 <HAL_GetTick>
 8003b78:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe faf0 	bl	8002160 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e084      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b92:	2302      	movs	r3, #2
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	61fb      	str	r3, [r7, #28]
  return result;
 8003baa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003bbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	e007      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	4b35      	ldr	r3, [pc, #212]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	613a      	str	r2, [r7, #16]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	fa92 f2a2 	rbit	r2, r2
 8003bdc:	60fa      	str	r2, [r7, #12]
  return result;
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f002 021f 	and.w	r2, r2, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0bf      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4926      	ldr	r1, [pc, #152]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c0e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d105      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4a22      	ldr	r2, [pc, #136]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	491a      	ldr	r1, [pc, #104]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c4c:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	f023 0210 	bic.w	r2, r3, #16
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4912      	ldr	r1, [pc, #72]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	490b      	ldr	r1, [pc, #44]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3748      	adds	r7, #72	@ 0x48
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	10908100 	.word	0x10908100

08003cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e049      	b.n	8003d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fe f8a6 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 fb86 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e049      	b.n	8003e04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f841 	bl	8003e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f000 fb2f 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x24>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e03c      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d109      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x3e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e02f      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d109      	bne.n	8003e78 <HAL_TIM_PWM_Start+0x58>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e022      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d109      	bne.n	8003e92 <HAL_TIM_PWM_Start+0x72>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e015      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d109      	bne.n	8003eac <HAL_TIM_PWM_Start+0x8c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e008      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e088      	b.n	8003fd8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0xb6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed4:	e023      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xc6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee4:	e01b      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0xd6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ef4:	e013      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start+0xe6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f04:	e00b      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_PWM_Start+0xf6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f14:	e003      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2201      	movs	r2, #1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fe2e 	bl	8004b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe0 <HAL_TIM_PWM_Start+0x1c0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x134>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <HAL_TIM_PWM_Start+0x1c4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x134>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a28      	ldr	r2, [pc, #160]	@ (8003fe8 <HAL_TIM_PWM_Start+0x1c8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_TIM_PWM_Start+0x134>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a27      	ldr	r2, [pc, #156]	@ (8003fec <HAL_TIM_PWM_Start+0x1cc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_TIM_PWM_Start+0x138>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <HAL_TIM_PWM_Start+0x13a>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <HAL_TIM_PWM_Start+0x1c0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x176>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d009      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x176>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff0 <HAL_TIM_PWM_Start+0x1d0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x176>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <HAL_TIM_PWM_Start+0x1c4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d115      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	4b15      	ldr	r3, [pc, #84]	@ (8003ff4 <HAL_TIM_PWM_Start+0x1d4>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b06      	cmp	r3, #6
 8003fa6:	d015      	beq.n	8003fd4 <HAL_TIM_PWM_Start+0x1b4>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fae:	d011      	beq.n	8003fd4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	e008      	b.n	8003fd4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e000      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	00010007 	.word	0x00010007

08003ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004012:	2302      	movs	r3, #2
 8004014:	e0ff      	b.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b14      	cmp	r3, #20
 8004022:	f200 80f0 	bhi.w	8004206 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004026:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004081 	.word	0x08004081
 8004030:	08004207 	.word	0x08004207
 8004034:	08004207 	.word	0x08004207
 8004038:	08004207 	.word	0x08004207
 800403c:	080040c1 	.word	0x080040c1
 8004040:	08004207 	.word	0x08004207
 8004044:	08004207 	.word	0x08004207
 8004048:	08004207 	.word	0x08004207
 800404c:	08004103 	.word	0x08004103
 8004050:	08004207 	.word	0x08004207
 8004054:	08004207 	.word	0x08004207
 8004058:	08004207 	.word	0x08004207
 800405c:	08004143 	.word	0x08004143
 8004060:	08004207 	.word	0x08004207
 8004064:	08004207 	.word	0x08004207
 8004068:	08004207 	.word	0x08004207
 800406c:	08004185 	.word	0x08004185
 8004070:	08004207 	.word	0x08004207
 8004074:	08004207 	.word	0x08004207
 8004078:	08004207 	.word	0x08004207
 800407c:	080041c5 	.word	0x080041c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fa3e 	bl	8004508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0204 	bic.w	r2, r2, #4
 80040aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	619a      	str	r2, [r3, #24]
      break;
 80040be:	e0a5      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 faa4 	bl	8004614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6999      	ldr	r1, [r3, #24]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	021a      	lsls	r2, r3, #8
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	619a      	str	r2, [r3, #24]
      break;
 8004100:	e084      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fb03 	bl	8004714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0208 	orr.w	r2, r2, #8
 800411c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0204 	bic.w	r2, r2, #4
 800412c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69d9      	ldr	r1, [r3, #28]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	61da      	str	r2, [r3, #28]
      break;
 8004140:	e064      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fb61 	bl	8004810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69d9      	ldr	r1, [r3, #28]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	021a      	lsls	r2, r3, #8
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	61da      	str	r2, [r3, #28]
      break;
 8004182:	e043      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fba4 	bl	80048d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0204 	bic.w	r2, r2, #4
 80041ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80041c2:	e023      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fbe2 	bl	8004994 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004204:	e002      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
      break;
 800420a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop

08004220 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_TIM_GenerateEvent+0x18>
 8004234:	2302      	movs	r3, #2
 8004236:	e014      	b.n	8004262 <HAL_TIM_GenerateEvent+0x42>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_TIM_ConfigClockSource+0x1c>
 8004286:	2302      	movs	r3, #2
 8004288:	e0b6      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x18a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c6:	d03e      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0xd8>
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042cc:	f200 8087 	bhi.w	80043de <HAL_TIM_ConfigClockSource+0x170>
 80042d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d4:	f000 8086 	beq.w	80043e4 <HAL_TIM_ConfigClockSource+0x176>
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042dc:	d87f      	bhi.n	80043de <HAL_TIM_ConfigClockSource+0x170>
 80042de:	2b70      	cmp	r3, #112	@ 0x70
 80042e0:	d01a      	beq.n	8004318 <HAL_TIM_ConfigClockSource+0xaa>
 80042e2:	2b70      	cmp	r3, #112	@ 0x70
 80042e4:	d87b      	bhi.n	80043de <HAL_TIM_ConfigClockSource+0x170>
 80042e6:	2b60      	cmp	r3, #96	@ 0x60
 80042e8:	d050      	beq.n	800438c <HAL_TIM_ConfigClockSource+0x11e>
 80042ea:	2b60      	cmp	r3, #96	@ 0x60
 80042ec:	d877      	bhi.n	80043de <HAL_TIM_ConfigClockSource+0x170>
 80042ee:	2b50      	cmp	r3, #80	@ 0x50
 80042f0:	d03c      	beq.n	800436c <HAL_TIM_ConfigClockSource+0xfe>
 80042f2:	2b50      	cmp	r3, #80	@ 0x50
 80042f4:	d873      	bhi.n	80043de <HAL_TIM_ConfigClockSource+0x170>
 80042f6:	2b40      	cmp	r3, #64	@ 0x40
 80042f8:	d058      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0x13e>
 80042fa:	2b40      	cmp	r3, #64	@ 0x40
 80042fc:	d86f      	bhi.n	80043de <HAL_TIM_ConfigClockSource+0x170>
 80042fe:	2b30      	cmp	r3, #48	@ 0x30
 8004300:	d064      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0x15e>
 8004302:	2b30      	cmp	r3, #48	@ 0x30
 8004304:	d86b      	bhi.n	80043de <HAL_TIM_ConfigClockSource+0x170>
 8004306:	2b20      	cmp	r3, #32
 8004308:	d060      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0x15e>
 800430a:	2b20      	cmp	r3, #32
 800430c:	d867      	bhi.n	80043de <HAL_TIM_ConfigClockSource+0x170>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d05c      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0x15e>
 8004312:	2b10      	cmp	r3, #16
 8004314:	d05a      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0x15e>
 8004316:	e062      	b.n	80043de <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004328:	f000 fc0e 	bl	8004b48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800433a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
      break;
 8004344:	e04f      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	f000 fbf7 	bl	8004b48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004368:	609a      	str	r2, [r3, #8]
      break;
 800436a:	e03c      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004378:	461a      	mov	r2, r3
 800437a:	f000 fb6b 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2150      	movs	r1, #80	@ 0x50
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fbc4 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800438a:	e02c      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004398:	461a      	mov	r2, r3
 800439a:	f000 fb8a 	bl	8004ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2160      	movs	r1, #96	@ 0x60
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fbb4 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 80043aa:	e01c      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b8:	461a      	mov	r2, r3
 80043ba:	f000 fb4b 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2140      	movs	r1, #64	@ 0x40
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fba4 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 80043ca:	e00c      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fb9b 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e003      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
      break;
 80043e2:	e000      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a38      	ldr	r2, [pc, #224]	@ (80044f4 <TIM_Base_SetConfig+0xf4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_Base_SetConfig+0x28>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d003      	beq.n	8004428 <TIM_Base_SetConfig+0x28>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a35      	ldr	r2, [pc, #212]	@ (80044f8 <TIM_Base_SetConfig+0xf8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d108      	bne.n	800443a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2d      	ldr	r2, [pc, #180]	@ (80044f4 <TIM_Base_SetConfig+0xf4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <TIM_Base_SetConfig+0x6a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004448:	d00f      	beq.n	800446a <TIM_Base_SetConfig+0x6a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2a      	ldr	r2, [pc, #168]	@ (80044f8 <TIM_Base_SetConfig+0xf8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_Base_SetConfig+0x6a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a29      	ldr	r2, [pc, #164]	@ (80044fc <TIM_Base_SetConfig+0xfc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <TIM_Base_SetConfig+0x6a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a28      	ldr	r2, [pc, #160]	@ (8004500 <TIM_Base_SetConfig+0x100>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_Base_SetConfig+0x6a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a27      	ldr	r2, [pc, #156]	@ (8004504 <TIM_Base_SetConfig+0x104>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <TIM_Base_SetConfig+0xf4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_Base_SetConfig+0xc0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a14      	ldr	r2, [pc, #80]	@ (80044fc <TIM_Base_SetConfig+0xfc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <TIM_Base_SetConfig+0xc0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a13      	ldr	r2, [pc, #76]	@ (8004500 <TIM_Base_SetConfig+0x100>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0xc0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a12      	ldr	r2, [pc, #72]	@ (8004504 <TIM_Base_SetConfig+0x104>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d103      	bne.n	80044c8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f023 0201 	bic.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	611a      	str	r2, [r3, #16]
  }
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f023 0201 	bic.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 0302 	bic.w	r3, r3, #2
 8004554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a28      	ldr	r2, [pc, #160]	@ (8004604 <TIM_OC1_SetConfig+0xfc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00b      	beq.n	8004580 <TIM_OC1_SetConfig+0x78>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a27      	ldr	r2, [pc, #156]	@ (8004608 <TIM_OC1_SetConfig+0x100>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <TIM_OC1_SetConfig+0x78>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a26      	ldr	r2, [pc, #152]	@ (800460c <TIM_OC1_SetConfig+0x104>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_OC1_SetConfig+0x78>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a25      	ldr	r2, [pc, #148]	@ (8004610 <TIM_OC1_SetConfig+0x108>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10c      	bne.n	800459a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f023 0308 	bic.w	r3, r3, #8
 8004586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a19      	ldr	r2, [pc, #100]	@ (8004604 <TIM_OC1_SetConfig+0xfc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_OC1_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <TIM_OC1_SetConfig+0x100>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_OC1_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a17      	ldr	r2, [pc, #92]	@ (800460c <TIM_OC1_SetConfig+0x104>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC1_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a16      	ldr	r2, [pc, #88]	@ (8004610 <TIM_OC1_SetConfig+0x108>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 0210 	bic.w	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0320 	bic.w	r3, r3, #32
 8004662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a24      	ldr	r2, [pc, #144]	@ (8004704 <TIM_OC2_SetConfig+0xf0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10d      	bne.n	8004694 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800467e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004692:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <TIM_OC2_SetConfig+0xf0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_OC2_SetConfig+0xa0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1a      	ldr	r2, [pc, #104]	@ (8004708 <TIM_OC2_SetConfig+0xf4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_OC2_SetConfig+0xa0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a19      	ldr	r2, [pc, #100]	@ (800470c <TIM_OC2_SetConfig+0xf8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_OC2_SetConfig+0xa0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a18      	ldr	r2, [pc, #96]	@ (8004710 <TIM_OC2_SetConfig+0xfc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d113      	bne.n	80046dc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046ba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046c2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800

08004714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <TIM_OC3_SetConfig+0xec>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10d      	bne.n	8004792 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800477c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004790:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1a      	ldr	r2, [pc, #104]	@ (8004800 <TIM_OC3_SetConfig+0xec>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_OC3_SetConfig+0x9e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <TIM_OC3_SetConfig+0xf0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_OC3_SetConfig+0x9e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <TIM_OC3_SetConfig+0xf4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC3_SetConfig+0x9e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a17      	ldr	r2, [pc, #92]	@ (800480c <TIM_OC3_SetConfig+0xf8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d113      	bne.n	80047da <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800

08004810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800483e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800484a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800485e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	031b      	lsls	r3, r3, #12
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a16      	ldr	r2, [pc, #88]	@ (80048c8 <TIM_OC4_SetConfig+0xb8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_OC4_SetConfig+0x7c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a15      	ldr	r2, [pc, #84]	@ (80048cc <TIM_OC4_SetConfig+0xbc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_OC4_SetConfig+0x7c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a14      	ldr	r2, [pc, #80]	@ (80048d0 <TIM_OC4_SetConfig+0xc0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC4_SetConfig+0x7c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a13      	ldr	r2, [pc, #76]	@ (80048d4 <TIM_OC4_SetConfig+0xc4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d109      	bne.n	80048a0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800

080048d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800491c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	@ (8004984 <TIM_OC5_SetConfig+0xac>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <TIM_OC5_SetConfig+0x72>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a14      	ldr	r2, [pc, #80]	@ (8004988 <TIM_OC5_SetConfig+0xb0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_OC5_SetConfig+0x72>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a13      	ldr	r2, [pc, #76]	@ (800498c <TIM_OC5_SetConfig+0xb4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC5_SetConfig+0x72>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a12      	ldr	r2, [pc, #72]	@ (8004990 <TIM_OC5_SetConfig+0xb8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d109      	bne.n	800495e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40014000 	.word	0x40014000
 800498c:	40014400 	.word	0x40014400
 8004990:	40014800 	.word	0x40014800

08004994 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	051b      	lsls	r3, r3, #20
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a16      	ldr	r2, [pc, #88]	@ (8004a44 <TIM_OC6_SetConfig+0xb0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <TIM_OC6_SetConfig+0x74>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a15      	ldr	r2, [pc, #84]	@ (8004a48 <TIM_OC6_SetConfig+0xb4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d007      	beq.n	8004a08 <TIM_OC6_SetConfig+0x74>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <TIM_OC6_SetConfig+0xb8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC6_SetConfig+0x74>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <TIM_OC6_SetConfig+0xbc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d109      	bne.n	8004a1c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800

08004a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 030a 	bic.w	r3, r3, #10
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b087      	sub	sp, #28
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f023 0210 	bic.w	r2, r3, #16
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004aee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f043 0307 	orr.w	r3, r3, #7
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	401a      	ands	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e054      	b.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a24      	ldr	r2, [pc, #144]	@ (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d108      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a17      	ldr	r2, [pc, #92]	@ (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00e      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c54:	d009      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a11      	ldr	r2, [pc, #68]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10c      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40014000 	.word	0x40014000

08004cb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e060      	b.n	8004d8e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a14      	ldr	r2, [pc, #80]	@ (8004d9c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d115      	bne.n	8004d7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	051b      	lsls	r3, r3, #20
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00

08004da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e040      	b.n	8004e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fd f8c0 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	@ 0x24
 8004dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f95e 	bl	80050a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f825 	bl	8004e3c <UART_SetConfig>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e01b      	b.n	8004e34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f9dd 	bl	80051ec <UART_CheckIdleState>
 8004e32:	4603      	mov	r3, r0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b8a      	ldr	r3, [pc, #552]	@ (8005090 <UART_SetConfig+0x254>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	6979      	ldr	r1, [r7, #20]
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a78      	ldr	r2, [pc, #480]	@ (8005094 <UART_SetConfig+0x258>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d120      	bne.n	8004efa <UART_SetConfig+0xbe>
 8004eb8:	4b77      	ldr	r3, [pc, #476]	@ (8005098 <UART_SetConfig+0x25c>)
 8004eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d817      	bhi.n	8004ef4 <UART_SetConfig+0xb8>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0x90>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004ee9 	.word	0x08004ee9
 8004ed4:	08004eef 	.word	0x08004eef
 8004ed8:	08004ee3 	.word	0x08004ee3
 8004edc:	2300      	movs	r3, #0
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e01d      	b.n	8004f1e <UART_SetConfig+0xe2>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e01a      	b.n	8004f1e <UART_SetConfig+0xe2>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e017      	b.n	8004f1e <UART_SetConfig+0xe2>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e014      	b.n	8004f1e <UART_SetConfig+0xe2>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e011      	b.n	8004f1e <UART_SetConfig+0xe2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a67      	ldr	r2, [pc, #412]	@ (800509c <UART_SetConfig+0x260>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d102      	bne.n	8004f0a <UART_SetConfig+0xce>
 8004f04:	2300      	movs	r3, #0
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0xe2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a64      	ldr	r2, [pc, #400]	@ (80050a0 <UART_SetConfig+0x264>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d102      	bne.n	8004f1a <UART_SetConfig+0xde>
 8004f14:	2300      	movs	r3, #0
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e001      	b.n	8004f1e <UART_SetConfig+0xe2>
 8004f1a:	2310      	movs	r3, #16
 8004f1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f26:	d15a      	bne.n	8004fde <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004f28:	7ffb      	ldrb	r3, [r7, #31]
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d827      	bhi.n	8004f7e <UART_SetConfig+0x142>
 8004f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f34 <UART_SetConfig+0xf8>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	08004f7f 	.word	0x08004f7f
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004f7f 	.word	0x08004f7f
 8004f50:	08004f7f 	.word	0x08004f7f
 8004f54:	08004f77 	.word	0x08004f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7fe fd42 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8004f5c:	61b8      	str	r0, [r7, #24]
        break;
 8004f5e:	e013      	b.n	8004f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f60:	f7fe fd60 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 8004f64:	61b8      	str	r0, [r7, #24]
        break;
 8004f66:	e00f      	b.n	8004f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f68:	4b4e      	ldr	r3, [pc, #312]	@ (80050a4 <UART_SetConfig+0x268>)
 8004f6a:	61bb      	str	r3, [r7, #24]
        break;
 8004f6c:	e00c      	b.n	8004f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6e:	f7fe fcd7 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8004f72:	61b8      	str	r0, [r7, #24]
        break;
 8004f74:	e008      	b.n	8004f88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f7a:	61bb      	str	r3, [r7, #24]
        break;
 8004f7c:	e004      	b.n	8004f88 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	77bb      	strb	r3, [r7, #30]
        break;
 8004f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d074      	beq.n	8005078 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	005a      	lsls	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	441a      	add	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d916      	bls.n	8004fd8 <UART_SetConfig+0x19c>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb0:	d212      	bcs.n	8004fd8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f023 030f 	bic.w	r3, r3, #15
 8004fba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	89fb      	ldrh	r3, [r7, #14]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	89fa      	ldrh	r2, [r7, #14]
 8004fd4:	60da      	str	r2, [r3, #12]
 8004fd6:	e04f      	b.n	8005078 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	77bb      	strb	r3, [r7, #30]
 8004fdc:	e04c      	b.n	8005078 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fde:	7ffb      	ldrb	r3, [r7, #31]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d828      	bhi.n	8005036 <UART_SetConfig+0x1fa>
 8004fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fec <UART_SetConfig+0x1b0>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	08005037 	.word	0x08005037
 8004ffc:	08005027 	.word	0x08005027
 8005000:	08005037 	.word	0x08005037
 8005004:	08005037 	.word	0x08005037
 8005008:	08005037 	.word	0x08005037
 800500c:	0800502f 	.word	0x0800502f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005010:	f7fe fce6 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8005014:	61b8      	str	r0, [r7, #24]
        break;
 8005016:	e013      	b.n	8005040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005018:	f7fe fd04 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 800501c:	61b8      	str	r0, [r7, #24]
        break;
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005020:	4b20      	ldr	r3, [pc, #128]	@ (80050a4 <UART_SetConfig+0x268>)
 8005022:	61bb      	str	r3, [r7, #24]
        break;
 8005024:	e00c      	b.n	8005040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005026:	f7fe fc7b 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 800502a:	61b8      	str	r0, [r7, #24]
        break;
 800502c:	e008      	b.n	8005040 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e004      	b.n	8005040 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	77bb      	strb	r3, [r7, #30]
        break;
 800503e:	bf00      	nop
    }

    if (pclk != 0U)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d018      	beq.n	8005078 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	085a      	lsrs	r2, r3, #1
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	441a      	add	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b0f      	cmp	r3, #15
 800505e:	d909      	bls.n	8005074 <UART_SetConfig+0x238>
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005066:	d205      	bcs.n	8005074 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	b29a      	uxth	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60da      	str	r2, [r3, #12]
 8005072:	e001      	b.n	8005078 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005084:	7fbb      	ldrb	r3, [r7, #30]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	efff69f3 	.word	0xefff69f3
 8005094:	40013800 	.word	0x40013800
 8005098:	40021000 	.word	0x40021000
 800509c:	40004400 	.word	0x40004400
 80050a0:	40004800 	.word	0x40004800
 80050a4:	007a1200 	.word	0x007a1200

080050a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01a      	beq.n	80051be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a6:	d10a      	bne.n	80051be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b098      	sub	sp, #96	@ 0x60
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051fc:	f7fc ffb0 	bl	8002160 <HAL_GetTick>
 8005200:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b08      	cmp	r3, #8
 800520e:	d12e      	bne.n	800526e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005210:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f88c 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d021      	beq.n	800526e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800523e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005248:	647b      	str	r3, [r7, #68]	@ 0x44
 800524a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800524e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e6      	bne.n	800522a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e062      	b.n	8005334 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d149      	bne.n	8005310 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800527c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005284:	2200      	movs	r2, #0
 8005286:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f856 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d03c      	beq.n	8005310 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	623b      	str	r3, [r7, #32]
   return(result);
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e8:	61fa      	str	r2, [r7, #28]
 80052ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	617b      	str	r3, [r7, #20]
   return(result);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e011      	b.n	8005334 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3758      	adds	r7, #88	@ 0x58
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534c:	e04f      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d04b      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7fc ff03 	bl	8002160 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	429a      	cmp	r2, r3
 8005364:	d302      	bcc.n	800536c <UART_WaitOnFlagUntilTimeout+0x30>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e04e      	b.n	800540e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d037      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b80      	cmp	r3, #128	@ 0x80
 8005382:	d034      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b40      	cmp	r3, #64	@ 0x40
 8005388:	d031      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d110      	bne.n	80053ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2208      	movs	r2, #8
 800539e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f838 	bl	8005416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2208      	movs	r2, #8
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e029      	b.n	800540e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c8:	d111      	bne.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f81e 	bl	8005416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e00f      	b.n	800540e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d0a0      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005416:	b480      	push	{r7}
 8005418:	b095      	sub	sp, #84	@ 0x54
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800543c:	643b      	str	r3, [r7, #64]	@ 0x40
 800543e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005442:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005488:	2b01      	cmp	r3, #1
 800548a:	d118      	bne.n	80054be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	60bb      	str	r3, [r7, #8]
   return(result);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0310 	bic.w	r3, r3, #16
 80054a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80054d2:	bf00      	nop
 80054d4:	3754      	adds	r7, #84	@ 0x54
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <memset>:
 80054de:	4402      	add	r2, r0
 80054e0:	4603      	mov	r3, r0
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d100      	bne.n	80054e8 <memset+0xa>
 80054e6:	4770      	bx	lr
 80054e8:	f803 1b01 	strb.w	r1, [r3], #1
 80054ec:	e7f9      	b.n	80054e2 <memset+0x4>
	...

080054f0 <__errno>:
 80054f0:	4b01      	ldr	r3, [pc, #4]	@ (80054f8 <__errno+0x8>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000010 	.word	0x20000010

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	@ (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	@ (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	@ (8005540 <__libc_init_array+0x44>)
 8005510:	f000 ff78 	bl	8006404 <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	080069b0 	.word	0x080069b0
 8005538:	080069b0 	.word	0x080069b0
 800553c:	080069b0 	.word	0x080069b0
 8005540:	080069b4 	.word	0x080069b4

08005544 <pow>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	ed2d 8b02 	vpush	{d8}
 800554a:	eeb0 8a40 	vmov.f32	s16, s0
 800554e:	eef0 8a60 	vmov.f32	s17, s1
 8005552:	ec55 4b11 	vmov	r4, r5, d1
 8005556:	f000 f873 	bl	8005640 <__ieee754_pow>
 800555a:	4622      	mov	r2, r4
 800555c:	462b      	mov	r3, r5
 800555e:	4620      	mov	r0, r4
 8005560:	4629      	mov	r1, r5
 8005562:	ec57 6b10 	vmov	r6, r7, d0
 8005566:	f7fb fa85 	bl	8000a74 <__aeabi_dcmpun>
 800556a:	2800      	cmp	r0, #0
 800556c:	d13b      	bne.n	80055e6 <pow+0xa2>
 800556e:	ec51 0b18 	vmov	r0, r1, d8
 8005572:	2200      	movs	r2, #0
 8005574:	2300      	movs	r3, #0
 8005576:	f7fb fa4b 	bl	8000a10 <__aeabi_dcmpeq>
 800557a:	b1b8      	cbz	r0, 80055ac <pow+0x68>
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	4620      	mov	r0, r4
 8005582:	4629      	mov	r1, r5
 8005584:	f7fb fa44 	bl	8000a10 <__aeabi_dcmpeq>
 8005588:	2800      	cmp	r0, #0
 800558a:	d146      	bne.n	800561a <pow+0xd6>
 800558c:	ec45 4b10 	vmov	d0, r4, r5
 8005590:	f000 f848 	bl	8005624 <finite>
 8005594:	b338      	cbz	r0, 80055e6 <pow+0xa2>
 8005596:	2200      	movs	r2, #0
 8005598:	2300      	movs	r3, #0
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	f7fb fa41 	bl	8000a24 <__aeabi_dcmplt>
 80055a2:	b300      	cbz	r0, 80055e6 <pow+0xa2>
 80055a4:	f7ff ffa4 	bl	80054f0 <__errno>
 80055a8:	2322      	movs	r3, #34	@ 0x22
 80055aa:	e01b      	b.n	80055e4 <pow+0xa0>
 80055ac:	ec47 6b10 	vmov	d0, r6, r7
 80055b0:	f000 f838 	bl	8005624 <finite>
 80055b4:	b9e0      	cbnz	r0, 80055f0 <pow+0xac>
 80055b6:	eeb0 0a48 	vmov.f32	s0, s16
 80055ba:	eef0 0a68 	vmov.f32	s1, s17
 80055be:	f000 f831 	bl	8005624 <finite>
 80055c2:	b1a8      	cbz	r0, 80055f0 <pow+0xac>
 80055c4:	ec45 4b10 	vmov	d0, r4, r5
 80055c8:	f000 f82c 	bl	8005624 <finite>
 80055cc:	b180      	cbz	r0, 80055f0 <pow+0xac>
 80055ce:	4632      	mov	r2, r6
 80055d0:	463b      	mov	r3, r7
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fb fa4d 	bl	8000a74 <__aeabi_dcmpun>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d0e2      	beq.n	80055a4 <pow+0x60>
 80055de:	f7ff ff87 	bl	80054f0 <__errno>
 80055e2:	2321      	movs	r3, #33	@ 0x21
 80055e4:	6003      	str	r3, [r0, #0]
 80055e6:	ecbd 8b02 	vpop	{d8}
 80055ea:	ec47 6b10 	vmov	d0, r6, r7
 80055ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f0:	2200      	movs	r2, #0
 80055f2:	2300      	movs	r3, #0
 80055f4:	4630      	mov	r0, r6
 80055f6:	4639      	mov	r1, r7
 80055f8:	f7fb fa0a 	bl	8000a10 <__aeabi_dcmpeq>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d0f2      	beq.n	80055e6 <pow+0xa2>
 8005600:	eeb0 0a48 	vmov.f32	s0, s16
 8005604:	eef0 0a68 	vmov.f32	s1, s17
 8005608:	f000 f80c 	bl	8005624 <finite>
 800560c:	2800      	cmp	r0, #0
 800560e:	d0ea      	beq.n	80055e6 <pow+0xa2>
 8005610:	ec45 4b10 	vmov	d0, r4, r5
 8005614:	f000 f806 	bl	8005624 <finite>
 8005618:	e7c3      	b.n	80055a2 <pow+0x5e>
 800561a:	4f01      	ldr	r7, [pc, #4]	@ (8005620 <pow+0xdc>)
 800561c:	2600      	movs	r6, #0
 800561e:	e7e2      	b.n	80055e6 <pow+0xa2>
 8005620:	3ff00000 	.word	0x3ff00000

08005624 <finite>:
 8005624:	b082      	sub	sp, #8
 8005626:	ed8d 0b00 	vstr	d0, [sp]
 800562a:	9801      	ldr	r0, [sp, #4]
 800562c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005630:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005634:	0fc0      	lsrs	r0, r0, #31
 8005636:	b002      	add	sp, #8
 8005638:	4770      	bx	lr
 800563a:	0000      	movs	r0, r0
 800563c:	0000      	movs	r0, r0
	...

08005640 <__ieee754_pow>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	b091      	sub	sp, #68	@ 0x44
 8005646:	ed8d 1b00 	vstr	d1, [sp]
 800564a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800564e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005652:	ea5a 0001 	orrs.w	r0, sl, r1
 8005656:	ec57 6b10 	vmov	r6, r7, d0
 800565a:	d113      	bne.n	8005684 <__ieee754_pow+0x44>
 800565c:	19b3      	adds	r3, r6, r6
 800565e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005662:	4152      	adcs	r2, r2
 8005664:	4298      	cmp	r0, r3
 8005666:	4b9a      	ldr	r3, [pc, #616]	@ (80058d0 <__ieee754_pow+0x290>)
 8005668:	4193      	sbcs	r3, r2
 800566a:	f080 84ee 	bcs.w	800604a <__ieee754_pow+0xa0a>
 800566e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005672:	4630      	mov	r0, r6
 8005674:	4639      	mov	r1, r7
 8005676:	f7fa fdad 	bl	80001d4 <__adddf3>
 800567a:	ec41 0b10 	vmov	d0, r0, r1
 800567e:	b011      	add	sp, #68	@ 0x44
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005684:	4a93      	ldr	r2, [pc, #588]	@ (80058d4 <__ieee754_pow+0x294>)
 8005686:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800568a:	4295      	cmp	r5, r2
 800568c:	46b8      	mov	r8, r7
 800568e:	4633      	mov	r3, r6
 8005690:	d80a      	bhi.n	80056a8 <__ieee754_pow+0x68>
 8005692:	d104      	bne.n	800569e <__ieee754_pow+0x5e>
 8005694:	2e00      	cmp	r6, #0
 8005696:	d1ea      	bne.n	800566e <__ieee754_pow+0x2e>
 8005698:	45aa      	cmp	sl, r5
 800569a:	d8e8      	bhi.n	800566e <__ieee754_pow+0x2e>
 800569c:	e001      	b.n	80056a2 <__ieee754_pow+0x62>
 800569e:	4592      	cmp	sl, r2
 80056a0:	d802      	bhi.n	80056a8 <__ieee754_pow+0x68>
 80056a2:	4592      	cmp	sl, r2
 80056a4:	d10f      	bne.n	80056c6 <__ieee754_pow+0x86>
 80056a6:	b171      	cbz	r1, 80056c6 <__ieee754_pow+0x86>
 80056a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80056ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80056b0:	ea58 0803 	orrs.w	r8, r8, r3
 80056b4:	d1db      	bne.n	800566e <__ieee754_pow+0x2e>
 80056b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80056ba:	18db      	adds	r3, r3, r3
 80056bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80056c0:	4152      	adcs	r2, r2
 80056c2:	4598      	cmp	r8, r3
 80056c4:	e7cf      	b.n	8005666 <__ieee754_pow+0x26>
 80056c6:	f1b8 0f00 	cmp.w	r8, #0
 80056ca:	46ab      	mov	fp, r5
 80056cc:	da43      	bge.n	8005756 <__ieee754_pow+0x116>
 80056ce:	4a82      	ldr	r2, [pc, #520]	@ (80058d8 <__ieee754_pow+0x298>)
 80056d0:	4592      	cmp	sl, r2
 80056d2:	d856      	bhi.n	8005782 <__ieee754_pow+0x142>
 80056d4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80056d8:	4592      	cmp	sl, r2
 80056da:	f240 84c5 	bls.w	8006068 <__ieee754_pow+0xa28>
 80056de:	ea4f 522a 	mov.w	r2, sl, asr #20
 80056e2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80056e6:	2a14      	cmp	r2, #20
 80056e8:	dd18      	ble.n	800571c <__ieee754_pow+0xdc>
 80056ea:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80056ee:	fa21 f402 	lsr.w	r4, r1, r2
 80056f2:	fa04 f202 	lsl.w	r2, r4, r2
 80056f6:	428a      	cmp	r2, r1
 80056f8:	f040 84b6 	bne.w	8006068 <__ieee754_pow+0xa28>
 80056fc:	f004 0401 	and.w	r4, r4, #1
 8005700:	f1c4 0402 	rsb	r4, r4, #2
 8005704:	2900      	cmp	r1, #0
 8005706:	d159      	bne.n	80057bc <__ieee754_pow+0x17c>
 8005708:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800570c:	d148      	bne.n	80057a0 <__ieee754_pow+0x160>
 800570e:	4632      	mov	r2, r6
 8005710:	463b      	mov	r3, r7
 8005712:	4630      	mov	r0, r6
 8005714:	4639      	mov	r1, r7
 8005716:	f7fa ff13 	bl	8000540 <__aeabi_dmul>
 800571a:	e7ae      	b.n	800567a <__ieee754_pow+0x3a>
 800571c:	2900      	cmp	r1, #0
 800571e:	d14c      	bne.n	80057ba <__ieee754_pow+0x17a>
 8005720:	f1c2 0214 	rsb	r2, r2, #20
 8005724:	fa4a f402 	asr.w	r4, sl, r2
 8005728:	fa04 f202 	lsl.w	r2, r4, r2
 800572c:	4552      	cmp	r2, sl
 800572e:	f040 8498 	bne.w	8006062 <__ieee754_pow+0xa22>
 8005732:	f004 0401 	and.w	r4, r4, #1
 8005736:	f1c4 0402 	rsb	r4, r4, #2
 800573a:	4a68      	ldr	r2, [pc, #416]	@ (80058dc <__ieee754_pow+0x29c>)
 800573c:	4592      	cmp	sl, r2
 800573e:	d1e3      	bne.n	8005708 <__ieee754_pow+0xc8>
 8005740:	f1b9 0f00 	cmp.w	r9, #0
 8005744:	f280 8489 	bge.w	800605a <__ieee754_pow+0xa1a>
 8005748:	4964      	ldr	r1, [pc, #400]	@ (80058dc <__ieee754_pow+0x29c>)
 800574a:	4632      	mov	r2, r6
 800574c:	463b      	mov	r3, r7
 800574e:	2000      	movs	r0, #0
 8005750:	f7fb f820 	bl	8000794 <__aeabi_ddiv>
 8005754:	e791      	b.n	800567a <__ieee754_pow+0x3a>
 8005756:	2400      	movs	r4, #0
 8005758:	bb81      	cbnz	r1, 80057bc <__ieee754_pow+0x17c>
 800575a:	4a5e      	ldr	r2, [pc, #376]	@ (80058d4 <__ieee754_pow+0x294>)
 800575c:	4592      	cmp	sl, r2
 800575e:	d1ec      	bne.n	800573a <__ieee754_pow+0xfa>
 8005760:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8005764:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005768:	431a      	orrs	r2, r3
 800576a:	f000 846e 	beq.w	800604a <__ieee754_pow+0xa0a>
 800576e:	4b5c      	ldr	r3, [pc, #368]	@ (80058e0 <__ieee754_pow+0x2a0>)
 8005770:	429d      	cmp	r5, r3
 8005772:	d908      	bls.n	8005786 <__ieee754_pow+0x146>
 8005774:	f1b9 0f00 	cmp.w	r9, #0
 8005778:	f280 846b 	bge.w	8006052 <__ieee754_pow+0xa12>
 800577c:	2000      	movs	r0, #0
 800577e:	2100      	movs	r1, #0
 8005780:	e77b      	b.n	800567a <__ieee754_pow+0x3a>
 8005782:	2402      	movs	r4, #2
 8005784:	e7e8      	b.n	8005758 <__ieee754_pow+0x118>
 8005786:	f1b9 0f00 	cmp.w	r9, #0
 800578a:	f04f 0000 	mov.w	r0, #0
 800578e:	f04f 0100 	mov.w	r1, #0
 8005792:	f6bf af72 	bge.w	800567a <__ieee754_pow+0x3a>
 8005796:	e9dd 0300 	ldrd	r0, r3, [sp]
 800579a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800579e:	e76c      	b.n	800567a <__ieee754_pow+0x3a>
 80057a0:	4a50      	ldr	r2, [pc, #320]	@ (80058e4 <__ieee754_pow+0x2a4>)
 80057a2:	4591      	cmp	r9, r2
 80057a4:	d10a      	bne.n	80057bc <__ieee754_pow+0x17c>
 80057a6:	f1b8 0f00 	cmp.w	r8, #0
 80057aa:	db07      	blt.n	80057bc <__ieee754_pow+0x17c>
 80057ac:	ec47 6b10 	vmov	d0, r6, r7
 80057b0:	b011      	add	sp, #68	@ 0x44
 80057b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b6:	f000 bd4f 	b.w	8006258 <__ieee754_sqrt>
 80057ba:	2400      	movs	r4, #0
 80057bc:	ec47 6b10 	vmov	d0, r6, r7
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	f000 fc87 	bl	80060d4 <fabs>
 80057c6:	9b02      	ldr	r3, [sp, #8]
 80057c8:	ec51 0b10 	vmov	r0, r1, d0
 80057cc:	bb43      	cbnz	r3, 8005820 <__ieee754_pow+0x1e0>
 80057ce:	4b43      	ldr	r3, [pc, #268]	@ (80058dc <__ieee754_pow+0x29c>)
 80057d0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d000      	beq.n	80057da <__ieee754_pow+0x19a>
 80057d8:	bb15      	cbnz	r5, 8005820 <__ieee754_pow+0x1e0>
 80057da:	f1b9 0f00 	cmp.w	r9, #0
 80057de:	da05      	bge.n	80057ec <__ieee754_pow+0x1ac>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	2000      	movs	r0, #0
 80057e6:	493d      	ldr	r1, [pc, #244]	@ (80058dc <__ieee754_pow+0x29c>)
 80057e8:	f7fa ffd4 	bl	8000794 <__aeabi_ddiv>
 80057ec:	f1b8 0f00 	cmp.w	r8, #0
 80057f0:	f6bf af43 	bge.w	800567a <__ieee754_pow+0x3a>
 80057f4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80057f8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80057fc:	4325      	orrs	r5, r4
 80057fe:	d108      	bne.n	8005812 <__ieee754_pow+0x1d2>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	f7fa fce2 	bl	80001d0 <__aeabi_dsub>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	e79e      	b.n	8005750 <__ieee754_pow+0x110>
 8005812:	2c01      	cmp	r4, #1
 8005814:	f47f af31 	bne.w	800567a <__ieee754_pow+0x3a>
 8005818:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800581c:	4619      	mov	r1, r3
 800581e:	e72c      	b.n	800567a <__ieee754_pow+0x3a>
 8005820:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8005824:	3b01      	subs	r3, #1
 8005826:	ea53 0204 	orrs.w	r2, r3, r4
 800582a:	d102      	bne.n	8005832 <__ieee754_pow+0x1f2>
 800582c:	4632      	mov	r2, r6
 800582e:	463b      	mov	r3, r7
 8005830:	e7e8      	b.n	8005804 <__ieee754_pow+0x1c4>
 8005832:	3c01      	subs	r4, #1
 8005834:	431c      	orrs	r4, r3
 8005836:	d016      	beq.n	8005866 <__ieee754_pow+0x226>
 8005838:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80058c0 <__ieee754_pow+0x280>
 800583c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005840:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005844:	f240 8110 	bls.w	8005a68 <__ieee754_pow+0x428>
 8005848:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <__ieee754_pow+0x2a8>)
 800584a:	459a      	cmp	sl, r3
 800584c:	4b24      	ldr	r3, [pc, #144]	@ (80058e0 <__ieee754_pow+0x2a0>)
 800584e:	d916      	bls.n	800587e <__ieee754_pow+0x23e>
 8005850:	429d      	cmp	r5, r3
 8005852:	d80b      	bhi.n	800586c <__ieee754_pow+0x22c>
 8005854:	f1b9 0f00 	cmp.w	r9, #0
 8005858:	da0b      	bge.n	8005872 <__ieee754_pow+0x232>
 800585a:	2000      	movs	r0, #0
 800585c:	b011      	add	sp, #68	@ 0x44
 800585e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005862:	f000 bcf1 	b.w	8006248 <__math_oflow>
 8005866:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80058c8 <__ieee754_pow+0x288>
 800586a:	e7e7      	b.n	800583c <__ieee754_pow+0x1fc>
 800586c:	f1b9 0f00 	cmp.w	r9, #0
 8005870:	dcf3      	bgt.n	800585a <__ieee754_pow+0x21a>
 8005872:	2000      	movs	r0, #0
 8005874:	b011      	add	sp, #68	@ 0x44
 8005876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f000 bcdd 	b.w	8006238 <__math_uflow>
 800587e:	429d      	cmp	r5, r3
 8005880:	d20c      	bcs.n	800589c <__ieee754_pow+0x25c>
 8005882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	2300      	movs	r3, #0
 800588a:	f7fb f8cb 	bl	8000a24 <__aeabi_dcmplt>
 800588e:	3800      	subs	r0, #0
 8005890:	bf18      	it	ne
 8005892:	2001      	movne	r0, #1
 8005894:	f1b9 0f00 	cmp.w	r9, #0
 8005898:	daec      	bge.n	8005874 <__ieee754_pow+0x234>
 800589a:	e7df      	b.n	800585c <__ieee754_pow+0x21c>
 800589c:	4b0f      	ldr	r3, [pc, #60]	@ (80058dc <__ieee754_pow+0x29c>)
 800589e:	429d      	cmp	r5, r3
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	d922      	bls.n	80058ec <__ieee754_pow+0x2ac>
 80058a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058aa:	2300      	movs	r3, #0
 80058ac:	f7fb f8ba 	bl	8000a24 <__aeabi_dcmplt>
 80058b0:	3800      	subs	r0, #0
 80058b2:	bf18      	it	ne
 80058b4:	2001      	movne	r0, #1
 80058b6:	f1b9 0f00 	cmp.w	r9, #0
 80058ba:	dccf      	bgt.n	800585c <__ieee754_pow+0x21c>
 80058bc:	e7da      	b.n	8005874 <__ieee754_pow+0x234>
 80058be:	bf00      	nop
 80058c0:	00000000 	.word	0x00000000
 80058c4:	3ff00000 	.word	0x3ff00000
 80058c8:	00000000 	.word	0x00000000
 80058cc:	bff00000 	.word	0xbff00000
 80058d0:	fff00000 	.word	0xfff00000
 80058d4:	7ff00000 	.word	0x7ff00000
 80058d8:	433fffff 	.word	0x433fffff
 80058dc:	3ff00000 	.word	0x3ff00000
 80058e0:	3fefffff 	.word	0x3fefffff
 80058e4:	3fe00000 	.word	0x3fe00000
 80058e8:	43f00000 	.word	0x43f00000
 80058ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005a58 <__ieee754_pow+0x418>)
 80058ee:	f7fa fc6f 	bl	80001d0 <__aeabi_dsub>
 80058f2:	a351      	add	r3, pc, #324	@ (adr r3, 8005a38 <__ieee754_pow+0x3f8>)
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	4604      	mov	r4, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	f7fa fe20 	bl	8000540 <__aeabi_dmul>
 8005900:	a34f      	add	r3, pc, #316	@ (adr r3, 8005a40 <__ieee754_pow+0x400>)
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	4606      	mov	r6, r0
 8005908:	460f      	mov	r7, r1
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fa fe17 	bl	8000540 <__aeabi_dmul>
 8005912:	4b52      	ldr	r3, [pc, #328]	@ (8005a5c <__ieee754_pow+0x41c>)
 8005914:	4682      	mov	sl, r0
 8005916:	468b      	mov	fp, r1
 8005918:	2200      	movs	r2, #0
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	f7fa fe0f 	bl	8000540 <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	a148      	add	r1, pc, #288	@ (adr r1, 8005a48 <__ieee754_pow+0x408>)
 8005928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800592c:	f7fa fc50 	bl	80001d0 <__aeabi_dsub>
 8005930:	4622      	mov	r2, r4
 8005932:	462b      	mov	r3, r5
 8005934:	f7fa fe04 	bl	8000540 <__aeabi_dmul>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	2000      	movs	r0, #0
 800593e:	4948      	ldr	r1, [pc, #288]	@ (8005a60 <__ieee754_pow+0x420>)
 8005940:	f7fa fc46 	bl	80001d0 <__aeabi_dsub>
 8005944:	4622      	mov	r2, r4
 8005946:	4680      	mov	r8, r0
 8005948:	4689      	mov	r9, r1
 800594a:	462b      	mov	r3, r5
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fa fdf6 	bl	8000540 <__aeabi_dmul>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4640      	mov	r0, r8
 800595a:	4649      	mov	r1, r9
 800595c:	f7fa fdf0 	bl	8000540 <__aeabi_dmul>
 8005960:	a33b      	add	r3, pc, #236	@ (adr r3, 8005a50 <__ieee754_pow+0x410>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fdeb 	bl	8000540 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4650      	mov	r0, sl
 8005970:	4659      	mov	r1, fp
 8005972:	f7fa fc2d 	bl	80001d0 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4680      	mov	r8, r0
 800597c:	4689      	mov	r9, r1
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fa fc27 	bl	80001d4 <__adddf3>
 8005986:	2400      	movs	r4, #0
 8005988:	4632      	mov	r2, r6
 800598a:	463b      	mov	r3, r7
 800598c:	4620      	mov	r0, r4
 800598e:	460d      	mov	r5, r1
 8005990:	f7fa fc1e 	bl	80001d0 <__aeabi_dsub>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4640      	mov	r0, r8
 800599a:	4649      	mov	r1, r9
 800599c:	f7fa fc18 	bl	80001d0 <__aeabi_dsub>
 80059a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059a8:	2300      	movs	r3, #0
 80059aa:	9304      	str	r3, [sp, #16]
 80059ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80059b0:	4606      	mov	r6, r0
 80059b2:	460f      	mov	r7, r1
 80059b4:	465b      	mov	r3, fp
 80059b6:	4652      	mov	r2, sl
 80059b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059bc:	f7fa fc08 	bl	80001d0 <__aeabi_dsub>
 80059c0:	4622      	mov	r2, r4
 80059c2:	462b      	mov	r3, r5
 80059c4:	f7fa fdbc 	bl	8000540 <__aeabi_dmul>
 80059c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059cc:	4680      	mov	r8, r0
 80059ce:	4689      	mov	r9, r1
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fa fdb4 	bl	8000540 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4640      	mov	r0, r8
 80059de:	4649      	mov	r1, r9
 80059e0:	f7fa fbf8 	bl	80001d4 <__adddf3>
 80059e4:	465b      	mov	r3, fp
 80059e6:	4606      	mov	r6, r0
 80059e8:	460f      	mov	r7, r1
 80059ea:	4652      	mov	r2, sl
 80059ec:	4620      	mov	r0, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	f7fa fda6 	bl	8000540 <__aeabi_dmul>
 80059f4:	460b      	mov	r3, r1
 80059f6:	4602      	mov	r2, r0
 80059f8:	4680      	mov	r8, r0
 80059fa:	4689      	mov	r9, r1
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f7fa fbe8 	bl	80001d4 <__adddf3>
 8005a04:	4b17      	ldr	r3, [pc, #92]	@ (8005a64 <__ieee754_pow+0x424>)
 8005a06:	4299      	cmp	r1, r3
 8005a08:	4604      	mov	r4, r0
 8005a0a:	460d      	mov	r5, r1
 8005a0c:	468b      	mov	fp, r1
 8005a0e:	f340 820b 	ble.w	8005e28 <__ieee754_pow+0x7e8>
 8005a12:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005a16:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005a1a:	4303      	orrs	r3, r0
 8005a1c:	f000 81ea 	beq.w	8005df4 <__ieee754_pow+0x7b4>
 8005a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2300      	movs	r3, #0
 8005a28:	f7fa fffc 	bl	8000a24 <__aeabi_dcmplt>
 8005a2c:	3800      	subs	r0, #0
 8005a2e:	bf18      	it	ne
 8005a30:	2001      	movne	r0, #1
 8005a32:	e713      	b.n	800585c <__ieee754_pow+0x21c>
 8005a34:	f3af 8000 	nop.w
 8005a38:	60000000 	.word	0x60000000
 8005a3c:	3ff71547 	.word	0x3ff71547
 8005a40:	f85ddf44 	.word	0xf85ddf44
 8005a44:	3e54ae0b 	.word	0x3e54ae0b
 8005a48:	55555555 	.word	0x55555555
 8005a4c:	3fd55555 	.word	0x3fd55555
 8005a50:	652b82fe 	.word	0x652b82fe
 8005a54:	3ff71547 	.word	0x3ff71547
 8005a58:	3ff00000 	.word	0x3ff00000
 8005a5c:	3fd00000 	.word	0x3fd00000
 8005a60:	3fe00000 	.word	0x3fe00000
 8005a64:	408fffff 	.word	0x408fffff
 8005a68:	4bd5      	ldr	r3, [pc, #852]	@ (8005dc0 <__ieee754_pow+0x780>)
 8005a6a:	ea08 0303 	and.w	r3, r8, r3
 8005a6e:	2200      	movs	r2, #0
 8005a70:	b92b      	cbnz	r3, 8005a7e <__ieee754_pow+0x43e>
 8005a72:	4bd4      	ldr	r3, [pc, #848]	@ (8005dc4 <__ieee754_pow+0x784>)
 8005a74:	f7fa fd64 	bl	8000540 <__aeabi_dmul>
 8005a78:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005a7c:	468b      	mov	fp, r1
 8005a7e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005a82:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005a86:	4413      	add	r3, r2
 8005a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a8a:	4bcf      	ldr	r3, [pc, #828]	@ (8005dc8 <__ieee754_pow+0x788>)
 8005a8c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005a90:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005a94:	459b      	cmp	fp, r3
 8005a96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005a9a:	dd08      	ble.n	8005aae <__ieee754_pow+0x46e>
 8005a9c:	4bcb      	ldr	r3, [pc, #812]	@ (8005dcc <__ieee754_pow+0x78c>)
 8005a9e:	459b      	cmp	fp, r3
 8005aa0:	f340 81a5 	ble.w	8005dee <__ieee754_pow+0x7ae>
 8005aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005aaa:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005aae:	f04f 0a00 	mov.w	sl, #0
 8005ab2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ab8:	4bc5      	ldr	r3, [pc, #788]	@ (8005dd0 <__ieee754_pow+0x790>)
 8005aba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005abe:	ed93 7b00 	vldr	d7, [r3]
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	ec53 2b17 	vmov	r2, r3, d7
 8005ac8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005acc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ad0:	f7fa fb7e 	bl	80001d0 <__aeabi_dsub>
 8005ad4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ad8:	4606      	mov	r6, r0
 8005ada:	460f      	mov	r7, r1
 8005adc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ae0:	f7fa fb78 	bl	80001d4 <__adddf3>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	2000      	movs	r0, #0
 8005aea:	49ba      	ldr	r1, [pc, #744]	@ (8005dd4 <__ieee754_pow+0x794>)
 8005aec:	f7fa fe52 	bl	8000794 <__aeabi_ddiv>
 8005af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4630      	mov	r0, r6
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fa fd20 	bl	8000540 <__aeabi_dmul>
 8005b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b04:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005b08:	106d      	asrs	r5, r5, #1
 8005b0a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005b0e:	f04f 0b00 	mov.w	fp, #0
 8005b12:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005b16:	4661      	mov	r1, ip
 8005b18:	2200      	movs	r2, #0
 8005b1a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005b1e:	4658      	mov	r0, fp
 8005b20:	46e1      	mov	r9, ip
 8005b22:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005b26:	4614      	mov	r4, r2
 8005b28:	461d      	mov	r5, r3
 8005b2a:	f7fa fd09 	bl	8000540 <__aeabi_dmul>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4630      	mov	r0, r6
 8005b34:	4639      	mov	r1, r7
 8005b36:	f7fa fb4b 	bl	80001d0 <__aeabi_dsub>
 8005b3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b3e:	4606      	mov	r6, r0
 8005b40:	460f      	mov	r7, r1
 8005b42:	4620      	mov	r0, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	f7fa fb43 	bl	80001d0 <__aeabi_dsub>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005b52:	f7fa fb3d 	bl	80001d0 <__aeabi_dsub>
 8005b56:	465a      	mov	r2, fp
 8005b58:	464b      	mov	r3, r9
 8005b5a:	f7fa fcf1 	bl	8000540 <__aeabi_dmul>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4630      	mov	r0, r6
 8005b64:	4639      	mov	r1, r7
 8005b66:	f7fa fb33 	bl	80001d0 <__aeabi_dsub>
 8005b6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005b6e:	f7fa fce7 	bl	8000540 <__aeabi_dmul>
 8005b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	f7fa fcdf 	bl	8000540 <__aeabi_dmul>
 8005b82:	a37d      	add	r3, pc, #500	@ (adr r3, 8005d78 <__ieee754_pow+0x738>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	4604      	mov	r4, r0
 8005b8a:	460d      	mov	r5, r1
 8005b8c:	f7fa fcd8 	bl	8000540 <__aeabi_dmul>
 8005b90:	a37b      	add	r3, pc, #492	@ (adr r3, 8005d80 <__ieee754_pow+0x740>)
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa fb1d 	bl	80001d4 <__adddf3>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	f7fa fccf 	bl	8000540 <__aeabi_dmul>
 8005ba2:	a379      	add	r3, pc, #484	@ (adr r3, 8005d88 <__ieee754_pow+0x748>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f7fa fb14 	bl	80001d4 <__adddf3>
 8005bac:	4622      	mov	r2, r4
 8005bae:	462b      	mov	r3, r5
 8005bb0:	f7fa fcc6 	bl	8000540 <__aeabi_dmul>
 8005bb4:	a376      	add	r3, pc, #472	@ (adr r3, 8005d90 <__ieee754_pow+0x750>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f7fa fb0b 	bl	80001d4 <__adddf3>
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f7fa fcbd 	bl	8000540 <__aeabi_dmul>
 8005bc6:	a374      	add	r3, pc, #464	@ (adr r3, 8005d98 <__ieee754_pow+0x758>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fb02 	bl	80001d4 <__adddf3>
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f7fa fcb4 	bl	8000540 <__aeabi_dmul>
 8005bd8:	a371      	add	r3, pc, #452	@ (adr r3, 8005da0 <__ieee754_pow+0x760>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa faf9 	bl	80001d4 <__adddf3>
 8005be2:	4622      	mov	r2, r4
 8005be4:	4606      	mov	r6, r0
 8005be6:	460f      	mov	r7, r1
 8005be8:	462b      	mov	r3, r5
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	f7fa fca7 	bl	8000540 <__aeabi_dmul>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7fa fca1 	bl	8000540 <__aeabi_dmul>
 8005bfe:	465a      	mov	r2, fp
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	464b      	mov	r3, r9
 8005c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c0a:	f7fa fae3 	bl	80001d4 <__adddf3>
 8005c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c12:	f7fa fc95 	bl	8000540 <__aeabi_dmul>
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	f7fa fadb 	bl	80001d4 <__adddf3>
 8005c1e:	465a      	mov	r2, fp
 8005c20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c24:	464b      	mov	r3, r9
 8005c26:	4658      	mov	r0, fp
 8005c28:	4649      	mov	r1, r9
 8005c2a:	f7fa fc89 	bl	8000540 <__aeabi_dmul>
 8005c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005dd8 <__ieee754_pow+0x798>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	4606      	mov	r6, r0
 8005c34:	460f      	mov	r7, r1
 8005c36:	f7fa facd 	bl	80001d4 <__adddf3>
 8005c3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c3e:	f7fa fac9 	bl	80001d4 <__adddf3>
 8005c42:	46d8      	mov	r8, fp
 8005c44:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005c48:	460d      	mov	r5, r1
 8005c4a:	465a      	mov	r2, fp
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4640      	mov	r0, r8
 8005c50:	4649      	mov	r1, r9
 8005c52:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005c56:	f7fa fc73 	bl	8000540 <__aeabi_dmul>
 8005c5a:	465c      	mov	r4, fp
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4689      	mov	r9, r1
 8005c60:	4b5d      	ldr	r3, [pc, #372]	@ (8005dd8 <__ieee754_pow+0x798>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa fab2 	bl	80001d0 <__aeabi_dsub>
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	463b      	mov	r3, r7
 8005c70:	f7fa faae 	bl	80001d0 <__aeabi_dsub>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c7c:	f7fa faa8 	bl	80001d0 <__aeabi_dsub>
 8005c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c84:	f7fa fc5c 	bl	8000540 <__aeabi_dmul>
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	460f      	mov	r7, r1
 8005c8e:	462b      	mov	r3, r5
 8005c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c94:	f7fa fc54 	bl	8000540 <__aeabi_dmul>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa fa98 	bl	80001d4 <__adddf3>
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fa90 	bl	80001d4 <__adddf3>
 8005cb4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005cb8:	a33b      	add	r3, pc, #236	@ (adr r3, 8005da8 <__ieee754_pow+0x768>)
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	4658      	mov	r0, fp
 8005cc0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8005cc4:	460d      	mov	r5, r1
 8005cc6:	f7fa fc3b 	bl	8000540 <__aeabi_dmul>
 8005cca:	465c      	mov	r4, fp
 8005ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7fa fa7a 	bl	80001d0 <__aeabi_dsub>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fa74 	bl	80001d0 <__aeabi_dsub>
 8005ce8:	a331      	add	r3, pc, #196	@ (adr r3, 8005db0 <__ieee754_pow+0x770>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f7fa fc27 	bl	8000540 <__aeabi_dmul>
 8005cf2:	a331      	add	r3, pc, #196	@ (adr r3, 8005db8 <__ieee754_pow+0x778>)
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	460f      	mov	r7, r1
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	4629      	mov	r1, r5
 8005d00:	f7fa fc1e 	bl	8000540 <__aeabi_dmul>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4630      	mov	r0, r6
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f7fa fa62 	bl	80001d4 <__adddf3>
 8005d10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d12:	4b32      	ldr	r3, [pc, #200]	@ (8005ddc <__ieee754_pow+0x79c>)
 8005d14:	4413      	add	r3, r2
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f7fa fa5b 	bl	80001d4 <__adddf3>
 8005d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d24:	f7fa fba2 	bl	800046c <__aeabi_i2d>
 8005d28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005de0 <__ieee754_pow+0x7a0>)
 8005d2c:	4413      	add	r3, r2
 8005d2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d32:	4606      	mov	r6, r0
 8005d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d38:	460f      	mov	r7, r1
 8005d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d3e:	f7fa fa49 	bl	80001d4 <__adddf3>
 8005d42:	4642      	mov	r2, r8
 8005d44:	464b      	mov	r3, r9
 8005d46:	f7fa fa45 	bl	80001d4 <__adddf3>
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	f7fa fa41 	bl	80001d4 <__adddf3>
 8005d52:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8005d56:	4632      	mov	r2, r6
 8005d58:	463b      	mov	r3, r7
 8005d5a:	4658      	mov	r0, fp
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	f7fa fa37 	bl	80001d0 <__aeabi_dsub>
 8005d62:	4642      	mov	r2, r8
 8005d64:	464b      	mov	r3, r9
 8005d66:	f7fa fa33 	bl	80001d0 <__aeabi_dsub>
 8005d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d6e:	f7fa fa2f 	bl	80001d0 <__aeabi_dsub>
 8005d72:	465c      	mov	r4, fp
 8005d74:	e036      	b.n	8005de4 <__ieee754_pow+0x7a4>
 8005d76:	bf00      	nop
 8005d78:	4a454eef 	.word	0x4a454eef
 8005d7c:	3fca7e28 	.word	0x3fca7e28
 8005d80:	93c9db65 	.word	0x93c9db65
 8005d84:	3fcd864a 	.word	0x3fcd864a
 8005d88:	a91d4101 	.word	0xa91d4101
 8005d8c:	3fd17460 	.word	0x3fd17460
 8005d90:	518f264d 	.word	0x518f264d
 8005d94:	3fd55555 	.word	0x3fd55555
 8005d98:	db6fabff 	.word	0xdb6fabff
 8005d9c:	3fdb6db6 	.word	0x3fdb6db6
 8005da0:	33333303 	.word	0x33333303
 8005da4:	3fe33333 	.word	0x3fe33333
 8005da8:	e0000000 	.word	0xe0000000
 8005dac:	3feec709 	.word	0x3feec709
 8005db0:	dc3a03fd 	.word	0xdc3a03fd
 8005db4:	3feec709 	.word	0x3feec709
 8005db8:	145b01f5 	.word	0x145b01f5
 8005dbc:	be3e2fe0 	.word	0xbe3e2fe0
 8005dc0:	7ff00000 	.word	0x7ff00000
 8005dc4:	43400000 	.word	0x43400000
 8005dc8:	0003988e 	.word	0x0003988e
 8005dcc:	000bb679 	.word	0x000bb679
 8005dd0:	08006988 	.word	0x08006988
 8005dd4:	3ff00000 	.word	0x3ff00000
 8005dd8:	40080000 	.word	0x40080000
 8005ddc:	08006968 	.word	0x08006968
 8005de0:	08006978 	.word	0x08006978
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dec:	e5d6      	b.n	800599c <__ieee754_pow+0x35c>
 8005dee:	f04f 0a01 	mov.w	sl, #1
 8005df2:	e65e      	b.n	8005ab2 <__ieee754_pow+0x472>
 8005df4:	a3b5      	add	r3, pc, #724	@ (adr r3, 80060cc <__ieee754_pow+0xa8c>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	f7fa f9e9 	bl	80001d4 <__adddf3>
 8005e02:	4642      	mov	r2, r8
 8005e04:	e9cd 0100 	strd	r0, r1, [sp]
 8005e08:	464b      	mov	r3, r9
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa f9df 	bl	80001d0 <__aeabi_dsub>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e1a:	f7fa fe21 	bl	8000a60 <__aeabi_dcmpgt>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f47f adfe 	bne.w	8005a20 <__ieee754_pow+0x3e0>
 8005e24:	4ba2      	ldr	r3, [pc, #648]	@ (80060b0 <__ieee754_pow+0xa70>)
 8005e26:	e022      	b.n	8005e6e <__ieee754_pow+0x82e>
 8005e28:	4ca2      	ldr	r4, [pc, #648]	@ (80060b4 <__ieee754_pow+0xa74>)
 8005e2a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005e2e:	42a3      	cmp	r3, r4
 8005e30:	d919      	bls.n	8005e66 <__ieee754_pow+0x826>
 8005e32:	4ba1      	ldr	r3, [pc, #644]	@ (80060b8 <__ieee754_pow+0xa78>)
 8005e34:	440b      	add	r3, r1
 8005e36:	4303      	orrs	r3, r0
 8005e38:	d009      	beq.n	8005e4e <__ieee754_pow+0x80e>
 8005e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2300      	movs	r3, #0
 8005e42:	f7fa fdef 	bl	8000a24 <__aeabi_dcmplt>
 8005e46:	3800      	subs	r0, #0
 8005e48:	bf18      	it	ne
 8005e4a:	2001      	movne	r0, #1
 8005e4c:	e512      	b.n	8005874 <__ieee754_pow+0x234>
 8005e4e:	4642      	mov	r2, r8
 8005e50:	464b      	mov	r3, r9
 8005e52:	f7fa f9bd 	bl	80001d0 <__aeabi_dsub>
 8005e56:	4632      	mov	r2, r6
 8005e58:	463b      	mov	r3, r7
 8005e5a:	f7fa fdf7 	bl	8000a4c <__aeabi_dcmpge>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d1eb      	bne.n	8005e3a <__ieee754_pow+0x7fa>
 8005e62:	4b96      	ldr	r3, [pc, #600]	@ (80060bc <__ieee754_pow+0xa7c>)
 8005e64:	e003      	b.n	8005e6e <__ieee754_pow+0x82e>
 8005e66:	4a96      	ldr	r2, [pc, #600]	@ (80060c0 <__ieee754_pow+0xa80>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	f240 80e7 	bls.w	800603c <__ieee754_pow+0x9fc>
 8005e6e:	151b      	asrs	r3, r3, #20
 8005e70:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8005e74:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8005e78:	fa4a fa03 	asr.w	sl, sl, r3
 8005e7c:	44da      	add	sl, fp
 8005e7e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005e82:	4890      	ldr	r0, [pc, #576]	@ (80060c4 <__ieee754_pow+0xa84>)
 8005e84:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005e88:	4108      	asrs	r0, r1
 8005e8a:	ea00 030a 	and.w	r3, r0, sl
 8005e8e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005e92:	f1c1 0114 	rsb	r1, r1, #20
 8005e96:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005e9a:	fa4a fa01 	asr.w	sl, sl, r1
 8005e9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	bfb8      	it	lt
 8005eac:	f1ca 0a00 	rsblt	sl, sl, #0
 8005eb0:	f7fa f98e 	bl	80001d0 <__aeabi_dsub>
 8005eb4:	4680      	mov	r8, r0
 8005eb6:	4689      	mov	r9, r1
 8005eb8:	4632      	mov	r2, r6
 8005eba:	463b      	mov	r3, r7
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	f7fa f988 	bl	80001d4 <__adddf3>
 8005ec4:	2400      	movs	r4, #0
 8005ec6:	a36a      	add	r3, pc, #424	@ (adr r3, 8006070 <__ieee754_pow+0xa30>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	4620      	mov	r0, r4
 8005ece:	460d      	mov	r5, r1
 8005ed0:	f7fa fb36 	bl	8000540 <__aeabi_dmul>
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8005eda:	464b      	mov	r3, r9
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa f976 	bl	80001d0 <__aeabi_dsub>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa f970 	bl	80001d0 <__aeabi_dsub>
 8005ef0:	a361      	add	r3, pc, #388	@ (adr r3, 8006078 <__ieee754_pow+0xa38>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa fb23 	bl	8000540 <__aeabi_dmul>
 8005efa:	a361      	add	r3, pc, #388	@ (adr r3, 8006080 <__ieee754_pow+0xa40>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	4680      	mov	r8, r0
 8005f02:	4689      	mov	r9, r1
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa fb1a 	bl	8000540 <__aeabi_dmul>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4640      	mov	r0, r8
 8005f12:	4649      	mov	r1, r9
 8005f14:	f7fa f95e 	bl	80001d4 <__adddf3>
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f24:	f7fa f956 	bl	80001d4 <__adddf3>
 8005f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	4689      	mov	r9, r1
 8005f30:	f7fa f94e 	bl	80001d0 <__aeabi_dsub>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4620      	mov	r0, r4
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	f7fa f948 	bl	80001d0 <__aeabi_dsub>
 8005f40:	4642      	mov	r2, r8
 8005f42:	4606      	mov	r6, r0
 8005f44:	460f      	mov	r7, r1
 8005f46:	464b      	mov	r3, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	f7fa faf8 	bl	8000540 <__aeabi_dmul>
 8005f50:	a34d      	add	r3, pc, #308	@ (adr r3, 8006088 <__ieee754_pow+0xa48>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	4604      	mov	r4, r0
 8005f58:	460d      	mov	r5, r1
 8005f5a:	f7fa faf1 	bl	8000540 <__aeabi_dmul>
 8005f5e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006090 <__ieee754_pow+0xa50>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa f934 	bl	80001d0 <__aeabi_dsub>
 8005f68:	4622      	mov	r2, r4
 8005f6a:	462b      	mov	r3, r5
 8005f6c:	f7fa fae8 	bl	8000540 <__aeabi_dmul>
 8005f70:	a349      	add	r3, pc, #292	@ (adr r3, 8006098 <__ieee754_pow+0xa58>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa f92d 	bl	80001d4 <__adddf3>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	f7fa fadf 	bl	8000540 <__aeabi_dmul>
 8005f82:	a347      	add	r3, pc, #284	@ (adr r3, 80060a0 <__ieee754_pow+0xa60>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa f922 	bl	80001d0 <__aeabi_dsub>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	f7fa fad6 	bl	8000540 <__aeabi_dmul>
 8005f94:	a344      	add	r3, pc, #272	@ (adr r3, 80060a8 <__ieee754_pow+0xa68>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f91b 	bl	80001d4 <__adddf3>
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	f7fa facd 	bl	8000540 <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	f7fa f90f 	bl	80001d0 <__aeabi_dsub>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	460d      	mov	r5, r1
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa fabf 	bl	8000540 <__aeabi_dmul>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	e9cd 0100 	strd	r0, r1, [sp]
 8005fc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa f8fe 	bl	80001d0 <__aeabi_dsub>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fdc:	f7fa fbda 	bl	8000794 <__aeabi_ddiv>
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa faa8 	bl	8000540 <__aeabi_dmul>
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	f7fa f8ee 	bl	80001d4 <__adddf3>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa f8e6 	bl	80001d0 <__aeabi_dsub>
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	f7fa f8e2 	bl	80001d0 <__aeabi_dsub>
 800600c:	460b      	mov	r3, r1
 800600e:	4602      	mov	r2, r0
 8006010:	492d      	ldr	r1, [pc, #180]	@ (80060c8 <__ieee754_pow+0xa88>)
 8006012:	2000      	movs	r0, #0
 8006014:	f7fa f8dc 	bl	80001d0 <__aeabi_dsub>
 8006018:	ec41 0b10 	vmov	d0, r0, r1
 800601c:	ee10 3a90 	vmov	r3, s1
 8006020:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006028:	da0b      	bge.n	8006042 <__ieee754_pow+0xa02>
 800602a:	4650      	mov	r0, sl
 800602c:	f000 f85c 	bl	80060e8 <scalbn>
 8006030:	ec51 0b10 	vmov	r0, r1, d0
 8006034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006038:	f7ff bb6d 	b.w	8005716 <__ieee754_pow+0xd6>
 800603c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006040:	e73a      	b.n	8005eb8 <__ieee754_pow+0x878>
 8006042:	ec51 0b10 	vmov	r0, r1, d0
 8006046:	4619      	mov	r1, r3
 8006048:	e7f4      	b.n	8006034 <__ieee754_pow+0x9f4>
 800604a:	491f      	ldr	r1, [pc, #124]	@ (80060c8 <__ieee754_pow+0xa88>)
 800604c:	2000      	movs	r0, #0
 800604e:	f7ff bb14 	b.w	800567a <__ieee754_pow+0x3a>
 8006052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006056:	f7ff bb10 	b.w	800567a <__ieee754_pow+0x3a>
 800605a:	4630      	mov	r0, r6
 800605c:	4639      	mov	r1, r7
 800605e:	f7ff bb0c 	b.w	800567a <__ieee754_pow+0x3a>
 8006062:	460c      	mov	r4, r1
 8006064:	f7ff bb69 	b.w	800573a <__ieee754_pow+0xfa>
 8006068:	2400      	movs	r4, #0
 800606a:	f7ff bb4b 	b.w	8005704 <__ieee754_pow+0xc4>
 800606e:	bf00      	nop
 8006070:	00000000 	.word	0x00000000
 8006074:	3fe62e43 	.word	0x3fe62e43
 8006078:	fefa39ef 	.word	0xfefa39ef
 800607c:	3fe62e42 	.word	0x3fe62e42
 8006080:	0ca86c39 	.word	0x0ca86c39
 8006084:	be205c61 	.word	0xbe205c61
 8006088:	72bea4d0 	.word	0x72bea4d0
 800608c:	3e663769 	.word	0x3e663769
 8006090:	c5d26bf1 	.word	0xc5d26bf1
 8006094:	3ebbbd41 	.word	0x3ebbbd41
 8006098:	af25de2c 	.word	0xaf25de2c
 800609c:	3f11566a 	.word	0x3f11566a
 80060a0:	16bebd93 	.word	0x16bebd93
 80060a4:	3f66c16c 	.word	0x3f66c16c
 80060a8:	5555553e 	.word	0x5555553e
 80060ac:	3fc55555 	.word	0x3fc55555
 80060b0:	40900000 	.word	0x40900000
 80060b4:	4090cbff 	.word	0x4090cbff
 80060b8:	3f6f3400 	.word	0x3f6f3400
 80060bc:	4090cc00 	.word	0x4090cc00
 80060c0:	3fe00000 	.word	0x3fe00000
 80060c4:	fff00000 	.word	0xfff00000
 80060c8:	3ff00000 	.word	0x3ff00000
 80060cc:	652b82fe 	.word	0x652b82fe
 80060d0:	3c971547 	.word	0x3c971547

080060d4 <fabs>:
 80060d4:	ec51 0b10 	vmov	r0, r1, d0
 80060d8:	4602      	mov	r2, r0
 80060da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80060de:	ec43 2b10 	vmov	d0, r2, r3
 80060e2:	4770      	bx	lr
 80060e4:	0000      	movs	r0, r0
	...

080060e8 <scalbn>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	ec55 4b10 	vmov	r4, r5, d0
 80060ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80060f2:	4606      	mov	r6, r0
 80060f4:	462b      	mov	r3, r5
 80060f6:	b991      	cbnz	r1, 800611e <scalbn+0x36>
 80060f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80060fc:	4323      	orrs	r3, r4
 80060fe:	d03b      	beq.n	8006178 <scalbn+0x90>
 8006100:	4b33      	ldr	r3, [pc, #204]	@ (80061d0 <scalbn+0xe8>)
 8006102:	4620      	mov	r0, r4
 8006104:	4629      	mov	r1, r5
 8006106:	2200      	movs	r2, #0
 8006108:	f7fa fa1a 	bl	8000540 <__aeabi_dmul>
 800610c:	4b31      	ldr	r3, [pc, #196]	@ (80061d4 <scalbn+0xec>)
 800610e:	429e      	cmp	r6, r3
 8006110:	4604      	mov	r4, r0
 8006112:	460d      	mov	r5, r1
 8006114:	da0f      	bge.n	8006136 <scalbn+0x4e>
 8006116:	a326      	add	r3, pc, #152	@ (adr r3, 80061b0 <scalbn+0xc8>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	e01e      	b.n	800615c <scalbn+0x74>
 800611e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006122:	4291      	cmp	r1, r2
 8006124:	d10b      	bne.n	800613e <scalbn+0x56>
 8006126:	4622      	mov	r2, r4
 8006128:	4620      	mov	r0, r4
 800612a:	4629      	mov	r1, r5
 800612c:	f7fa f852 	bl	80001d4 <__adddf3>
 8006130:	4604      	mov	r4, r0
 8006132:	460d      	mov	r5, r1
 8006134:	e020      	b.n	8006178 <scalbn+0x90>
 8006136:	460b      	mov	r3, r1
 8006138:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800613c:	3936      	subs	r1, #54	@ 0x36
 800613e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006142:	4296      	cmp	r6, r2
 8006144:	dd0d      	ble.n	8006162 <scalbn+0x7a>
 8006146:	2d00      	cmp	r5, #0
 8006148:	a11b      	add	r1, pc, #108	@ (adr r1, 80061b8 <scalbn+0xd0>)
 800614a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800614e:	da02      	bge.n	8006156 <scalbn+0x6e>
 8006150:	a11b      	add	r1, pc, #108	@ (adr r1, 80061c0 <scalbn+0xd8>)
 8006152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006156:	a318      	add	r3, pc, #96	@ (adr r3, 80061b8 <scalbn+0xd0>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fa f9f0 	bl	8000540 <__aeabi_dmul>
 8006160:	e7e6      	b.n	8006130 <scalbn+0x48>
 8006162:	1872      	adds	r2, r6, r1
 8006164:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006168:	428a      	cmp	r2, r1
 800616a:	dcec      	bgt.n	8006146 <scalbn+0x5e>
 800616c:	2a00      	cmp	r2, #0
 800616e:	dd06      	ble.n	800617e <scalbn+0x96>
 8006170:	f36f 531e 	bfc	r3, #20, #11
 8006174:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006178:	ec45 4b10 	vmov	d0, r4, r5
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006182:	da08      	bge.n	8006196 <scalbn+0xae>
 8006184:	2d00      	cmp	r5, #0
 8006186:	a10a      	add	r1, pc, #40	@ (adr r1, 80061b0 <scalbn+0xc8>)
 8006188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800618c:	dac3      	bge.n	8006116 <scalbn+0x2e>
 800618e:	a10e      	add	r1, pc, #56	@ (adr r1, 80061c8 <scalbn+0xe0>)
 8006190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006194:	e7bf      	b.n	8006116 <scalbn+0x2e>
 8006196:	3236      	adds	r2, #54	@ 0x36
 8006198:	f36f 531e 	bfc	r3, #20, #11
 800619c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061a0:	4620      	mov	r0, r4
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <scalbn+0xf0>)
 80061a4:	4629      	mov	r1, r5
 80061a6:	2200      	movs	r2, #0
 80061a8:	e7d8      	b.n	800615c <scalbn+0x74>
 80061aa:	bf00      	nop
 80061ac:	f3af 8000 	nop.w
 80061b0:	c2f8f359 	.word	0xc2f8f359
 80061b4:	01a56e1f 	.word	0x01a56e1f
 80061b8:	8800759c 	.word	0x8800759c
 80061bc:	7e37e43c 	.word	0x7e37e43c
 80061c0:	8800759c 	.word	0x8800759c
 80061c4:	fe37e43c 	.word	0xfe37e43c
 80061c8:	c2f8f359 	.word	0xc2f8f359
 80061cc:	81a56e1f 	.word	0x81a56e1f
 80061d0:	43500000 	.word	0x43500000
 80061d4:	ffff3cb0 	.word	0xffff3cb0
 80061d8:	3c900000 	.word	0x3c900000

080061dc <with_errno>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	ed2d 8b02 	vpush	{d8}
 80061e2:	eeb0 8a40 	vmov.f32	s16, s0
 80061e6:	eef0 8a60 	vmov.f32	s17, s1
 80061ea:	4604      	mov	r4, r0
 80061ec:	f7ff f980 	bl	80054f0 <__errno>
 80061f0:	eeb0 0a48 	vmov.f32	s0, s16
 80061f4:	eef0 0a68 	vmov.f32	s1, s17
 80061f8:	ecbd 8b02 	vpop	{d8}
 80061fc:	6004      	str	r4, [r0, #0]
 80061fe:	bd10      	pop	{r4, pc}

08006200 <xflow>:
 8006200:	4603      	mov	r3, r0
 8006202:	b507      	push	{r0, r1, r2, lr}
 8006204:	ec51 0b10 	vmov	r0, r1, d0
 8006208:	b183      	cbz	r3, 800622c <xflow+0x2c>
 800620a:	4602      	mov	r2, r0
 800620c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006210:	e9cd 2300 	strd	r2, r3, [sp]
 8006214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006218:	f7fa f992 	bl	8000540 <__aeabi_dmul>
 800621c:	ec41 0b10 	vmov	d0, r0, r1
 8006220:	2022      	movs	r0, #34	@ 0x22
 8006222:	b003      	add	sp, #12
 8006224:	f85d eb04 	ldr.w	lr, [sp], #4
 8006228:	f7ff bfd8 	b.w	80061dc <with_errno>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	e7ee      	b.n	8006210 <xflow+0x10>
 8006232:	0000      	movs	r0, r0
 8006234:	0000      	movs	r0, r0
	...

08006238 <__math_uflow>:
 8006238:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006240 <__math_uflow+0x8>
 800623c:	f7ff bfe0 	b.w	8006200 <xflow>
 8006240:	00000000 	.word	0x00000000
 8006244:	10000000 	.word	0x10000000

08006248 <__math_oflow>:
 8006248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006250 <__math_oflow+0x8>
 800624c:	f7ff bfd8 	b.w	8006200 <xflow>
 8006250:	00000000 	.word	0x00000000
 8006254:	70000000 	.word	0x70000000

08006258 <__ieee754_sqrt>:
 8006258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	4a66      	ldr	r2, [pc, #408]	@ (80063f8 <__ieee754_sqrt+0x1a0>)
 800625e:	ec55 4b10 	vmov	r4, r5, d0
 8006262:	43aa      	bics	r2, r5
 8006264:	462b      	mov	r3, r5
 8006266:	4621      	mov	r1, r4
 8006268:	d110      	bne.n	800628c <__ieee754_sqrt+0x34>
 800626a:	4622      	mov	r2, r4
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f7fa f966 	bl	8000540 <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4620      	mov	r0, r4
 800627a:	4629      	mov	r1, r5
 800627c:	f7f9 ffaa 	bl	80001d4 <__adddf3>
 8006280:	4604      	mov	r4, r0
 8006282:	460d      	mov	r5, r1
 8006284:	ec45 4b10 	vmov	d0, r4, r5
 8006288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628c:	2d00      	cmp	r5, #0
 800628e:	dc0e      	bgt.n	80062ae <__ieee754_sqrt+0x56>
 8006290:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006294:	4322      	orrs	r2, r4
 8006296:	d0f5      	beq.n	8006284 <__ieee754_sqrt+0x2c>
 8006298:	b19d      	cbz	r5, 80062c2 <__ieee754_sqrt+0x6a>
 800629a:	4622      	mov	r2, r4
 800629c:	4620      	mov	r0, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	f7f9 ff96 	bl	80001d0 <__aeabi_dsub>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	f7fa fa74 	bl	8000794 <__aeabi_ddiv>
 80062ac:	e7e8      	b.n	8006280 <__ieee754_sqrt+0x28>
 80062ae:	152a      	asrs	r2, r5, #20
 80062b0:	d115      	bne.n	80062de <__ieee754_sqrt+0x86>
 80062b2:	2000      	movs	r0, #0
 80062b4:	e009      	b.n	80062ca <__ieee754_sqrt+0x72>
 80062b6:	0acb      	lsrs	r3, r1, #11
 80062b8:	3a15      	subs	r2, #21
 80062ba:	0549      	lsls	r1, r1, #21
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0fa      	beq.n	80062b6 <__ieee754_sqrt+0x5e>
 80062c0:	e7f7      	b.n	80062b2 <__ieee754_sqrt+0x5a>
 80062c2:	462a      	mov	r2, r5
 80062c4:	e7fa      	b.n	80062bc <__ieee754_sqrt+0x64>
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	3001      	adds	r0, #1
 80062ca:	02dc      	lsls	r4, r3, #11
 80062cc:	d5fb      	bpl.n	80062c6 <__ieee754_sqrt+0x6e>
 80062ce:	1e44      	subs	r4, r0, #1
 80062d0:	1b12      	subs	r2, r2, r4
 80062d2:	f1c0 0420 	rsb	r4, r0, #32
 80062d6:	fa21 f404 	lsr.w	r4, r1, r4
 80062da:	4323      	orrs	r3, r4
 80062dc:	4081      	lsls	r1, r0
 80062de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80062e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ea:	07d2      	lsls	r2, r2, #31
 80062ec:	bf5c      	itt	pl
 80062ee:	005b      	lslpl	r3, r3, #1
 80062f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80062f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062f8:	bf58      	it	pl
 80062fa:	0049      	lslpl	r1, r1, #1
 80062fc:	2600      	movs	r6, #0
 80062fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006302:	107f      	asrs	r7, r7, #1
 8006304:	0049      	lsls	r1, r1, #1
 8006306:	2016      	movs	r0, #22
 8006308:	4632      	mov	r2, r6
 800630a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800630e:	1915      	adds	r5, r2, r4
 8006310:	429d      	cmp	r5, r3
 8006312:	bfde      	ittt	le
 8006314:	192a      	addle	r2, r5, r4
 8006316:	1b5b      	suble	r3, r3, r5
 8006318:	1936      	addle	r6, r6, r4
 800631a:	0fcd      	lsrs	r5, r1, #31
 800631c:	3801      	subs	r0, #1
 800631e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006322:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006326:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800632a:	d1f0      	bne.n	800630e <__ieee754_sqrt+0xb6>
 800632c:	4605      	mov	r5, r0
 800632e:	2420      	movs	r4, #32
 8006330:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006334:	4293      	cmp	r3, r2
 8006336:	eb0c 0e00 	add.w	lr, ip, r0
 800633a:	dc02      	bgt.n	8006342 <__ieee754_sqrt+0xea>
 800633c:	d113      	bne.n	8006366 <__ieee754_sqrt+0x10e>
 800633e:	458e      	cmp	lr, r1
 8006340:	d811      	bhi.n	8006366 <__ieee754_sqrt+0x10e>
 8006342:	f1be 0f00 	cmp.w	lr, #0
 8006346:	eb0e 000c 	add.w	r0, lr, ip
 800634a:	da3f      	bge.n	80063cc <__ieee754_sqrt+0x174>
 800634c:	2800      	cmp	r0, #0
 800634e:	db3d      	blt.n	80063cc <__ieee754_sqrt+0x174>
 8006350:	f102 0801 	add.w	r8, r2, #1
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	458e      	cmp	lr, r1
 8006358:	bf88      	it	hi
 800635a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800635e:	eba1 010e 	sub.w	r1, r1, lr
 8006362:	4465      	add	r5, ip
 8006364:	4642      	mov	r2, r8
 8006366:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800636a:	3c01      	subs	r4, #1
 800636c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006370:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006374:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006378:	d1dc      	bne.n	8006334 <__ieee754_sqrt+0xdc>
 800637a:	4319      	orrs	r1, r3
 800637c:	d01b      	beq.n	80063b6 <__ieee754_sqrt+0x15e>
 800637e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80063fc <__ieee754_sqrt+0x1a4>
 8006382:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006400 <__ieee754_sqrt+0x1a8>
 8006386:	e9da 0100 	ldrd	r0, r1, [sl]
 800638a:	e9db 2300 	ldrd	r2, r3, [fp]
 800638e:	f7f9 ff1f 	bl	80001d0 <__aeabi_dsub>
 8006392:	e9da 8900 	ldrd	r8, r9, [sl]
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7fa fb4b 	bl	8000a38 <__aeabi_dcmple>
 80063a2:	b140      	cbz	r0, 80063b6 <__ieee754_sqrt+0x15e>
 80063a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80063a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80063ac:	e9db 2300 	ldrd	r2, r3, [fp]
 80063b0:	d10e      	bne.n	80063d0 <__ieee754_sqrt+0x178>
 80063b2:	3601      	adds	r6, #1
 80063b4:	4625      	mov	r5, r4
 80063b6:	1073      	asrs	r3, r6, #1
 80063b8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80063bc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80063c0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80063c4:	086b      	lsrs	r3, r5, #1
 80063c6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80063ca:	e759      	b.n	8006280 <__ieee754_sqrt+0x28>
 80063cc:	4690      	mov	r8, r2
 80063ce:	e7c1      	b.n	8006354 <__ieee754_sqrt+0xfc>
 80063d0:	f7f9 ff00 	bl	80001d4 <__adddf3>
 80063d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4640      	mov	r0, r8
 80063de:	4649      	mov	r1, r9
 80063e0:	f7fa fb20 	bl	8000a24 <__aeabi_dcmplt>
 80063e4:	b120      	cbz	r0, 80063f0 <__ieee754_sqrt+0x198>
 80063e6:	1cab      	adds	r3, r5, #2
 80063e8:	bf08      	it	eq
 80063ea:	3601      	addeq	r6, #1
 80063ec:	3502      	adds	r5, #2
 80063ee:	e7e2      	b.n	80063b6 <__ieee754_sqrt+0x15e>
 80063f0:	1c6b      	adds	r3, r5, #1
 80063f2:	f023 0501 	bic.w	r5, r3, #1
 80063f6:	e7de      	b.n	80063b6 <__ieee754_sqrt+0x15e>
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	080069a0 	.word	0x080069a0
 8006400:	08006998 	.word	0x08006998

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
